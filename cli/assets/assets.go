// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/default_manifest
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\xbd\x8e\xe4\x30\x08\xc7\xeb\xcd\x53\xd0\x31\x2b\x1f\xd0\xf3\x2c\x23\xd1\x5c\xef\xc2\xad\x1f\xfe\xf4\xf7\x47\x26\x9b\x71\x32\xb7\x24\x8a\x12\xec\x1f\x60\x0c\x0e\xed\xc2\xcc\xac\x6e\xc6\xdb\x4b\x65\x5d\xa4\xab\x14\xef\xee\xb8\xcd\x36\x22\x55\x15\x1f\x02\x25\xa6\xf9\x40\xa0\x70\x17\x31\xdd\x88\x45\xa4\x4f\x34\x53\x18\x32\xdf\x48\xfa\x34\x8c\x08\x0f\x65\x37\x37\x26\x51\x57\xd2\x47\x61\xde\xc4\x4d\x94\x99\xe9\x57\xa0\x9a\x63\xb1\xea\xc6\x47\xb5\xc9\xd1\xb8\x8f\xf0\x4e\x3e\x1d\x6b\x20\x62\x39\x04\x4b\xfc\x03\xc5\xa0\x2d\xe0\x81\xc2\xb1\xf3\x2b\x16\x79\xf3\x60\xd7\x28\xb1\x39\xb7\x2d\x63\x96\x33\xba\xb0\x86\xad\xd4\x6d\x8f\xcb\x05\x89\x17\x11\xf3\xb7\xf8\xd8\x91\x49\x55\x9d\x09\x95\xb9\xff\x67\x83\x3f\xd2\x86\xda\x49\x2f\xe9\x95\x62\x0b\x90\x52\x29\x3b\xa9\x9e\x52\x4e\x0b\x71\xe5\x15\xcb\x80\xc7\x12\x73\x32\x5b\xa1\xf0\x2e\x4b\x9a\x34\x97\xec\x88\x3d\xe7\x24\x9a\xfd\xc4\xbb\x58\xb2\xce\x2f\x71\xd2\x52\x92\x70\xca\x19\x73\x45\xce\x21\x6b\x32\x49\x77\x3c\x79\x29\xa9\xe1\xcb\x35\x63\x43\x46\xf6\xf4\xc2\x00\x59\xc9\xf9\xca\xc0\x31\xfd\x57\x11\x10\xe7\xf2\xd9\x80\xdd\x44\x80\x2c\x5c\x1b\xb0\x69\xc0\x2f\x79\xb2\x52\x96\x3c\x4e\x84\x69\xe5\x06\xe7\x95\x7f\x7b\x15\x83\xdd\xac\x7e\xec\x81\x5c\x56\x8e\x5d\xd5\xce\xee\x3b\x39\x3a\xfb\xf7\x28\xb6\x2e\x69\x6b\x15\x39\x44\xdb\x5a\xe5\x3a\xd9\xa3\xea\x66\x9f\x32\xab\xb8\x8d\x22\x45\x87\xde\x81\xd8\xea\x56\x55\xaa\xad\xa1\x75\x96\x97\xab\xe2\xf0\xb9\x63\xd1\xa6\x49\xfa\x7f\xa1\xb1\x36\x52\x8e\xde\x55\xbb\x67\xbd\x94\x7c\x3c\xbd\xfc\xef\x58\xa9\xb0\xde\xaf\xb5\x15\x57\x3a\x1c\x2c\x9c\xd4\x7a\x65\x58\xb2\x0f\x21\x53\x1e\x31\x1f\x44\xe6\x0f\x49\x94\x91\x88\x7b\x03\xd6\x9c\x63\xc9\xfd\x68\x45\xce\x54\x01\x8b\xa8\x2b\x7e\x56\x2a\x3c\xe5\xde\x16\x1b\xfc\x9d\xc5\x17\xba\x2e\x1f\x83\x9b\x7b\xd1\x2c\xc8\xca\xf8\xae\x96\x7e\x7c\xf3\xb6\x7d\x7d\x7d\x2d\x4d\xc5\x78\xc6\x59\x7f\x45\x54\xaa\xed\xf9\x88\xef\x1f\xfa\x47\x7c\x37\x24\x28\x70\xc3\x1e\x5e\xf0\x5a\xa9\x46\x00\xec\xdf\x73\xa4\x39\x8f\x68\x9e\x2a\x71\x10\x53\xd0\x93\x8c\x82\xf1\x88\xa6\x7b\xd6\xe6\x91\xf7\x91\xf6\x6d\x98\xd9\xb9\xd7\xf5\x88\x4a\xcf\xc0\xc4\x7a\xba\x1e\x2d\x84\x3a\xa2\xae\x0d\x9c\xaa\xa8\xcf\x88\x3f\x51\x23\xc2\xfa\x77\xbf\xe6\x08\x90\xf6\x16\x76\x99\xc4\xf7\xac\x86\x75\x37\xff\x35\xbb\xf9\xde\xfe\x05\x00\x00\xff\xff\x37\x0c\xc8\x3c\x83\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2435, mode: os.FileMode(420), modTime: time.Unix(1510202270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefault_manifest = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9a\xcd\x72\xdb\xc8\x11\x80\xcf\xd2\x53\x6c\xe9\xbc\x32\x66\xa6\xe7\xd7\xc7\xe4\x92\x5c\x92\x54\x6d\x6e\xa9\x1c\xba\x7b\x7a\x48\xac\x49\x00\x01\x40\x5b\xda\xad\x7d\xf7\x14\x49\xcb\xa4\xb4\x90\x04\x8a\x2a\x4b\xbe\x88\x3f\x76\x0f\xbf\xaf\x07\x98\xee\x99\xc2\xef\x97\x17\x57\x9f\xa5\x1f\xea\xb6\xb9\xfa\xf8\x93\xfa\xf9\xf2\xe2\x2a\x4b\x27\x4d\x96\x86\x6b\x19\xae\x3e\xfe\xf4\x9f\xcb\x8b\x8b\xdf\x2f\x2f\x2e\x2e\xae\xea\x75\xd7\xf6\x63\x87\xe3\xf2\xea\xe3\x4f\x57\x8b\x7a\x5c\x6e\xe8\x03\xb7\xeb\xea\x1f\x6d\x96\x7f\xf5\xf5\x5a\xaa\x5f\x87\xb6\xd9\xfd\x87\x9f\x77\x11\xbd\x74\xed\x50\x8f\x6d\x7f\xbb\x8d\x58\x8e\x63\x37\x7c\xac\xaa\x79\x91\x9f\xeb\xaf\x50\x57\xd1\x5a\x05\x59\xb2\xb3\x16\x4c\xe4\x94\x48\xc0\x06\x13\x4c\xf0\x3e\xe8\x90\x44\x8a\x01\x4c\xfa\x6b\x28\xf5\xd8\xf0\x0e\x71\x8d\xc3\x28\xfd\xd5\xe5\xc5\xc5\x1f\x3f\x3f\x6f\xf1\xcb\xb2\xed\xea\x72\x5b\x0d\xd8\xe3\x1a\xe7\x1a\x3c\x12\x75\xa0\x2f\x3a\x79\x00\x65\x40\x4b\xf4\x81\xa3\x0a\x10\x6c\x0c\x92\xd9\x32\x38\x6d\x48\x5b\xd0\xce\xa4\x73\xe9\xeb\x7e\xd3\x0d\xd2\x54\xab\x76\xd1\x6f\x86\xd9\xf8\x8f\x84\x1d\xf8\xb3\x8f\xc6\x68\x88\x36\x4a\xf6\x91\x15\x1a\xaf\x18\x21\x64\x9f\xb3\x43\x96\x68\x0d\x14\x47\x78\x26\xff\xbf\xff\xfe\x97\xbf\xfe\xf3\x97\xb6\x8c\x5f\xb0\x97\xaa\xac\xda\x45\x7b\xcd\xab\xba\x92\xe6\xf3\x5c\x97\x47\x86\x98\x70\x22\x88\x1e\x10\x54\x4c\x31\x46\x13\xd0\xe8\xa8\xbd\x8a\x5e\x33\x14\x23\x39\x04\x8a\xe8\x48\xcb\x63\x4e\xfb\xaf\xef\x2c\x76\x8c\x67\x6a\x6e\xc6\x7a\xf5\xee\x3d\x77\x90\xe7\x88\xb6\xcd\xd8\xd7\x54\x21\x8f\x75\xdb\x6c\xbf\xfc\x72\x96\xf3\x7e\xb8\xa9\x7b\x0e\xb2\x0d\x59\x71\x48\xce\x66\x61\xed\x5c\x66\xa5\x24\xb2\x07\x1b\x4b\x4c\x05\xd1\x29\x85\x8f\xde\x73\x0f\xbc\x8f\x79\x5f\x49\xff\x73\x3d\xde\x6e\xef\xb9\x1f\xc6\xff\x1b\xf0\x6b\x26\xa0\x97\x6e\x75\xfb\x63\xa5\x60\x8f\xfc\xba\x49\x18\xc6\x1f\x2d\x07\xc3\xf8\x1a\x29\x58\xb7\x59\x56\xd5\x50\xaf\xbb\x95\xfc\x10\x19\xb8\x07\xfc\x0a\x09\x18\xfb\x7a\xb1\x90\x7e\x97\xd0\x8a\xdb\x7e\x76\xd9\x7e\xd3\x2c\xfc\x99\xfa\x8c\x54\xac\x8e\x88\x5f\x20\xbd\x9a\x14\x36\xa4\x4b\x60\x21\x4b\xc2\x6c\x10\x28\x0b\x14\x71\x92\x82\x58\xf6\x88\x00\x64\x58\x2b\x7a\xd5\x9e\x65\x8d\xc3\x72\x55\x37\x8b\x4a\x6e\xc6\x3d\xdd\xb7\x4c\x2d\xda\xbe\x5e\xad\x70\xbd\xb9\xf9\xfa\xcd\xcb\x94\xef\x7e\x61\xc2\x58\x3c\xb3\x8b\xc9\x92\x56\x25\x24\x53\x72\x16\x1b\xb5\xcf\x5e\x59\x95\xb2\xb1\x56\x4c\x32\x90\xdd\xdc\x8e\x66\x86\xc2\x79\x49\x5a\xd5\x54\x71\xdb\xe4\x7a\x5b\x5a\x5f\x78\xdd\x7f\xbf\x7c\x3c\xa0\x3d\x5f\xfd\xe5\xfd\xde\xf7\x95\x3e\xa5\xe5\xc3\x0e\x79\x29\xd5\xb8\xec\xeb\x32\xee\xa2\xb7\xd7\xcf\xee\xd3\x5c\xd5\x7b\x43\x4c\x18\x2a\x8c\x56\x50\x74\x26\x13\x91\xc8\x09\x88\x04\x50\x12\x0b\x5a\x85\xda\x59\xf6\xa2\x55\x0a\x27\x18\x1e\x18\x67\x6a\x66\xfc\x2c\xbc\x58\x56\x8b\xf6\x7a\xe8\xe4\x4b\xb5\xfd\x33\xd7\xef\x41\xec\xd4\x1c\x72\x16\x24\xf6\xce\x26\x97\x8b\xc9\xc2\xc9\xe5\xc0\x16\x2d\x83\x28\xa3\x93\x02\x05\x4e\xe6\xce\xe1\xee\x57\x66\x8a\xc9\xd7\xec\x2f\xda\xeb\x5e\x86\x7a\x55\x4b\xc3\xb7\x15\xf5\x82\x9f\xe6\xaf\x58\x93\x83\x4c\x79\x96\x84\x88\x41\x30\xd2\xf6\xca\x8c\xd6\x24\x2c\x1a\x43\xe0\x62\x35\x19\x02\x02\x4b\x39\xfb\x99\x9e\x77\x94\xa7\xab\xde\x48\x5f\xe3\xea\x7a\x68\xb0\xeb\x66\xf7\xa2\xcf\xc6\x1f\xed\xc1\x28\x39\x27\x4a\x53\x02\xeb\x91\x75\xca\x6c\x92\x90\xf6\x2e\x7a\x4e\x2a\x4b\x4e\x09\x53\xe4\x33\x6b\xd1\x1d\xd1\xff\x36\xb2\x99\xdd\x4c\x4d\x07\x1d\xd8\xad\x65\x8e\xca\x71\xd1\x60\x94\x23\xe7\x8a\x4f\xa2\x2d\x31\xf9\x14\x7d\xc8\x1a\x25\x99\x92\xe2\x99\xec\xdb\x3a\xde\x2e\xca\x7a\xac\xf6\x2f\x73\xf1\x1f\x8d\x3b\x18\x40\x52\x48\x21\x81\x13\x31\x51\xd8\x93\x89\x1e\xbc\x25\xc2\x44\x36\x67\x6f\xb5\x62\x7a\x62\x49\x9c\x6d\xb0\x68\xab\xae\x6f\xc7\x96\x36\xa5\xaa\xdb\xf9\x06\x47\x71\x53\x87\x2f\x36\x47\x72\xa9\x60\x94\xa8\x8d\xc9\x39\x66\x9f\x40\x19\x66\x49\x85\x4c\x48\xc4\x5e\x81\x7f\x74\x02\x1e\xdc\x25\x75\xfb\x32\xa1\xdd\x9b\x77\xea\xb4\x67\x9b\xad\xb5\xc2\x66\xf1\x62\xb1\x7b\xc1\x13\x6a\x5a\x5c\xa2\x10\xc8\x19\x2a\x51\x2c\x59\x9b\xd0\x05\xf1\x25\xa4\x62\xb4\x31\x3e\xbb\xa0\xa3\x9d\xbb\x78\x9f\xaf\xc6\xd7\x0b\x69\xae\x17\x6d\x95\x65\xe0\xbe\xee\xc6\x76\xf6\x42\xfe\x36\xb6\x53\xc0\x2f\x4d\xc0\x78\xdb\xc9\xec\xce\xf2\xfb\xeb\xee\xf1\xce\x92\xab\xc6\x7a\x2d\xc3\x88\xeb\xee\x9d\x6b\x1e\x81\x9e\x26\x7c\x5a\x59\x9e\x0e\x3a\xb8\x39\x07\xe8\xad\xb6\x41\xd9\xe4\xc9\x80\x09\x48\x8c\xdb\x9d\x20\x78\x48\x9e\x72\x8a\x62\x1d\x9f\x7b\x16\xff\x75\xaf\x54\xad\x37\x37\xf3\xc9\xff\x1c\x72\xc4\x8d\xe4\x8c\x2b\xb6\x90\xf6\x21\x8a\x4e\x01\xc5\x25\xab\xb4\x24\xe5\x54\x41\x45\x9e\xc9\x95\x7c\x26\xf7\xaf\xd8\x6d\x49\x7e\xd9\xdd\x78\x73\xc9\xa7\x83\x0e\xec\x8c\x48\x49\x69\xeb\x48\x39\x08\xde\x81\x27\x42\x02\x30\xa0\x4d\xb1\x51\x1b\x6d\x60\x6b\x74\x2e\xfb\x66\xdb\x6a\x0e\xbc\x5c\xd7\x79\xac\xb6\x9c\x7d\xbb\x19\xe7\xf7\xad\xcf\xc6\x1f\xb5\xae\x9a\x52\x34\x91\x38\x89\x4b\xca\x12\x0a\x2b\x17\x76\xbb\x0f\x95\x18\xad\x2a\x12\x0a\x8a\x3a\xd3\x68\x55\x2f\x96\xe3\x30\x4a\x77\x78\x77\x3d\xf6\xc8\xd2\x5f\x2f\x66\xd7\xac\x79\x83\x1c\xcd\x56\xca\x4c\xe2\x02\x8a\x00\x13\x17\x25\x2a\x26\xef\xa3\x0d\xe0\x93\x57\x5a\xb4\x4f\x98\xe1\x5c\xb7\xb6\x93\x66\x8b\x51\x37\x8b\x6f\x87\x61\x8b\xf6\xba\xa5\x41\xfa\xcf\xf3\x27\x6d\xee\x30\x07\x3f\x74\xa6\x18\xb0\xc6\xda\x64\xac\xcf\x8e\x98\x4d\x00\xf1\x8e\x29\x73\x41\x57\x42\xf6\xec\xe1\xdc\x6e\xfc\x08\xac\x22\x1c\x6a\x3e\x79\xe2\x66\x8c\x70\xb0\x0a\x24\x96\x88\x45\x47\x93\x01\xc4\x29\xb1\x8e\x62\xce\x29\x69\xa5\x2d\x27\x0c\x58\x10\xb3\x7d\x45\xab\xe3\xd4\xbf\xcc\xea\x91\x11\x8e\x2a\x11\x78\x4d\x89\xb3\x57\x24\x21\xb1\x65\xc0\x50\x30\x45\xab\x09\x58\x83\x11\xab\x94\xf7\x78\xee\xca\xb1\xe5\xf8\xad\xee\x3e\xd5\x4d\xb5\x7f\xb9\xde\x5e\x42\x07\xb8\x53\xdc\x66\x8d\x73\xb4\x3b\x31\x02\xd6\x65\x02\x52\x84\x06\xb3\x2a\x85\x5c\x51\xc0\x64\x6d\x14\x87\x90\x32\x2a\x95\x1e\xdd\x04\xcf\x34\xec\x6a\xe9\x7b\xe1\x6a\xf5\x9b\x9d\x2b\x33\x15\x72\x74\xbe\x5a\x38\xa3\x65\x0a\x4a\x47\x16\xe5\xd0\xb8\xe4\x52\x36\x45\x54\xe4\x08\x02\x60\x52\xd1\xfe\xdc\x3a\x7a\x07\x71\x73\xf3\x37\x1c\x96\x5f\x5f\xc0\x9c\xea\xb0\x8f\x9b\x5a\x0c\x94\x52\x9e\x34\x70\x30\xa6\x84\xa2\x0d\xf8\xc8\x4a\x21\x64\x60\x83\x12\x31\xa5\x84\x8a\xe7\x9e\x41\x7c\xe3\x9b\xab\xf7\x69\x51\x49\xdf\x9f\x70\xec\x3f\x11\x71\x54\x96\x62\xd4\x25\xbb\x98\x43\x14\x65\xb9\xf8\xac\xb2\x68\xa3\x43\x89\x41\x05\x8e\xcc\xc6\xd8\x44\xe7\x2e\x6d\x3d\xf7\xed\x97\x95\xdc\x6e\x17\xda\xb5\x8c\x7d\xcd\xb3\xf1\x9f\x0a\x3d\x2e\xaf\x51\x8b\x4a\x8e\x50\x92\x75\xd1\x80\x07\x0b\x56\x5b\xcb\x5e\x63\xf2\x0e\xb0\x14\x2f\xee\x65\x25\x68\xd7\x20\x7e\x68\xfb\x45\x75\x53\x71\x7f\xdb\x8d\x6d\x35\x0c\xcb\x6a\x94\x7e\x5d\x37\xf8\xcc\x91\x6c\xfb\x61\xd1\xb6\x8b\x95\x0c\xed\xa6\x67\xd9\x29\xed\xc7\x98\x3a\xa9\x2c\xcc\x68\xa3\x35\x18\x73\xb0\x54\x72\x66\xc3\xc9\xa3\x0a\x40\xd9\xa0\xcd\x06\x03\x1a\x99\xbb\xcb\xbd\x07\x39\xdb\xb0\x91\xb1\xda\xd6\x45\xb9\x79\xa6\x9d\x9b\x30\x6b\x64\xaa\x9b\xcb\xd1\x7b\x2e\x0c\x31\xb1\x70\x8a\x2e\xfb\x92\xd1\x44\x97\x12\x78\x74\xc1\xa1\x73\x08\x48\x73\x6f\x99\x3b\xb8\x93\x8c\xb6\xd4\xcf\x2c\x02\x6f\xe5\xb3\x47\x3b\xc9\xa6\xce\xcd\x33\x0f\x1b\xbd\x95\xcc\x8e\xec\x34\x97\x66\x94\xbe\xc1\xd5\x7e\xbb\x27\x7d\xfd\xdc\xfe\xfb\xcd\xd4\x26\x40\x4f\x32\x5d\xc9\xcd\x6e\xb2\x57\xf2\xcc\x16\xef\xad\x0c\x8f\x01\x4f\x32\xdb\xf5\x99\xef\xd3\x69\x8f\x36\xdb\x66\xb8\x1d\xaa\x4d\x53\x9f\x3e\x41\xc3\xed\x54\x5d\x8a\x10\x95\xb6\x3a\x8a\x26\x97\x0a\xe9\x18\x95\x80\x07\x93\x92\x8b\x5a\xc4\x59\xc0\x02\x86\x1f\x7d\x10\xee\x81\xcc\x8e\xec\x24\x97\x2f\x75\x93\xdb\x2f\xa7\xdf\x51\xdf\x45\xe7\x0e\x6e\xb6\xd1\x76\xdd\xaf\x06\xe1\x4d\x2f\x15\xd5\xb9\xee\x37\xcf\x3d\x04\x32\xa1\x76\xaf\xb2\x1d\xb7\x10\x09\x45\xdb\xe4\x53\xb4\xa4\xd9\x3b\x47\x51\x59\x8b\xde\xb1\x82\x6d\x83\xc7\x31\xc4\x9c\x61\x6e\xf1\x7d\x40\x79\x9a\xe3\xd8\x63\x33\x94\xb6\x5f\xbf\x53\xbb\x03\xdf\x69\x5e\x9b\xa6\xe6\x36\xef\xd3\xf2\x4e\xd5\xee\x21\xbe\xcc\xae\x79\xbf\x13\x77\x0f\xf1\x69\xbb\x2d\xdf\x87\x23\xc9\x85\x34\xbb\x23\xe0\x6a\xff\x4f\xd8\xd5\x43\x85\x5d\x5d\x61\xd3\xb4\x23\x9e\xf4\x48\xc6\x7e\x84\x6d\x4b\x7f\x37\xe8\xd4\x4e\x2b\x6a\xa5\x8b\xd1\x5c\x52\x04\x09\x01\xb2\x62\xad\x01\x84\xd8\x59\x63\x43\x32\x4a\x81\xd1\x8f\x1e\x50\x3c\x30\x7f\x82\xfa\xfc\x3c\xf4\x1d\x57\xc3\x88\xe3\xfc\x87\xa8\xdf\x38\x05\x47\xc0\x27\xda\xf7\x1d\xcf\x76\xdc\xfe\xca\xf6\xcf\xf4\x59\x4d\x34\xd6\x1b\xad\x20\x6b\x55\x2c\x5b\x6f\xac\x38\x72\x0a\x75\xc1\x62\xc0\x12\x58\x43\xde\x9b\x47\x2f\xed\xa7\xc0\xf7\x37\xd6\xa2\xc7\x6e\xb9\xaf\x67\x87\xcf\x15\x76\x5d\x3e\xde\xdc\x3f\x63\xf1\x54\xe8\xd1\xf3\x72\x09\x2d\x80\x67\x65\x9c\x35\x42\x54\x50\x69\x86\x90\x6c\xa2\x1c\xb4\x33\x85\x54\xf1\x2e\x3d\xb9\x93\xbe\xbc\xf8\xef\xe5\x1f\x97\xff\x0f\x00\x00\xff\xff\x8f\x55\xd6\x54\x5f\x31\x00\x00")

func assetsDefault_manifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefault_manifest,
		"assets/default_manifest",
	)
}

func assetsDefault_manifest() (*asset, error) {
	bytes, err := assetsDefault_manifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/default_manifest", size: 12639, mode: os.FileMode(420), modTime: time.Unix(1514956342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x3c\x0c\xbe\xe7\x57\x08\x6e\x8f\x6d\xf5\x1e\xde\x53\x8e\xdb\x69\xa7\x0e\xd8\x6e\x43\x10\x28\x36\x6d\x2b\xb3\x25\x4f\x52\x1a\x04\x45\xfe\xfb\x60\xf9\x23\x56\x22\xc9\xce\xa2\x04\x29\xd0\x1e\x7a\x20\x29\x92\x0f\xf3\x90\x94\xfc\x3e\x43\x08\xa1\xe8\x51\xc6\x39\x94\x24\x9a\xa3\x28\x57\xaa\x9a\x63\xbc\x96\x9c\x3d\x37\xd2\x17\x2e\x32\x9c\x08\x92\xaa\xe7\xff\xfe\xc7\x8d\xec\x21\x7a\x6a\x4e\xaa\x5d\x05\xf5\x31\xbe\x5a\x43\xac\x3a\xa9\x80\x3f\x1b\x2a\x20\x89\xe6\xe8\x97\x96\x68\x69\x49\x64\x5e\x50\x96\x2d\xdb\x68\x4f\x07\x55\x46\x14\x6c\xc9\x2e\xd2\x92\x45\xeb\xa5\x12\xbc\x02\xa1\x28\xc8\x68\x8e\xde\xdd\x7e\x86\x4a\x23\x29\xa9\x04\x65\x59\xd4\x2b\xf7\x96\x88\xce\xc3\x06\xa2\x5e\x6b\x45\xd6\x6b\x19\x29\xe1\xe8\x84\x96\xbf\x81\x90\x94\x33\x9b\x2a\xe6\x2c\xa5\xd9\x46\x10\x45\x39\x93\x36\x0b\x25\x68\x96\x81\xb0\xea\xe0\x0d\x98\x5a\xe6\x84\x25\x85\xd7\xa2\xa0\xec\xb7\x8c\x0c\xed\xe2\x08\x99\xa3\xda\x26\x36\x9b\x06\xf9\x4a\xde\xfd\xed\x3d\x55\x09\xea\x34\xa1\xb2\x2a\xc8\x6e\x19\x3e\xdd\xce\x33\x2d\x49\x16\xda\x35\xc8\x58\xd0\x4a\x05\xaf\xc6\x11\xbb\x9c\xbe\xa9\x82\xd2\xad\xd6\x26\x8f\x02\xd2\x3a\xfc\x03\x4e\x20\xa5\x8c\x6a\x8f\xd8\x08\x70\x9a\x93\x23\x2f\x03\x0f\x11\xa2\xeb\xfc\x31\x38\x47\x74\x0f\x0f\xc7\x08\x70\x23\x38\x4d\x6f\x5e\x0b\x4b\xed\xfd\xea\x40\xfa\x11\x15\x1e\x45\xeb\x3a\x2c\x84\x99\xc7\x49\x44\x92\x44\xc7\x26\xc5\xf7\xe1\x48\x4c\x49\x21\x61\x66\xba\x68\x8f\x46\x83\x84\xcd\x55\x65\xb6\xc7\x4d\x76\x8d\xf6\x69\x91\x4b\x50\x8a\xb2\xec\xee\xb6\x40\x7b\xe6\x23\x4c\xd3\xbe\x84\xa3\x5e\xad\x3f\x68\x6f\xe5\x60\x98\xa7\x37\xc6\xb2\x45\x27\xac\x3e\x95\xfc\x1b\xcf\x07\x57\xa6\xae\x15\x3f\x69\xfc\x49\xe3\x0f\x4c\x63\x73\xc7\x87\x27\xb3\x97\x98\x9c\xc1\x6b\x6a\x3d\xec\xf8\x29\xbc\x01\x07\x56\x29\x08\x60\x31\xd8\x6b\xba\x98\xc2\x8b\x8b\x12\x38\x6c\xc0\xc9\x19\xdc\x59\x03\x5f\xad\xdd\x2a\x22\x88\xe7\xee\x73\x6f\xcd\x66\x41\x70\x60\x57\xe0\x8a\xf7\x9c\xb9\xb0\x38\x13\x39\x4a\x14\x71\x78\xd0\x7a\x9a\xf8\xb4\xf5\xed\xd4\x4e\x6d\x47\x52\x23\x14\x36\xd3\xf2\x59\x20\x4b\x21\x9c\xc6\x8e\x2b\x31\x6a\x01\x4e\x8e\xe3\x63\xcd\x58\x9c\xe6\x22\x7f\x5e\x20\xb7\x3b\xd4\x72\x85\x6c\x0a\xd5\x7d\xa1\x92\x73\x8c\x33\xaa\xf2\xcd\xea\x25\xe6\x25\xfe\xf9\xed\xcb\xd7\xd7\x1f\x3c\x55\x5b\x22\x00\xa7\x05\xcf\xf8\x73\xcc\x99\x12\x74\x85\x57\x05\x5f\xe1\x92\x48\x05\x02\x93\xb8\x66\x5b\x6d\xb0\x1d\x3c\x32\xda\x6f\x5a\x2f\x6b\xe9\x9a\x5e\xc8\xda\x2a\x9e\x32\x4c\xdb\x4a\x76\xd7\x81\x16\x9c\x7e\xf8\x05\xdd\x6e\xbe\x0f\x51\x09\x95\x15\x51\x71\x0e\x17\x5e\xcc\xc6\x5f\x92\xe6\xdb\xce\x51\xfe\x09\xcf\xcd\x70\xe3\x71\x80\xfd\x66\x59\x7b\xe7\x21\x9a\x3c\x13\xb5\xa5\xf7\x73\x07\x72\x4f\x38\x74\xc6\x94\xd3\xb6\x74\x7c\x2c\xa0\x73\x66\x10\xf2\xcf\x21\x34\x04\x17\x3e\xf0\xb9\x93\xe2\x2a\x6d\x3f\x6b\xfe\xef\x67\x7f\x03\x00\x00\xff\xff\x39\x9c\x5e\x55\xca\x17\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6090, mode: os.FileMode(420), modTime: time.Unix(1507745626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt":               assetsBannerTxt,
	"assets/default_manifest":         assetsDefault_manifest,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt":       &bintree{assetsBannerTxt, map[string]*bintree{}},
		"default_manifest": &bintree{assetsDefault_manifest, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

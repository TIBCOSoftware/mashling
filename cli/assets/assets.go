// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/default_manifest
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1513272851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefault_manifest = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9a\x4d\x73\xdb\xc8\xd1\xc7\xcf\x76\x95\xbf\xc3\x96\xce\x2b\x63\x5e\x7a\xde\x7c\x7c\x9e\x4b\x72\x49\x52\xb5\xb9\xa5\x72\xe8\xee\xe9\xa1\xb0\x4b\x02\x08\x00\xda\xd2\xa6\xf6\xbb\xa7\x40\x5a\x4b\xca\x21\x4d\x40\x62\x56\xf6\x45\x24\x20\x76\xf3\xff\xeb\xc1\x4c\x77\x0f\xe7\xdf\xef\xde\xbe\xb9\xf9\x28\xfd\x50\xb7\xcd\xcd\x87\x1f\xd4\x8f\xd3\x75\x96\x4e\x9a\x2c\x0d\xd7\x32\xdc\x7c\xf8\xe1\x1f\xef\xde\xbe\x79\x33\x7d\xf0\xcd\x9b\x9b\x7a\xd3\xb5\xfd\xd8\xe1\x78\x77\xf3\xe1\x87\x9b\x55\x3d\xde\x6d\xe9\x3d\xb7\x9b\xea\x2f\x6d\x96\xbf\xf5\xf5\x46\xaa\x9f\x87\xb6\xd9\x7d\xe0\xc7\xbd\x49\x2f\x5d\x3b\xd4\x63\xdb\x3f\x4c\x26\x77\xe3\xd8\x0d\x1f\xaa\x6a\xa6\xe9\xc7\xfa\xb3\xb2\x9b\x08\xa0\x6c\x96\xec\x00\xac\x89\x9c\x12\x89\x85\x60\x82\x09\xde\x07\x1d\x92\x48\x31\x16\x93\x7e\xb4\xa5\x1e\x1b\xde\xa9\xdc\xe0\x30\x4a\x7f\x33\xdd\xfe\xed\xc7\x39\x2c\x3f\xdd\xb5\x5d\x5d\x1e\xaa\x01\x7b\xdc\xe0\x6c\x8e\x73\x66\x07\x86\xa2\x93\xb7\x56\x19\xab\x25\xfa\xc0\x51\x05\x1b\x20\x06\xc9\x0c\x6c\x9d\x36\xa4\xc1\x6a\x67\xd2\x35\x18\xea\x7e\xdb\x0d\xd2\x54\xeb\x76\xd5\x6f\x87\xf9\x10\xe7\xec\x0e\x14\xd9\x47\x63\xb4\x8d\x10\x25\xfb\xc8\x0a\x8d\x57\x8c\x36\x64\x9f\xb3\x43\x96\x08\xc6\x16\x47\x78\x05\x8a\xbf\xff\xf9\xff\xfe\xff\xaf\x3f\xb5\x65\xfc\x84\xbd\x54\x65\xdd\xae\xda\x5b\x5e\xd7\x95\x34\x1f\x67\x13\x9d\xf1\x71\x8a\x8c\x6c\xf4\x16\xad\x8a\x29\xc6\x68\x02\x1a\x1d\xb5\x57\xd1\x6b\xb6\xc5\x48\x0e\x81\x22\x3a\xd2\x72\x96\xec\xf3\xfd\x47\x92\x9d\xce\x97\xd3\x6e\xc7\x7a\xfd\x5d\xe0\xee\x84\xbe\x90\xb7\x6d\xc6\xbe\xa6\x0a\x79\xac\xdb\x66\xba\xf9\xe9\x65\xe8\x7b\x7f\x27\x67\xa3\xcd\x10\xb2\xe2\x90\x1c\x64\x61\xed\x5c\x66\xa5\x24\xb2\xb7\x10\x4b\x4c\x05\xd1\x29\x85\xe7\x67\xe3\x97\xf8\xc7\x9a\xaf\x17\x85\x8f\xf5\xf8\x30\xcd\xc6\xef\x2a\x0c\xbf\x8b\xbe\x72\x1c\x7a\xe9\xd6\x0f\xdf\x5f\x24\xf6\xb2\xaf\x1e\x8b\x61\xfc\x1e\x43\x31\x8c\x57\x8a\xc4\xa6\xcd\xb2\xae\x86\x7a\xd3\xad\xe5\xbb\x09\xc4\x13\xd1\xd7\x89\xc3\xd8\xd7\xab\x95\xf4\xbb\xd0\x56\xdc\xf6\xf3\xb3\xfd\x6b\x07\xe3\xbf\x95\xbf\x2c\x22\xeb\x63\xdd\xcf\x60\x5f\x9f\xe6\x36\xa4\x4b\x60\x21\x20\x61\x36\x68\x29\x8b\x2d\xe2\x24\x05\x01\xf6\x88\xd6\x92\x61\xad\xe8\xea\x15\xcf\x06\x87\xbb\x75\xdd\xac\x2a\xb9\x1f\xf7\x12\x0f\x13\xa9\xab\x9b\xe7\xe6\x84\x47\xb7\xa7\x58\xad\x32\xa0\x53\x21\x5f\xb8\xa4\xe4\xa9\x20\x20\x19\x62\x07\x59\xe9\x42\x26\xa1\x61\xd0\xa6\xcc\xaf\x81\xce\x48\xbf\x62\x4c\x1e\x1f\xa3\x55\xdb\xd7\xeb\x35\x6e\xb6\xf7\x9f\xef\xfc\x0f\xe2\x23\x9e\xd9\xc5\x04\xa4\x55\x09\xc9\x94\x9c\x05\xa2\xf6\xd9\x2b\x50\x29\x1b\x00\x31\xc9\xd8\xec\x9e\x11\x9f\xf3\x18\x2f\x8e\xd5\xba\xa6\x8a\xdb\x26\xd7\x53\x85\xf2\xdc\xf5\xe1\x0f\x0d\xcb\x17\x8a\xaf\x12\x81\x17\x14\xd2\x7f\x38\xfb\xc2\x5a\x1a\x3b\xe4\x3b\xa9\xc6\xbb\xbe\x2e\xe3\xce\xc1\xf4\x40\xed\xae\x66\x13\x3f\xf1\x71\x0a\x54\x61\x04\x41\xd1\x99\x4c\x44\x22\x27\x56\x24\x58\x25\xb1\x20\x28\xd4\x0e\xd8\x8b\x56\x29\x2c\x02\x3d\xe8\x9c\x4f\x9b\xf1\xa3\xf0\xea\xae\x5a\xb5\xb7\x43\x27\x9f\xaa\xe9\xcf\x6c\xcc\x2f\x8c\x4f\x8e\x28\x67\x41\x62\xef\x20\xb9\x5c\x4c\x16\x4e\x2e\x07\x06\x04\xb6\xa2\x8c\x4e\xca\x2a\xeb\x64\xfe\x88\xee\xbe\x68\x3e\x9f\x7c\x1e\x8a\x55\x7b\xdb\xcb\x50\xaf\x6b\x69\xf8\xa1\xa2\x5e\xf0\x97\x05\x8b\xda\x49\x2f\x27\x71\x4b\x42\xc4\x20\x18\x69\x7a\x5c\x23\x98\x84\x45\x63\x08\x5c\x40\x93\x21\x4b\x16\x28\x67\x3f\x1b\xf7\x51\xe9\xb3\x88\xef\xa5\xaf\x71\x7d\x3b\x34\xd8\x75\xf3\x6b\xfd\xcb\x0e\x8e\x1a\x5f\x4a\xce\x89\xd2\x94\x2c\x78\x64\x9d\x32\x9b\x24\xa4\xbd\x8b\x9e\x93\xca\x92\x53\xc2\x14\xf9\x0a\xf9\xfc\x51\xd6\xbf\xb6\xb2\x9d\x5f\xa4\x9e\xb1\x3a\x10\x00\x30\x47\xe5\xb8\x68\x6b\x94\x23\xe7\x8a\x4f\xa2\x81\x98\x7c\x8a\x3e\x64\x8d\x92\x4c\x49\xf1\x0a\x04\x53\x59\xd4\xae\xca\x66\xac\xf6\x2f\xb3\x21\xce\x1b\x1e\x55\x1b\x49\x21\x85\x64\x9d\x88\x89\xc2\x9e\x4c\xf4\xd6\x03\x11\x26\x82\x9c\x3d\x68\xc5\xf4\xb5\xa5\x73\x09\xc7\xaa\xad\xba\xbe\x1d\x5b\xda\x96\xaa\x6e\x17\x70\x1c\x19\x9e\xdc\x10\x83\x1c\xc9\xa5\x82\x51\xa2\x36\x26\xe7\x98\x7d\xb2\xca\x30\x4b\x2a\x64\x42\x22\xf6\xca\xfa\xf3\x83\xf1\xe5\xf4\xa9\xdb\x67\x73\xed\xde\x7c\xc3\x68\x7b\x7d\x4b\xe8\xd6\xd8\xac\x9e\xcf\xf7\xc4\xfa\x14\xa1\x16\x97\x28\x04\x72\x86\x4a\x14\x20\x80\x84\x2e\x88\x2f\x21\x15\xa3\x8d\xf1\xd9\x05\x1d\x61\xfe\x52\x7f\x15\x42\xbe\x5d\x49\x73\xbb\x6a\xab\x2c\x03\xf7\x75\x37\xb6\xf3\x97\xfd\x57\x83\x3e\x25\xfa\x05\x71\x18\x1f\x3a\x99\x5f\xaa\xbe\x0a\xf5\x5e\xe2\x4b\x19\xab\xb1\xde\xc8\x30\xe2\xa6\xfb\x0e\x68\x8f\xc4\x2e\xe6\x5e\x98\xd2\xcf\x58\x1d\x10\x9d\xb3\xe8\x41\x43\x50\x90\x3c\x19\x6b\x02\x12\xe3\xd4\x89\x5b\x6f\x93\xa7\x9c\xa2\x80\xe3\x6b\xfc\x9e\xf2\xb9\x27\xab\x36\xdb\xfb\x05\xfa\x4f\xd8\x1c\xa9\x47\x72\xc6\x15\x28\xa4\x7d\x88\xa2\x53\x40\x71\x09\x94\x96\xa4\x9c\x2a\xa8\xc8\x33\xb9\x92\xaf\xa0\xfe\x67\xec\x26\x39\x3f\xed\x66\xe5\x6c\xfd\x67\xac\x0e\x04\x8c\x48\x49\x69\x70\xa4\x9c\x0d\xde\x59\x4f\x84\x64\xad\xb1\xda\x14\x88\xda\x68\x63\x27\xae\x6b\x10\x6c\xa7\xf2\x75\xe0\xbb\x4d\x9d\xc7\x6a\x12\xdb\xb7\xdb\x71\x41\x31\x7c\xd9\xc1\x51\x3d\xac\x29\x45\x13\x89\x93\xb8\xa4\x80\x50\x58\xb9\xb0\x6b\x70\x54\x62\x04\x55\x24\x14\x14\x75\x05\xae\x75\xbd\xba\x1b\x87\x51\xba\xc3\xbb\xdb\xb1\x47\x96\xfe\x76\x35\x3f\xcf\xcd\xf4\x72\x34\x72\x29\x33\x89\x0b\x28\x62\x99\xb8\x28\x51\x31\x79\x1f\x21\x58\x9f\xbc\xd2\xa2\x7d\xc2\x6c\xaf\x41\xd8\x76\xd2\x4c\x5a\xea\x66\xf5\xfb\x8e\xe5\xaa\xbd\x6d\x69\x90\xfe\xe3\x82\x01\x9c\xed\xe7\x40\x89\xce\x14\x63\xc1\x00\x24\x03\x3e\x3b\x62\x36\xc1\x8a\x77\x4c\x99\x0b\xba\x12\xb2\x67\x6f\xaf\x51\xe7\x1f\xa9\xab\x08\x87\x9a\x97\x0f\xe2\x1c\x17\x07\xb6\x40\x02\x44\x2c\x3a\x9a\x6c\xad\x38\x25\xe0\x28\xe6\x9c\x92\x56\x1a\x38\x61\xc0\x82\x98\xe1\xca\x6c\xc7\xa3\xf0\x4c\xb6\x73\x2e\x8e\x52\x97\xf5\x9a\x12\x67\xaf\x48\x42\x62\x60\x8b\xa1\x60\x8a\xa0\xc9\xb2\xb6\x46\x40\x29\xef\xf1\x1a\xeb\xca\x24\xe6\xd7\xba\xfb\xa5\x6e\xaa\xfd\xcb\xed\xf4\x4c\x1d\x14\x2e\x22\x9c\xe7\xe8\xa8\xfb\x31\x62\xc1\x65\xb2\xa4\x08\x0d\x66\x55\x0a\xb9\xa2\x2c\x13\x40\x14\x87\x36\x65\x54\x2a\x9d\xef\xbb\xe7\x73\x76\xb5\xf4\xbd\x70\xb5\xfe\x15\x66\x23\x9d\xb4\x39\xda\x15\x2f\x9c\x11\x98\x82\xd2\x91\x45\x39\x34\x2e\xb9\x94\x4d\x11\x15\x39\x5a\xb1\xd6\xa4\xa2\xfd\x35\xb2\xef\xa3\x92\xfb\xfb\x3f\xe1\x70\xf7\xf9\xc5\x9a\xc5\x24\x7b\xc3\x93\x4b\x85\x52\xca\x93\xb6\x1c\x8c\x29\xa1\x68\x63\x7d\x64\xa5\xd0\x66\xcb\x06\x25\x62\x4a\x09\x15\xcf\xdf\x02\xf9\x5d\xe3\x02\xca\x5f\x56\x95\xf4\xfd\x92\x1f\x70\x4e\x99\x1c\xe5\xb1\x18\x75\xc9\x2e\xe6\x10\x45\x01\x17\x9f\x55\x16\x6d\x74\x28\x31\xa8\xc0\x91\xd9\x18\x48\x74\x8d\xf5\xaf\xe7\xbe\xfd\xb4\x96\x87\x69\x49\xde\xc8\xd8\xd7\x3c\x1f\xe2\xab\xb6\xc7\x59\x39\x6a\x51\xc9\x11\x4a\x02\x17\x8d\xf5\x16\x2c\x68\x00\xf6\x1a\x93\x77\x16\x4b\xf1\xe2\x9e\x9f\xb3\x76\xe5\xe6\xfb\xb6\x5f\x55\xf7\x15\xf7\x0f\xdd\xd8\x56\xc3\x70\x57\x8d\xd2\x6f\xea\x06\x2f\xed\x1c\xb7\xef\x57\x6d\xbb\x5a\xcb\xd0\x6e\x7b\x96\x1d\xd8\xde\xc9\xc9\x9d\xd4\xc2\x8c\x10\xc1\x60\xcc\x01\xa8\xe4\xcc\x86\x93\x47\x15\x2c\x65\x83\x90\x0d\x06\x34\x32\xbf\xaf\x7e\x22\x74\x09\x68\x23\x63\x35\xa5\x53\xb9\xbf\x54\x18\x9e\x00\x6c\xe4\x64\x5d\x98\xa3\xf7\x5c\xd8\xc6\xc4\xc2\x29\xba\xec\x4b\x46\x13\x5d\x4a\xd6\xa3\x0b\x0e\x9d\x43\x8b\x34\x7f\x32\x3d\x0a\x5c\x0a\x36\x69\xbf\xb4\x4a\xbc\x22\xd6\x5e\xde\x52\xa8\x3a\x37\x97\x0e\xa5\xbd\x22\xd3\x4e\xdd\x62\xa4\x66\x94\xbe\xc1\xf5\xbe\xb9\x94\xbe\xbe\xd8\xf8\xbf\x26\xe1\x09\xb1\x4b\x81\xd7\x72\xbf\x1b\xfd\xb5\x5c\x6a\x27\x5f\x11\xf4\x58\xe4\x52\xc0\x5d\xed\xfa\xed\xa2\xed\xe5\x2d\x81\x1a\x1e\x86\x6a\xdb\xd4\xcf\x18\xae\xe1\xe1\x64\x3a\x8b\x36\x2a\x0d\x3a\x8a\x26\x97\x0a\xe9\x18\x95\x58\x6f\x4d\x4a\x2e\x6a\x11\x07\x16\x8b\x35\x7c\xfe\x18\xe5\x97\x4c\x3b\x75\x4b\x91\x3e\xd5\x4d\x6e\x3f\x3d\x63\xb6\xfd\x51\x54\x8f\x02\x97\x80\x4d\xb9\xa2\x1a\x84\xb7\xbd\x54\x54\xe7\xba\xdf\x5e\x3c\x20\x74\x82\xf0\x69\x4a\x3c\xae\x43\x12\x8a\x86\xe4\x53\x04\xd2\xec\x9d\xa3\xa8\x00\xd0\x3b\x56\x76\x2a\x19\x39\x86\x98\xb3\x9d\x9f\xbb\xbf\x50\xba\x18\x75\xec\xb1\x19\x4a\xdb\x6f\xbe\x61\xc8\x83\xc6\xc5\x78\xdb\xa6\xe6\x36\xef\x03\xf4\x0d\x13\x3e\x91\xf9\x6c\xc8\xe6\xdb\x1e\xc6\x27\x32\x2f\x42\x4e\x2a\xdf\x1f\xb1\xae\xa4\xd9\x6d\x59\x57\xfb\x7f\x61\x57\x0f\x15\x76\x75\x85\x4d\xd3\x8e\xb8\xec\x6c\xca\xde\xc5\xd4\x33\x3c\x7a\x3d\xd9\xd7\x45\xad\x74\x31\x9a\x4b\x8a\x56\x42\xb0\x59\xb1\xd6\xd6\x0a\xb1\x03\x03\x21\x19\xa5\xac\xd1\xe7\xb7\x49\xbe\x0c\xc0\x57\x94\x5f\x25\x1c\x7d\xc7\xd5\x30\xe2\xb8\xe0\xcc\xfe\xeb\x47\xe2\x48\xf4\xf2\x20\xf4\x1d\xcf\x47\x9d\xbe\x69\xfa\x73\x66\xe7\x28\x1a\xf0\x46\x2b\x9b\xb5\x2a\xc0\xe0\x0d\x88\x23\xa7\x50\x17\x2c\xc6\x02\x59\x30\xe4\xbd\x39\xff\xbc\x5f\x90\xbf\x9f\x72\xab\x1e\xbb\xbb\x7d\x16\x3c\x5c\x57\xd8\x75\xf9\xc9\xee\xc2\x05\x96\xaf\xda\x1e\x1d\xba\x4c\x08\xd6\x7a\x56\xc6\x81\x11\xa2\x82\x4a\xb3\x0d\x09\x12\xe5\xa0\x9d\x29\xa4\x8a\x77\xe9\x42\x13\xff\xee\xed\x9b\x7f\xbe\x7b\xfb\xdb\x7f\x02\x00\x00\xff\xff\x3a\x9f\x11\x62\xf0\x33\x00\x00")

func assetsDefault_manifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefault_manifest,
		"assets/default_manifest",
	)
}

func assetsDefault_manifest() (*asset, error) {
	bytes, err := assetsDefault_manifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/default_manifest", size: 13296, mode: os.FileMode(438), modTime: time.Unix(1518012721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\x25\x40\xbb\x15\x41\x40\x4b\x27\x89\xa9\x44\xaa\xe4\x39\x81\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xd7\x01\xe2\xc9\xe0\xfd\x1f\xbf\xfb\x48\xea\xed\xf2\x82\x10\x42\x82\x6b\x1d\xa6\x90\xb3\x60\x45\x82\x14\xb1\x58\x51\xfa\xac\xa5\xb8\xad\x57\xef\xa4\x4a\x68\xa4\x58\x8c\xb7\x9f\x3e\xd3\x7a\xed\x2a\xb8\x69\x4c\x71\x5b\x40\x69\x27\xd7\xcf\x10\x62\xb7\xac\xe0\xf7\x86\x2b\x88\x82\x15\xf9\x59\x2f\x55\xcb\x39\xd3\x69\xc6\x45\xf2\xd4\x04\xbc\xe9\xc9\x12\x86\xf0\xca\xb6\x41\xbd\xf4\xd8\x7a\x2a\x94\x2c\x40\x21\x07\x1d\xac\xc8\x9b\xc7\x97\x21\x35\x72\xd3\xa8\xb8\x48\x82\xbd\x74\x67\x8b\xeb\xb6\x37\x6b\xeb\xc4\xf6\x1a\x3b\xb1\x60\x39\x0c\x6d\x2a\xc1\x0b\x28\xcd\xa5\xb0\xca\x42\x29\x62\x9e\x6c\x14\x43\x2e\x85\xb6\xaa\xa0\xe2\x49\x02\xca\x2e\x84\x17\x10\xf8\x94\x32\x11\x65\x7e\x95\x8c\x8b\x5f\x3a\x30\xc5\x8f\xc3\x0a\x5d\xbd\x37\x6b\xb4\x8a\x88\x77\x03\xda\xdf\xce\xd7\x9f\xb9\xfd\x46\x5c\x17\x19\xdb\x3e\x2d\x92\x74\xeb\x9c\xe7\x2c\x59\xc0\x3b\xe8\x50\xf1\x02\x97\x68\xcb\x00\x72\x6e\xf7\x1c\x21\xf7\xc8\x2b\x9d\x6b\x05\x71\x99\xc2\x15\x8d\x20\xe6\x82\x57\x3e\xa9\x11\xc2\x92\x97\x2b\x37\xa3\x2a\xa6\x54\xc7\x0e\xa3\x45\x0d\xe6\x60\x89\xa2\x8c\x10\x27\x2c\xaa\x9e\xdc\xe5\x2a\x2a\xfd\x9f\xa4\x9c\x8e\xc8\x96\xa8\xa5\x71\x3e\x7b\x21\xe6\xd2\xd0\x4f\xc0\xa2\xa8\x4a\x80\x65\x0f\x7d\xee\x8c\x59\xa6\xa1\x77\xfe\xd4\x7f\x5b\xeb\xa0\x97\xf8\xe0\x90\x33\x27\xe7\x64\x47\x54\xe5\xd6\x26\xd0\x80\xc8\x45\x72\xa6\x27\x47\x63\xf5\x7e\xb8\xb7\x6b\xe7\xb8\x63\xfb\x0e\x77\x6a\x0e\xe0\xf9\x06\x67\x34\x65\xf2\x37\xe0\x2d\x4b\xff\x3a\x03\xfd\x3b\x58\x3b\xad\x1f\x00\x27\xb6\xfe\x0c\xad\x3e\x00\xfe\xde\x00\x6e\x5e\x16\x16\x81\xf9\x08\x60\xa5\x80\xfb\xd8\x6e\xef\xda\x19\x7f\xd4\x9e\x5a\x0c\x0a\x44\x38\x4c\xa1\x4b\x65\x1a\x56\x8e\xcc\x62\x7f\x86\x1e\x90\xc6\x59\x0e\xf9\x92\xf3\x58\x30\xc5\x7c\x37\xaa\x73\x9c\x46\x5b\x1d\x7b\xcc\xcd\xdf\xfd\x0e\x47\x47\x77\x69\x2a\x74\x19\x32\x97\x8f\x4a\x81\x47\x5e\x71\x79\x01\x76\x60\xde\x95\xd9\x18\xb2\xcd\xdc\xbc\x2a\xc4\xd2\x10\xb7\xb6\xeb\xe6\x4d\x9a\x3a\xa7\x87\xf2\xe2\x68\x34\x54\xfd\x68\x38\x30\x96\xc7\x21\x69\xb0\xc3\x36\x19\xb6\xdf\xd1\xf4\x8a\xd2\x84\x63\xba\x59\xdf\x85\x32\xa7\x3f\xbe\x7d\xf9\x7a\xff\x5d\xc6\xf8\xca\x14\xd0\x38\x93\x89\xbc\x0d\xa5\x40\xc5\xd7\x74\x9d\xc9\x35\xcd\x99\x46\x50\x94\x85\x25\xfa\x4a\x85\xd7\xde\x93\xa6\xf9\xf2\x76\xf7\xac\x9d\x0c\x47\xec\x03\xe4\xeb\xc5\xc4\xb3\xcc\xe1\x7d\xbe\x93\xb1\x7a\x74\xce\x7d\x2c\x7a\xbf\x94\x45\x5c\x17\x0c\xc3\x14\x8e\xbf\xea\x4d\x78\xc8\x9a\xef\x4a\xd7\x66\x4c\x79\xee\xce\x4a\xa3\xbd\x26\x9c\x32\x77\x3f\x6d\x92\xe9\xd4\x59\xa9\xfa\x3f\xc1\x10\x0f\x0d\x92\x43\xa8\xb0\x52\xe6\x13\x58\x83\x1c\xc4\x52\x64\x84\xa9\x48\xbf\xc4\xff\x11\x9b\x8b\x62\x83\x0f\x23\xf7\x06\x4b\xfc\x09\xbb\xdc\x59\x1c\x7e\x9d\xb0\x05\x9c\x54\x2f\x71\x93\xe4\x04\xb1\x8b\x5e\x17\xa3\xca\xfa\xef\xee\xf2\x62\x77\x79\xf1\x27\x00\x00\xff\xff\x36\x63\x4c\x69\xaf\x19\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6575, mode: os.FileMode(438), modTime: time.Unix(1517829111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/default_manifest": assetsDefault_manifest,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"default_manifest": &bintree{assetsDefault_manifest, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


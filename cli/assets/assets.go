// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/defGopkg.lock
// assets/defGopkg.toml
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1519905570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x4b\x73\xe3\x48\x8e\xbe\x4f\xc4\xfc\x07\x85\xf7\x30\x97\xb6\x99\xef\x47\x6c\xcc\x65\xf7\xb2\x7b\xda\x43\xcf\xad\x63\xa2\x02\x40\x22\x29\x56\x51\x24\x37\x49\xb9\xec\xfe\xf5\x13\x94\x6c\x8b\x2a\x51\x63\x56\x77\xf8\x60\x27\x00\x92\x5f\x22\xf1\xf8\x12\xfe\x8f\xdd\x3f\xf6\xcd\xb8\xcb\x4d\xcb\xbb\x66\xdc\xc1\x71\xea\x6b\xee\xb8\xc0\xc4\xe9\x97\x5d\xea\x77\x5d\x3f\xed\x38\x35\xd3\x7f\xee\x68\x0f\x5d\xcd\xe3\xee\x00\xaf\x3b\xe4\xdd\xb1\x4b\x7d\xc7\x3b\x7c\xdd\x4d\x7b\xde\x75\xfc\x32\xed\xfe\x96\x78\xd8\x71\x37\x1e\x0b\xff\xed\xe9\xaf\x7f\x99\x7f\x7e\xfb\x6d\x28\xfd\x57\xa6\x69\xfc\xe7\x3f\xff\xfa\x97\xdd\x0e\x0b\x74\xb4\xdf\xfd\x7d\xf7\x70\x80\x71\xe2\xf2\x30\x0b\x3b\x38\xf0\x2c\xaa\x9b\x69\x7f\xc4\x27\xea\x0f\xd5\x57\xce\xb9\xf0\x2b\xf6\xbf\xf3\xb7\xea\xeb\xd8\x77\x03\x4c\xfb\x93\xf1\x00\xf4\x0d\x66\x1c\x7f\xdf\xfd\xf6\xf0\xf4\x70\x7a\x6b\xe1\xe7\x66\x6c\xfa\x6e\x7e\x09\x3a\x2d\xb3\x93\x4a\x59\x08\x2e\x09\xab\x5d\xce\xca\x25\xab\x05\xa6\x20\x25\x42\xd0\xc9\x3a\x74\x0f\x6b\xf0\x56\x90\xfc\xba\xef\x87\x26\xbf\x56\x23\x14\x38\xc0\x26\x08\x59\x46\xa7\xb5\x50\x5a\x72\x70\x9e\x82\xf0\xda\x9b\xe0\x39\x91\x21\x6d\xa5\x42\x69\xb4\xb4\x2a\x6e\x86\xd0\x94\xe3\x30\x72\x57\xb5\x7d\x5d\x8e\xe3\x26\x0c\xc9\x05\xa5\xa4\x0e\x26\x70\x72\x81\x04\x28\x27\x08\xb4\x4f\x2e\x25\x0b\xc4\xc1\x28\x9d\x2d\x9e\x37\xf4\xcc\xe5\xfd\xb9\x67\xf9\x24\x9e\xcc\x56\x64\xff\xf8\xdf\xff\xfa\xef\xff\xfb\xb5\xcf\xd3\x77\x28\x5c\xe5\xb6\xaf\xfb\x47\x6a\x9b\x1b\x84\xf3\x7a\xb7\x7b\xe0\xee\xf9\xe1\x97\xb7\xbf\x8f\x53\xd3\x9e\xec\x6e\x4f\x50\x07\xa7\x41\x8b\x10\x43\x08\xca\x83\x92\x41\x3a\x11\x9c\x24\x9d\x15\x27\xef\x31\x80\x45\xc9\x7f\x0a\x64\xdf\x4d\xa5\xc1\x7b\x40\x81\xa6\xa6\xef\x66\xdb\xef\x1f\x80\x17\xb2\x2a\x71\x6e\xba\x66\x5e\xaf\xaa\xf9\x65\xe2\x6e\xbc\xa7\x6d\xba\x71\x82\x8e\x78\x55\x79\xe8\x13\xb7\xab\x9a\xa1\xf4\xcf\x4d\xe2\xb2\xaa\x1c\xa9\x34\xc3\x54\xe5\xba\xee\xc7\x75\x03\x2e\xcf\xcd\x9d\x6f\x8e\xc7\x61\xe8\xcb\xb4\xaa\x9b\xf8\x94\xa6\x4b\xd5\x73\x33\xbd\xce\xa1\x78\x2b\x2c\x3c\xb4\xaf\x6b\xe2\xf1\xf2\xf2\xd3\x06\xab\xb1\x39\x0c\xed\x05\xcd\x54\x9a\xba\xe6\x72\xb2\xac\xa8\x2f\xe3\x7a\x64\x64\x9d\x8c\x4f\x82\x7c\xb4\x26\x31\x49\x6b\x13\x09\xc1\x81\x9c\x36\x21\x87\x98\x01\xac\x10\xb0\x9e\x58\x5b\x4b\xcf\x5a\xb8\xb4\xff\x26\x54\x86\xe1\x63\x1b\xd4\x77\xb9\xa9\x17\xcb\xc2\xd5\xd9\x99\xb7\xb2\xd9\x33\xd7\xd2\x04\x13\x5c\x4b\x0e\x30\x0c\x0b\xe7\x9f\x64\x6f\xae\xfa\x10\x72\x57\x37\x1d\xff\xb0\xac\xca\xb1\xeb\x16\x46\x6d\x7f\xf5\xcc\xfd\xdc\x53\x28\xb3\x27\x46\x83\x4c\xa4\x40\x63\x62\x9d\xd9\x72\xf4\x6c\xc8\x01\x68\x8d\x8a\xa4\xc0\x3f\x96\x7b\x07\x18\xf7\x6d\xd3\xd5\x77\xeb\xc3\xcb\x74\x76\xf8\x87\x87\xaa\x61\x36\xff\xe5\x46\xff\x1e\x30\x75\x5f\x9a\xb6\x85\xc3\xf1\xe5\x47\xbf\xb4\x0d\x56\xd4\x77\xe9\x94\xa5\xe3\x95\xf8\xfe\xf6\xb5\x50\x46\xc6\x8c\x2e\x53\x8e\xd1\x61\x06\x03\xa8\x90\xac\x49\x42\x66\x54\x11\x14\x19\xa9\xf2\xd6\xed\xc3\x00\xb4\xe7\x6a\xda\x97\x26\x4f\xb7\x75\x7b\x06\x33\x6f\xe6\xac\xbe\x41\x23\x20\x18\x06\x96\x09\x55\x00\x44\xcb\x9a\xd9\x6b\xc1\x21\x83\x11\x20\xad\x21\xc7\x52\x44\xbf\x15\x4d\x82\x67\xa6\x7a\x5f\xd5\xfd\xe3\x38\xf0\xf7\x5b\x3c\x27\xe9\x0d\x0c\xa6\xc4\x80\xe4\xac\x89\x36\x65\x95\x98\xa2\x4d\x9e\x0c\x18\xd2\x2c\x94\x8c\x42\x0b\x6d\xd9\xfe\xa9\xac\xe3\x37\x57\xd5\xfd\x63\xe1\xb1\x69\x1b\xee\xe8\xf5\x16\x21\x16\x86\x6f\x5c\x56\x40\xe6\x08\x00\x9e\x21\x60\x52\xc6\x04\xa3\x22\x64\x09\xde\x53\x36\x12\x15\x6a\xd4\x06\x53\x5a\x6f\xfb\x7f\x00\xe4\x0b\x97\x06\xda\xc7\xb1\x83\x61\x58\xc1\xb9\x46\x4c\x30\x5a\xcb\x42\x62\xd4\xc6\x01\xc9\x98\x48\x45\x46\xe9\x6c\x70\x14\x45\xe2\x14\x23\xc4\x40\x5b\x4f\xf3\x1d\xcc\xff\x1f\xf9\xc8\x9b\x10\x18\x43\x14\x84\xa5\x2c\xb5\x12\x16\xad\xcd\x2e\xb2\x34\x48\xe8\x62\x70\x3e\x49\xe0\xa8\x72\x0c\x2b\x9c\x40\x3e\x89\xad\xb8\xe6\x72\xd9\xd7\xf9\x30\x55\xe7\x5f\x9b\xa0\xe9\x28\x00\x7d\xd4\x96\x59\x05\x26\x87\x2a\x38\xed\x0c\x22\x44\x34\x29\x39\x23\x05\xa1\x4e\xf6\x06\x9a\x78\xd2\x3f\x03\xad\xee\xe7\x3e\x3a\xf5\x78\xcc\xf7\x8a\x50\xd3\x7f\x14\x8b\x93\xe9\x7a\xa5\x48\x26\x05\xb4\x31\x43\xe0\x20\x95\x4a\x29\x24\x17\xb5\x50\x44\x1c\x33\x2a\x1f\x91\x9c\xd0\x2e\x6c\x87\xd6\x42\x57\x7f\x0a\xee\x8c\xe8\x0a\x1f\x3d\xd6\xdc\x3d\xd6\x7d\x95\xf8\xcc\x02\xfa\x4b\x11\x1c\xa6\xd7\x81\xc7\x1f\x96\x15\x74\xaf\x3f\x8a\xd2\xb1\xc0\x55\x9f\x7a\x93\x4f\xcd\x81\xc7\x09\x0e\xc3\xba\x17\x24\xdb\x88\xde\xa3\x55\x98\x03\x1b\x34\x26\x82\xf5\xec\xb2\x8f\x59\x49\x35\xf3\x6e\x2f\x83\xf9\x73\xa5\xe1\xcd\x35\x3f\x91\x6a\xd6\x6a\x70\x46\x1a\x2f\x4c\x74\xa8\xb4\xf2\x80\x04\x73\xdf\xd2\x4e\x47\x87\x29\x06\x36\x96\x36\x13\xf0\xb7\x2e\x33\xf7\x93\x89\x5f\xb6\x45\xb4\x64\x50\x56\x07\x9f\xb3\xcb\x2e\x98\xa0\x63\x0a\xca\x3b\x4f\xd2\x6b\x9d\xb3\x49\x26\x49\x9b\xc4\x1a\x01\x97\x3f\x8b\xeb\x70\x7c\xd9\xe6\x17\x40\xab\x6c\x36\x19\xa5\xf3\x81\x65\xf4\xc0\x36\x1a\x21\x39\x0a\x2b\x32\x08\x74\x84\x36\xa7\x3f\x75\x5c\x5f\x61\x98\x91\xfd\x7a\x8a\xc5\x4d\xb0\x08\x00\xa3\x90\xc6\xa2\xb0\xda\x3b\xab\x1d\x22\xa0\xd6\x4a\x4b\x95\x4d\x90\x4a\x2a\x3d\x83\xdd\xea\x96\xaf\xc7\xb9\x7d\x8c\xb4\x3f\x34\x69\xaa\xf6\xd3\x34\x94\xfe\xf8\x8e\xf8\x33\x30\x2c\x31\x06\x15\x90\x22\xdb\x28\x0c\x02\x93\xb0\xfe\xd4\x6d\x45\x24\x30\x22\xb3\xcf\xc0\xeb\x35\x67\xab\x8f\xbe\x95\x9f\x29\x8e\x18\x0c\x6b\x01\x94\xac\xb4\x00\x89\x0c\xfa\xa0\x21\x99\x9c\x83\x86\x9c\xb5\x8a\x11\x53\xbe\x03\x69\xe5\xeb\x6d\x53\xef\xa7\x71\xe2\xe1\xf2\xd7\xe3\x54\x80\xb8\x3c\xd6\xfd\xbd\xca\xf3\xb4\xa0\xa1\x6d\xcb\x34\xf5\x65\xc0\x05\xad\x7a\x7b\xd1\x97\x37\x32\x73\xa3\x58\x18\x9f\x4d\xbe\x88\x2f\xf1\x8b\xaa\xae\x39\xd0\xfa\x85\x10\x74\x40\x60\x99\x05\x93\x64\xe2\x28\xa2\x4a\xda\x22\x32\x21\x9a\xe8\x99\xb5\x31\x84\xb4\xd2\x1c\xa4\xbd\xd3\x1d\xb6\x9e\x54\x3f\x70\x37\xfb\xa6\xe9\xea\xf7\x4b\xe3\xdc\xe1\x7a\x9c\x2f\x54\x1b\x43\x0a\xac\xca\x4a\x1b\x65\x4c\x54\xc6\x25\x8b\x44\xca\x6b\x76\x96\x30\x51\x06\x9b\x7d\x72\xe4\xf4\xe6\xce\xbf\xc0\x54\x21\x8c\x0d\xfd\xc4\xe1\x7d\x6f\x0a\xaf\x7b\xd9\x23\x1b\x44\x62\x19\x54\xd2\x9a\xad\x60\x63\x31\xa4\x14\xa3\x14\xd2\x50\x04\x0f\x19\x20\x6d\x9e\x0d\x2c\x51\x2e\xbd\xb8\x05\xe5\x5c\x64\x17\x77\x97\x3b\xcd\x47\x3b\x89\x91\x92\x13\xc8\x3e\x92\x21\x0d\x3e\x43\x0c\x46\xa2\x26\xa9\x15\x1b\x21\x9c\x83\xcd\x65\x63\x06\xf9\x7b\x33\x7c\x6b\xba\xea\xfc\xeb\x71\x3e\xe8\x0b\xf2\xcf\x61\xe7\x16\xea\x1f\xa2\xbc\x7a\x6b\xce\x73\x6b\x46\xbe\xa3\x3c\x7f\x6e\xbe\xde\x5d\x0c\xae\x1a\xf7\xfd\x53\xd3\x8a\xb5\xb1\x09\x35\x0a\x04\x05\x49\xe4\x8c\x36\x0b\x4d\x68\x4c\x60\x0b\x3a\x26\x10\x22\x6e\x1e\x77\x0d\x0d\x97\xc2\x54\xb5\xbf\x9b\x4d\xb1\xad\x32\x25\x30\x84\x5e\xc8\x40\x2c\x2c\x28\x1b\x6d\x4c\x2a\xb3\x08\x14\x34\x6b\xad\x62\x96\x2e\x6e\x6e\x73\x5b\x13\xf3\x1d\xe8\xcb\xcb\xff\xc0\xb8\x32\x1a\x3c\xcb\xb5\x5a\x49\x47\x21\x84\x43\xa9\xc9\x2b\x95\x7d\x96\x4a\xbb\x40\x42\x80\x4e\x9a\x14\x70\x80\x18\x23\x08\xda\xee\xb2\x6f\x75\xc5\xa5\xbc\x4f\x2d\x3e\x6d\x30\x21\xc8\x9c\x6c\x48\x3e\xb0\x30\x94\x5d\x12\x89\xa5\x92\x3e\x07\x2f\x3c\x05\x22\xa5\x4c\xc4\xcd\xd5\xa0\x50\xe9\xbf\xb7\xfc\x3a\x97\xa5\x03\x4f\xa5\xa1\x8d\x38\x64\x90\x2c\xa2\x45\xe0\x68\x6c\x50\xda\x69\xa3\x8d\x34\x86\x9c\x84\xe8\xec\xdc\x5a\x1c\xdb\x4f\xba\xca\x89\x9b\x3d\xf5\xa5\xae\x5e\x2a\x2a\xaf\xc3\x74\x9b\xdd\x0f\xe3\xb8\xaf\x26\x2e\x87\xa6\x83\x76\xe5\x96\x9b\x89\x60\xbe\xb0\x41\x48\xde\x60\x4e\x89\x14\x45\x07\xc2\x6b\x4c\x0a\x4c\x52\xe0\x41\xf1\x27\x4c\x7a\x89\xa3\xe3\xdb\xbe\xfa\xd1\xbb\xce\x0c\xee\x3d\xb1\x66\x72\xa0\xae\x57\xd5\x7e\x7e\xee\x43\xd6\xa4\xee\x32\x95\x69\xba\x89\x4b\x07\xed\x99\x17\x73\x69\x16\x39\xda\xf2\xcb\x89\x6b\xb4\xfc\xb2\x98\x6b\x01\xdd\x49\xdc\x14\x9c\xa3\x4c\x3a\x44\x62\x8a\xc1\x26\x97\x13\xa8\x60\x63\xd4\x0e\xac\xb7\x60\x2d\x68\xf8\x6c\x4e\xbd\xdc\xf6\xf8\x7a\x7b\xf0\x6f\x38\x8e\x5d\xf3\xb2\x28\x26\x5d\xea\xbf\xdf\x19\xb1\x05\x1d\x84\x34\x32\xb0\x9c\x6f\x37\x28\x43\x10\xac\xdd\x4c\x31\x6c\x90\xcc\xd6\x68\xc8\x5a\x11\x6c\x87\xb5\xca\x98\x17\x54\x02\x26\xbe\xa2\x16\x30\x71\x85\xc7\xa6\x4d\xb7\x5e\x9f\xd5\x13\xe0\xad\xa2\xe6\x6e\xe5\x8c\x16\xc5\xf8\x22\x2c\x0d\xaf\x5a\x1f\xe9\xf2\xc1\x19\xfd\x11\xea\x0b\xae\x91\xe9\x58\xb8\xc2\x26\x35\xe5\x78\x35\xb7\x84\x6e\xcc\x7d\x39\x5c\x46\x6b\x5d\x43\x7d\x3a\x9b\xde\x08\xa9\x4d\xe5\x46\xd8\xad\x3d\x5e\xa0\xab\x79\x02\x6c\xef\x44\x0f\xcb\x08\x2c\x4d\x74\x31\x18\x94\xe4\xac\xc5\x20\x8c\x01\x67\x49\xe8\xb9\x96\x51\xf0\x21\x25\xfd\xc9\x31\xf5\x75\xcb\x4f\x8b\xd3\xaa\xb9\xbb\xdc\x79\x57\xce\xeb\xfc\x04\x0c\xcd\x58\xc1\xd0\x54\xd0\x75\xfd\x04\xd7\x03\xb6\x85\x49\x19\xa8\x1a\x27\x98\x8e\x77\x62\x0d\x82\x14\x32\x2b\x49\x39\x06\xcd\xde\xeb\x24\x48\x4a\xad\x19\xc9\x1a\x65\x7c\x54\x42\x68\x25\x3f\x61\x1c\xb7\x9b\x28\x03\x7d\xde\xab\x11\x5a\xe8\x68\x31\x30\x7c\x17\xcc\x94\x8a\x6f\xa5\xa5\x3f\x76\xa9\xf4\xd8\x2c\x67\xb9\x69\x91\xff\xd4\x77\x1d\xdf\x0c\x76\x0b\x27\xee\xa6\x06\xda\x71\x31\xa2\xa5\x3e\x2d\xc7\x9a\x33\xe0\x16\x4f\xb8\xbf\xb4\xf8\xe5\x59\x56\x07\x1e\xc7\x19\xf9\xb5\x49\x7f\x1b\xcf\x1f\x82\x6f\xcc\x03\xb4\xcd\xf3\x05\xf9\x81\x27\xb8\x1a\x29\x77\x70\x58\x7e\x75\xe0\xc5\xe6\x0b\x8f\x7d\xfb\xbc\x22\xa8\xd2\xe2\x6c\x3f\x84\x03\x8c\xe3\xb4\x2f\xfd\xb1\xde\x5f\x72\x64\x82\x69\xbc\x5a\x1d\x2f\xcb\x09\x86\xeb\xa4\x39\xfd\xc3\x61\xbd\x02\x29\xe3\x94\x14\x3a\x49\x91\x0d\x19\xa7\x0c\x5b\xb4\x02\x64\x86\x99\x45\xa3\x36\x0a\x9d\x53\xff\x3e\xb4\xc7\xfe\x58\x88\xeb\x02\xc3\xfe\xd4\x24\x17\xeb\x0a\x86\x21\xad\x51\x86\x9b\x10\xf9\xa8\x0d\x27\xfa\xf5\x2e\xfd\x91\x11\xde\xfe\x97\x22\x82\xd1\xda\x91\x50\xd6\x28\x46\xcc\x20\x24\x69\x1f\x4d\xc4\xe4\xa5\x55\x19\x45\x76\x36\xbe\x35\xf8\x93\x47\xe7\xc6\x0d\xa7\x17\x41\x07\xed\xeb\xef\x5c\x1e\xdf\x77\x92\xf8\x3c\x7b\xf9\x50\x5c\x48\x94\x9c\xe5\x4d\x37\x1c\xa7\xf1\x31\x35\x35\x8f\xd3\xfc\x40\xf4\x56\x38\xa9\x52\x40\x08\xa4\x50\xa5\x99\x7e\x79\x0c\xde\x23\x90\x95\x48\x9e\xad\x97\x14\xc0\x65\x16\x19\x29\xca\xcc\x29\x05\x29\x53\x54\xda\x50\x3a\x7d\xed\x7c\xce\x1f\x20\xea\x61\x7c\xa4\x44\xed\x52\x77\x85\xe3\x5f\x01\x00\x00\xff\xff\xc2\xd5\x5d\x2f\x48\x1e\x00\x00")

func assetsDefgopkgLockBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgLock,
		"assets/defGopkg.lock",
	)
}

func assetsDefgopkgLock() (*asset, error) {
	bytes, err := assetsDefgopkgLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.lock", size: 7752, mode: os.FileMode(438), modTime: time.Unix(1521814952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x31\xcf\xd3\x30\x10\x86\xf7\x4a\xfd\x0f\xa7\x74\xa5\xf6\xc7\x27\x26\xa4\x0c\x4c\xec\x4c\xa0\xaa\x83\x63\x5f\x1c\x93\xd8\x67\xce\xe7\xaa\xfd\xf7\x28\x4d\xa0\x85\x52\x86\x6f\x89\xa2\xd7\xef\xf3\xbc\xba\x1d\x7c\xa6\x3c\x7a\x25\x14\x27\xc0\xb3\x89\x79\xc2\xed\x66\xb7\xdd\xec\xe0\x0b\xf6\xc8\x20\x04\x83\x48\x2e\x1f\xb5\xf6\x34\x99\xe4\x95\x0f\x32\xd4\x4e\x05\xd2\x0e\xb3\x76\x64\x8b\xbe\x39\xd4\x20\x71\x9a\xe9\x9e\x18\x1c\x8a\x09\x13\xba\xfb\x0d\x47\xb6\x46\x4c\x62\x24\x50\x52\xeb\x14\xe3\x8f\x1a\x18\x1d\xb4\x70\x68\x56\xbf\xa5\xa8\x6b\x41\xd6\x32\x84\xe4\xb5\x8d\x6e\xf9\x6b\x8e\x33\x11\x7c\xa2\x67\x40\x66\xfa\x8e\x56\x74\x1e\xfd\xd7\xe6\x1d\x34\x5d\x90\xae\xda\x11\x45\x11\xfb\x87\xca\xa7\xf9\xf3\xed\x6a\x9d\xc5\x87\x83\xa5\x54\x84\x4d\x48\x72\xbc\x4e\x01\x24\x13\x11\x5a\x78\x36\xd4\x2c\xad\x13\x72\x09\x94\xe6\xe2\x7b\xf5\xa2\x5e\x9a\xb7\x1b\x5f\x57\x65\xc7\x26\xd9\x61\x2e\x3a\x3c\xad\x59\xa1\xca\xf6\x6f\x38\x5e\x7a\xe2\xf1\x0f\x7c\x99\xa6\x13\x32\x07\x87\xff\x19\x3e\xeb\xcb\xe3\x05\xaf\xea\xc3\xdd\x05\x99\x6b\xc2\x5f\x06\x4a\x7b\x4f\xd0\x42\x6f\xa6\x82\x4b\xe6\x69\x2f\x58\xa4\x40\x0b\xc2\x75\x0d\x6b\xaa\x05\xdd\x3e\x1b\x3b\x1a\x8f\xb7\xb7\xed\xe6\xb7\xef\x1f\xe4\x73\xee\x67\x00\x00\x00\xff\xff\xfc\xcc\xd9\x95\xab\x02\x00\x00")

func assetsDefgopkgTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgToml,
		"assets/defGopkg.toml",
	)
}

func assetsDefgopkgToml() (*asset, error) {
	bytes, err := assetsDefgopkgTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.toml", size: 683, mode: os.FileMode(438), modTime: time.Unix(1521189328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\x25\x40\xbb\x15\x41\x40\x4b\x27\x89\xa9\x44\xaa\xe4\x39\x81\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xd7\x01\xe2\xc9\xe0\xfd\x1f\xbf\xfb\x48\xea\xed\xf2\x82\x10\x42\x82\x6b\x1d\xa6\x90\xb3\x60\x45\x82\x14\xb1\x58\x51\xfa\xac\xa5\xb8\xad\x57\xef\xa4\x4a\x68\xa4\x58\x8c\xb7\x9f\x3e\xd3\x7a\xed\x2a\xb8\x69\x4c\x71\x5b\x40\x69\x27\xd7\xcf\x10\x62\xb7\xac\xe0\xf7\x86\x2b\x88\x82\x15\xf9\x59\x2f\x55\xcb\x39\xd3\x69\xc6\x45\xf2\xd4\x04\xbc\xe9\xc9\x12\x86\xf0\xca\xb6\x41\xbd\xf4\xd8\x7a\x2a\x94\x2c\x40\x21\x07\x1d\xac\xc8\x9b\xc7\x97\x21\x35\x72\xd3\xa8\xb8\x48\x82\xbd\x74\x67\x8b\xeb\xb6\x37\x6b\xeb\xc4\xf6\x1a\x3b\xb1\x60\x39\x0c\x6d\x2a\xc1\x0b\x28\xcd\xa5\xb0\xca\x42\x29\x62\x9e\x6c\x14\x43\x2e\x85\xb6\xaa\xa0\xe2\x49\x02\xca\x2e\x84\x17\x10\xf8\x94\x32\x11\x65\x7e\x95\x8c\x8b\x5f\x3a\x30\xc5\x8f\xc3\x0a\x5d\xbd\x37\x6b\xb4\x8a\x88\x77\x03\xda\xdf\xce\xd7\x9f\xb9\xfd\x46\x5c\x17\x19\xdb\x3e\x2d\x92\x74\xeb\x9c\xe7\x2c\x59\xc0\x3b\xe8\x50\xf1\x02\x97\x68\xcb\x00\x72\x6e\xf7\x1c\x21\xf7\xc8\x2b\x9d\x6b\x05\x71\x99\xc2\x15\x8d\x20\xe6\x82\x57\x3e\xa9\x11\xc2\x92\x97\x2b\x37\xa3\x2a\xa6\x54\xc7\x0e\xa3\x45\x0d\xe6\x60\x89\xa2\x8c\x10\x27\x2c\xaa\x9e\xdc\xe5\x2a\x2a\xfd\x9f\xa4\x9c\x8e\xc8\x96\xa8\xa5\x71\x3e\x7b\x21\xe6\xd2\xd0\x4f\xc0\xa2\xa8\x4a\x80\x65\x0f\x7d\xee\x8c\x59\xa6\xa1\x77\xfe\xd4\x7f\x5b\xeb\xa0\x97\xf8\xe0\x90\x33\x27\xe7\x64\x47\x54\xe5\xd6\x26\xd0\x80\xc8\x45\x72\xa6\x27\x47\x63\xf5\x7e\xb8\xb7\x6b\xe7\xb8\x63\xfb\x0e\x77\x6a\x0e\xe0\xf9\x06\x67\x34\x65\xf2\x37\xe0\x2d\x4b\xff\x3a\x03\xfd\x3b\x58\x3b\xad\x1f\x00\x27\xb6\xfe\x0c\xad\x3e\x00\xfe\xde\x00\x6e\x5e\x16\x16\x81\xf9\x08\x60\xa5\x80\xfb\xd8\x6e\xef\xda\x19\x7f\xd4\x9e\x5a\x0c\x0a\x44\x38\x4c\xa1\x4b\x65\x1a\x56\x8e\xcc\x62\x7f\x86\x1e\x90\xc6\x59\x0e\xf9\x92\xf3\x58\x30\xc5\x7c\x37\xaa\x73\x9c\x46\x5b\x1d\x7b\xcc\xcd\xdf\xfd\x0e\x47\x47\x77\x69\x2a\x74\x19\x32\x97\x8f\x4a\x81\x47\x5e\x71\x79\x01\x76\x60\xde\x95\xd9\x18\xb2\xcd\xdc\xbc\x2a\xc4\xd2\x10\xb7\xb6\xeb\xe6\x4d\x9a\x3a\xa7\x87\xf2\xe2\x68\x34\x54\xfd\x68\x38\x30\x96\xc7\x21\x69\xb0\xc3\x36\x19\xb6\xdf\xd1\xf4\x8a\xd2\x84\x63\xba\x59\xdf\x85\x32\xa7\x3f\xbe\x7d\xf9\x7a\xff\x5d\xc6\xf8\xca\x14\xd0\x38\x93\x89\xbc\x0d\xa5\x40\xc5\xd7\x74\x9d\xc9\x35\xcd\x99\x46\x50\x94\x85\x25\xfa\x4a\x85\xd7\xde\x93\xa6\xf9\xf2\x76\xf7\xac\x9d\x0c\x47\xec\x03\xe4\xeb\xc5\xc4\xb3\xcc\xe1\x7d\xbe\x93\xb1\x7a\x74\xce\x7d\x2c\x7a\xbf\x94\x45\x5c\x17\x0c\xc3\x14\x8e\xbf\xea\x4d\x78\xc8\x9a\xef\x4a\xd7\x66\x4c\x79\xee\xce\x4a\xa3\xbd\x26\x9c\x32\x77\x3f\x6d\x92\xe9\xd4\x59\xa9\xfa\x3f\xc1\x10\x0f\x0d\x92\x43\xa8\xb0\x52\xe6\x13\x58\x83\x1c\xc4\x52\x64\x84\xa9\x48\xbf\xc4\xff\x11\x9b\x8b\x62\x83\x0f\x23\xf7\x06\x4b\xfc\x09\xbb\xdc\x59\x1c\x7e\x9d\xb0\x05\x9c\x54\x2f\x71\x93\xe4\x04\xb1\x8b\x5e\x17\xa3\xca\xfa\xef\xee\xf2\x62\x77\x79\xf1\x27\x00\x00\xff\xff\x36\x63\x4c\x69\xaf\x19\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6575, mode: os.FileMode(438), modTime: time.Unix(1519905570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/defGopkg.lock": assetsDefgopkgLock,
	"assets/defGopkg.toml": assetsDefgopkgToml,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"defGopkg.lock": &bintree{assetsDefgopkgLock, map[string]*bintree{}},
		"defGopkg.toml": &bintree{assetsDefgopkgToml, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


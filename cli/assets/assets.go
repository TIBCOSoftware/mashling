// Code generated by go-bindata.
// sources:
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\xa5\x40\xbb\x15\x41\x70\x96\x4e\x12\x53\x89\x54\x49\x3a\x86\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xc3\x01\xe2\xc9\xb8\xff\x3b\x7d\x77\x47\xf2\xed\xfa\x8a\x10\x42\x82\x5b\x15\xa6\x98\x43\xb0\x22\x41\xaa\x75\xb1\xa2\xf4\x45\x09\x7e\x5f\x53\x1f\x84\x4c\x68\x24\x21\xd6\xf7\x9f\x3e\xd3\x9a\x76\x13\xdc\x35\xaa\x7a\x57\x60\xa9\x27\xd6\x2f\x18\xea\x8e\x2c\xf1\xcf\x86\x49\x8c\x82\x15\xf9\x55\x93\x2a\x72\x0e\x2a\xcd\x18\x4f\x9e\x1b\x87\x77\x3d\x5e\x02\x1a\xb7\xb0\x0b\x6a\xd2\x53\x6b\xa9\x90\xa2\x40\xa9\x19\xaa\x60\x45\xde\x3c\xb6\x0c\xae\x11\x9b\xd2\x92\xf1\x24\x38\x70\xf7\x36\xbf\x6e\x7d\x33\xb7\x8e\x6d\xcf\xb1\x63\x73\xc8\x71\xa8\x53\x31\x5e\x51\x2a\x26\xb8\x95\x17\x0a\x1e\xb3\x64\x23\x41\x33\xc1\x95\x55\x44\x4b\x96\x24\x28\xed\x4c\x7c\x45\xae\x9f\x53\xe0\x51\xe6\x17\xc9\x18\xff\xad\x02\x93\xfd\x34\xcc\xd0\x55\x7b\x33\x47\x2b\x8b\x78\x3f\x40\xfb\xdb\xfb\xea\x33\xb7\xdd\x88\xa9\x22\x83\xdd\xf3\x22\x41\xb7\xc6\x59\x0e\xc9\x02\xd6\x51\x85\x92\x15\x7a\x89\xb2\x0c\x20\xe7\x36\xcf\x34\xe6\x1e\x7e\x25\x73\x2b\x31\x2e\x43\xb8\xa1\x11\xc6\x8c\xb3\xca\x26\x35\x5c\x58\xe2\x72\xc5\x66\x64\x05\x52\x76\xd3\x61\x34\xa9\x41\x1f\x2c\x91\x94\xe1\xe2\x8c\x49\xd5\x9d\xbb\x5c\x46\xa5\xfd\xb3\xa4\xd3\x0d\xb2\x25\x72\x69\x8c\xcf\x9e\x88\x49\x1a\xda\x09\x20\x8a\xaa\x00\x20\xfb\xde\x9f\x9d\x31\x64\x0a\x7b\xfb\xa7\xfe\xdb\x6a\x07\xbd\xc0\x07\x4b\xce\xec\x9c\xb3\xad\xa8\xca\xac\x8d\xa1\x50\x6b\xc6\x93\x0b\xdd\x1c\x8d\xd6\xfb\x99\xbd\x5d\x39\xc7\x0d\xdb\xbf\x70\x27\xe6\x00\x9e\xaf\x71\x46\x43\x26\xff\x02\xde\x42\xfa\xdf\x1e\xe8\x9f\xc1\xda\x6e\xfd\x00\x38\xb1\xd5\x67\xa8\xf5\x01\xf0\xf7\x06\x70\xf3\xb0\xb0\x08\xcc\x47\x00\x2b\x38\x3e\xc6\x76\x7d\xd7\x97\xf1\x7b\xed\x89\xc5\x28\x91\x87\xc3\x10\xba\x50\xa6\x61\xe5\xc4\x28\x0e\x3b\xf4\x88\x30\x2e\xb2\xc9\x97\xec\xc7\x02\x24\xf8\x4e\x54\x97\xd8\x8d\xb6\x3c\x0e\x98\x9b\xbf\xfa\x1d\x8e\x4e\xae\xd2\x54\xe8\x82\x06\x97\x8d\x4a\x80\x45\x5e\x76\x79\x00\x76\x60\xde\x15\xd9\x18\xb2\xcd\xd8\xbc\x22\xc4\x52\x10\xb7\xb4\xeb\xe4\x4d\x9a\x3c\xa7\xbb\xf2\xe2\x68\xd4\x55\x7d\x69\x38\xd2\x97\xc7\x20\x69\xb0\x03\x9b\x4c\xb7\xef\x68\x6a\x45\x69\xc2\x74\xba\x59\x3f\x84\x22\xa7\x3f\xbf\x7d\xf9\xfa\xf8\x43\xc4\x7a\x0b\x12\x69\x9c\x89\x44\xdc\x87\x82\x6b\xc9\xd6\x74\x9d\x89\x35\xcd\x41\x69\x94\x14\xc2\x12\x7d\xa5\xc0\xb6\x77\xa5\x69\x5e\xde\x1e\x5e\x94\x73\xc2\x11\x7b\x03\xf9\x6a\x31\x71\x97\x39\xac\xcf\xb7\x19\xab\x4b\xe7\xdc\x6b\xd1\xfb\x52\x16\x31\x55\x80\x0e\x53\x3c\xfd\xa8\x37\xe1\x22\x6b\xde\x2b\x5d\x1f\x63\xca\x75\x77\xd6\x31\xda\x2b\xc2\x39\x63\xf7\x8f\x4d\x32\x7d\x74\x56\xa2\xfe\x27\x18\xe2\x19\x83\xe4\x98\x51\x58\x09\xb3\x09\x53\x83\x1c\x35\xa5\xc8\xc8\xa4\x22\xfd\x14\x97\xf0\x7d\xfc\x2c\x59\x6c\x2e\xd4\x7f\xf7\xd7\x57\xfb\xeb\xab\xbf\x01\x00\x00\xff\xff\x0e\xdd\x1a\x2c\x9c\x18\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6300, mode: os.FileMode(438), modTime: time.Unix(1507268768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/default_manifest
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1513272851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefault_manifest = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9a\xcd\x72\xdb\xc8\x11\xc7\xcf\x76\x95\xdf\x61\x4b\xe7\x95\x31\x33\x3d\x9f\x3e\x26\x97\xe4\x92\xa4\x6a\x73\x4b\xe5\xd0\xdd\xd3\x43\x61\x97\x04\x10\x00\xb4\xa5\x4d\xed\xbb\xa7\x40\x5a\x16\xa5\x90\x26\x20\xb1\x2c\xfb\x22\x92\x10\xbb\xf1\xff\xf5\x60\xa6\xbb\x87\xf3\xdf\x77\x6f\xdf\x5c\x7d\x94\x7e\xa8\xdb\xe6\xea\xc3\x4f\xea\xe7\xe9\x73\x96\x4e\x9a\x2c\x0d\xd7\x32\x5c\x7d\xf8\xe9\x5f\xef\xde\xbe\x79\x33\x7d\xf1\xcd\x9b\xab\x7a\xd3\xb5\xfd\xd8\xe1\x78\x73\xf5\xe1\xa7\xab\x55\x3d\xde\x6c\xe9\x3d\xb7\x9b\xea\x6f\x6d\x96\x7f\xf4\xf5\x46\xaa\x5f\x87\xb6\xd9\x7d\xe1\xe7\xbd\x49\x2f\x5d\x3b\xd4\x63\xdb\xdf\x4d\x26\x37\xe3\xd8\x0d\x1f\xaa\x6a\xa6\xe9\xc7\xfa\xb3\xb2\xab\x68\xad\x82\x2c\xd9\x59\x0b\x26\x72\x4a\x24\x60\x83\x09\x26\x78\x1f\x74\x48\x22\xc5\x00\x26\x7d\x6f\x4b\x3d\x36\xbc\x53\xb9\xc1\x61\x94\xfe\x6a\xba\xfc\xc7\xcf\x73\x58\x7e\xb9\x69\xbb\xba\xdc\x55\x03\xf6\xb8\xc1\xd9\x1c\xa7\xcc\x1e\x18\x8a\x4e\x1e\x40\x19\xd0\x12\x7d\xe0\xa8\x02\x04\x1b\x83\x64\xb6\x0c\x4e\x1b\xd2\x16\xb4\x33\xe9\x12\x0c\x75\xbf\xed\x06\x69\xaa\x75\xbb\xea\xb7\xc3\x7c\x88\x53\x76\x0f\x14\xd9\x47\x63\x34\x44\x1b\x25\xfb\xc8\x0a\x8d\x57\x8c\x10\xb2\xcf\xd9\x21\x4b\xb4\x06\x8a\x23\xbc\x00\xc5\x3f\xff\xfa\xa7\x3f\xff\xfd\x97\xb6\x8c\x9f\xb0\x97\xaa\xac\xdb\x55\x7b\xcd\xeb\xba\x92\xe6\xe3\x6c\xa2\x13\x3e\x8e\x91\x11\x44\x0f\x08\x2a\xa6\x18\xa3\x09\x68\x74\xd4\x5e\x45\xaf\x19\x8a\x91\x1c\x02\x45\x74\xa4\xe5\x24\xd9\xe7\xeb\xf7\x24\x3b\x9d\x2f\xa7\xdd\x8e\xf5\xfa\x87\xc0\xdd\x09\x7d\x21\x6f\xdb\x8c\x7d\x4d\x15\xf2\x58\xb7\xcd\x74\xf1\xd3\xcb\xd0\xf7\xfe\x8e\xce\x46\xc8\x36\x64\xc5\x21\x39\x9b\x85\xb5\x73\x99\x95\x92\xc8\x1e\x6c\x2c\x31\x15\x44\xa7\x14\x9e\x9e\x8d\x4f\xf1\x0f\x35\x5f\x2e\x0a\x1f\xeb\xf1\x6e\x9a\x8d\x3f\x54\x18\xbe\x88\xbe\x70\x1c\x7a\xe9\xd6\x77\x3f\x5e\x24\xf6\xb2\x2f\x1e\x8b\x61\xfc\x11\x43\x31\x8c\x17\x8a\xc4\xa6\xcd\xb2\xae\x86\x7a\xd3\xad\xe5\x87\x09\xc4\x23\xd1\x97\x89\xc3\xd8\xd7\xab\x95\xf4\xbb\xd0\x56\xdc\xf6\xf3\xb3\xfd\x6b\x07\xe3\xff\x95\xbf\x2c\x22\xeb\x43\xdd\xcf\x60\x5f\x1f\xe7\x36\xa4\x4b\x60\x21\x4b\xc2\x6c\x10\x28\x0b\x14\x71\x92\x82\x58\xf6\x88\x00\x64\x58\x2b\xba\x78\xc5\xb3\xc1\xe1\x66\x5d\x37\xab\x4a\x6e\xc7\xbd\xc4\x2f\x21\x5b\xb5\x7d\xbd\x5e\xe3\x66\x7b\xfb\xf9\xca\x33\xc1\xef\x6f\x71\x8c\x5b\x3c\xb3\x8b\xc9\x92\x56\x25\x24\x53\x72\x16\x1b\xb5\xcf\x5e\x59\x95\xb2\xb1\x56\x4c\x32\x90\xdd\xfc\x7a\x68\x06\xc6\x8b\x63\xb5\xae\xa9\xe2\xb6\xc9\xf5\x94\x8d\x9f\x3b\x17\xbe\x69\x58\x9e\x28\xbe\x48\x04\x5e\x50\x34\x7e\x73\xf6\x85\x75\x23\x76\xc8\x37\x52\x8d\x37\x7d\x5d\xc6\x9d\x83\xe9\x81\xda\x7d\x9a\x4d\xfc\xc8\xc7\x31\x50\x85\xd1\x0a\x8a\xce\x64\x22\x12\x39\x01\x91\x00\x4a\x62\x41\xab\x50\x3b\xcb\x5e\xb4\x4a\x61\x11\xe8\x83\xce\xf9\xb4\x19\x3f\x0a\xaf\x6e\xaa\x55\x7b\x3d\x74\xf2\xa9\x9a\xfe\xcc\xc6\x7c\x62\x7c\x74\x44\x39\x0b\x12\x7b\x67\x93\xcb\xc5\x64\xe1\xe4\x72\x60\x8b\x96\x41\x94\xd1\x49\x81\x02\x27\xf3\x47\x74\x77\xa3\xf9\x7c\xf2\x79\x28\x56\xed\x75\x2f\x43\xbd\xae\xa5\xe1\xbb\x8a\x7a\xc1\xdf\x16\x2c\x6a\x47\xbd\x1c\xc5\x2d\x09\x11\x83\x60\xa4\xe9\x71\x8d\xd6\x24\x2c\x1a\x43\xe0\x62\x35\x19\x02\x02\x4b\x39\xfb\xd9\xb8\xf7\x4a\x9f\x45\x7c\x2b\x7d\x8d\xeb\xeb\xa1\xc1\xae\x9b\x5f\xd7\x9e\x77\x70\xd0\xe4\x51\x72\x4e\x94\xa6\x04\xd6\x23\xeb\x94\xd9\x24\x21\xed\x5d\xf4\x9c\x54\x96\x9c\x12\xa6\xc8\x17\xc8\x5d\xf7\xb2\xfe\xb3\x95\xed\xfc\x82\xec\x84\xd5\x03\x81\xb5\xcc\x51\x39\x2e\x1a\x8c\x72\xe4\x5c\xf1\x49\xb4\x25\x26\x9f\xa2\x0f\x59\xa3\x24\x53\x52\xbc\x00\xc1\x54\x02\xb4\xab\xb2\x19\xab\xfd\xcb\x6c\x88\xd3\x86\x0f\x1c\x90\x14\x52\x48\xe0\x44\x4c\x14\xf6\x64\xa2\x07\x6f\x89\x30\x91\xcd\xd9\x5b\xad\x98\xbe\xb6\x74\x2e\xe1\x58\xb5\x55\xd7\xb7\x63\x4b\xdb\x52\xd5\xed\x02\x8e\x03\xc3\xa3\x9b\x3f\x36\x47\x72\xa9\x60\x94\xa8\x8d\xc9\x39\x66\x9f\x40\x19\x66\x49\x85\x4c\x48\xc4\x5e\x81\x3f\x3d\x18\x4f\xa7\x4f\xdd\x3e\x9b\x6b\xf7\xe6\x3b\x46\xdb\xeb\x5b\x42\xb7\xc6\x66\xf5\x7c\xbe\x47\xd6\xc7\x08\xb5\xb8\x44\x21\x90\x33\x54\xa2\x58\xb2\x36\xa1\x0b\xe2\x4b\x48\xc5\x68\x63\x7c\x76\x41\x47\x3b\x7f\xa9\xbf\x08\x21\x5f\xaf\xa4\xb9\x5e\xb5\x55\x96\x81\xfb\xba\x1b\xdb\xf9\xcb\xfe\xab\x41\x1f\x13\xfd\x82\x38\x8c\x77\x9d\xcc\x2f\x55\x5f\x85\x7a\x2f\xf1\xa5\x8c\xd5\x58\x6f\x64\x18\x71\xd3\xfd\x00\xb4\x07\x62\x17\x73\x2f\x4c\xe9\x27\xac\x1e\x10\x9d\x03\xf4\x56\xdb\xa0\x6c\xf2\x64\xc0\x04\x24\xc6\xa9\xeb\x04\x0f\xc9\x53\x4e\x51\xac\xe3\x4b\xfc\x76\xf0\xb9\x27\xab\x36\xdb\xdb\x05\xfa\x8f\xd8\x1c\xa8\x47\x72\xc6\x15\x5b\x48\xfb\x10\x45\xa7\x80\xe2\x92\x55\x5a\x92\x72\xaa\xa0\x22\xcf\xe4\x4a\xbe\x80\xfa\x5f\xb1\x9b\xe4\xfc\xb2\x9b\x95\xb3\xf5\x9f\xb0\x7a\x20\x60\x44\x4a\x4a\x5b\x47\xca\x41\xf0\x0e\x3c\x11\x12\x80\x01\x6d\x8a\x8d\xda\x68\x03\x13\xd7\x25\x08\xb6\x53\xf9\x3a\xf0\xcd\xa6\xce\x63\x35\x89\xed\xdb\xed\xb8\xa0\x18\x3e\xef\xe0\xa0\x1e\xd6\x94\xa2\x89\xc4\x49\x5c\x52\x96\x50\x58\xb9\xb0\x6b\x70\x54\x62\xb4\xaa\x48\x28\x28\xea\x02\x5c\xeb\x7a\x75\x33\x0e\xa3\x74\x0f\xef\xae\xc7\x1e\x59\xfa\xeb\xd5\xfc\x3c\x37\xd3\xcb\xc1\xc8\xa5\xcc\x24\x2e\xa0\x08\x30\x71\x51\xa2\x62\xf2\x3e\xda\x00\x3e\x79\xa5\x45\xfb\x84\x19\x2e\x41\xd8\x76\xd2\x4c\x5a\xea\x66\xf5\x65\x77\x6e\xd5\x5e\xb7\x34\x48\xff\x71\xc1\x00\xce\xf6\xf3\x40\x89\xce\x14\x03\xd6\x58\x9b\x8c\xf5\xd9\x11\xb3\x09\x20\xde\x31\x65\x2e\xe8\x4a\xc8\x9e\x3d\x5c\xa2\xce\x3f\x50\x57\x11\x0e\x35\x2f\x1f\xc4\x39\x2e\x1e\xd8\x02\x89\x25\x62\xd1\xd1\x64\x00\x71\x4a\xac\xa3\x98\x73\x4a\x5a\x69\xcb\x09\x03\x16\xc4\x6c\x2f\xcc\x76\x38\x0a\xcf\x64\x3b\xe5\xe2\x20\x75\x81\xd7\x94\x38\x7b\x45\x12\x12\x5b\x06\x0c\x05\x53\xb4\x9a\x80\x35\x18\xb1\x4a\x79\x8f\x97\x58\x57\x26\x31\xbf\xd7\xdd\x6f\x75\x53\xed\x5f\xae\xa7\x67\xea\x41\xe1\x22\xc2\x79\x8e\x0e\xba\x1f\x23\x60\x5d\x26\x20\x45\x68\x30\xab\x52\xc8\x15\x05\x4c\xd6\x46\x71\x08\x29\xa3\x52\xe9\x74\xdf\x3d\x9f\xb3\xab\xa5\xef\x85\xab\xf5\xef\x76\x36\xd2\x51\x9b\x83\x1d\xe0\xc2\x19\x2d\x53\x50\x3a\xb2\x28\x87\xc6\x25\x97\xb2\x29\xa2\x22\x47\x10\x00\x93\x8a\xf6\x97\xc8\xbe\xf7\x4a\x6e\x6f\xff\x82\xc3\xcd\xe7\x17\x30\x8b\x49\xf6\x86\x47\x97\x0a\xa5\x94\x27\x0d\x1c\x8c\x29\xa1\x68\x03\x3e\xb2\x52\x08\x19\xd8\xa0\x44\x4c\x29\xa1\xe2\xf9\x5b\x20\x5f\x34\x2e\xa0\xfc\x6d\x55\x49\xdf\x2f\xf9\xb1\xe2\x98\xc9\x41\x1e\x8b\x51\x97\xec\x62\x0e\x51\x94\xe5\xe2\xb3\xca\xa2\x8d\x0e\x25\x06\x15\x38\x32\x1b\x63\x13\x5d\x62\xfd\xeb\xb9\x6f\x3f\xad\xe5\x6e\x5a\x92\x37\x32\xf6\x35\xcf\x87\xf8\xaa\xed\x61\x56\x8e\x5a\x54\x72\x84\x92\xac\x8b\x06\x3c\x58\xb0\xda\x5a\xf6\x1a\x93\x77\x80\xa5\x78\x71\xcf\xcf\x59\xbb\x72\xf3\x7d\xdb\xaf\xaa\xdb\x8a\xfb\xbb\x6e\x6c\xab\x61\xb8\xa9\x46\xe9\x37\x75\x83\xe7\x76\x8e\xdb\xf7\xab\xb6\x5d\xad\x65\x68\xb7\x3d\xcb\x0e\x6c\xef\xe4\xe8\x4e\x6a\x61\x46\x1b\xad\xc1\x98\x83\xa5\x92\x33\x1b\x4e\x1e\x55\x00\xca\x06\x6d\x36\x18\xd0\xc8\xfc\xbe\xfa\x91\xd0\x25\xa0\x8d\x8c\xd5\x94\x4e\xe5\xf6\x5c\x61\x78\x04\xb0\x91\xa3\x75\x61\x8e\xde\x73\x61\x88\x89\x85\x53\x74\xd9\x97\x8c\x26\xba\x94\xc0\xa3\x0b\x0e\x9d\x43\x40\x9a\x3f\x99\xee\x05\x2e\x05\x9b\xb4\x9f\x5b\x25\x5e\x11\x6b\x2f\x6f\x29\x54\x9d\x9b\x73\x07\xb0\x5e\x91\x69\xa7\x6e\x31\x52\x33\x4a\xdf\xe0\x7a\xdf\x5c\x4a\x5f\x9f\x6d\xfc\x5f\x93\xf0\x88\xd8\xa5\xc0\x6b\xb9\xdd\x8d\xfe\x5a\xce\xb5\x93\xaf\x08\x7a\x28\x72\x29\xe0\xae\x76\xfd\x7e\xd1\xf6\xf2\x96\x40\x0d\x77\x43\xb5\x6d\xea\x67\x0c\xd7\x70\x77\x34\x9d\x45\x88\x4a\x5b\x1d\x45\x93\x4b\x85\x74\x8c\x4a\xc0\x83\x49\xc9\x45\x2d\xe2\x2c\x60\x01\xc3\xa7\x8f\x0c\x3e\x65\xda\xa9\x5b\x8a\xf4\xa9\x6e\x72\xfb\xe9\x19\xb3\xed\x5b\x51\xdd\x0b\x5c\x02\x36\xe5\x8a\x6a\x10\xde\xf6\x52\x51\x9d\xeb\x7e\x7b\xf6\x30\xcc\x11\xc2\xc7\x29\xf1\xb0\x0e\x49\x28\xda\x26\x9f\xa2\x25\xcd\xde\x39\x8a\xca\x5a\xf4\x8e\x15\x4c\x25\x23\xc7\x10\x73\x86\xf9\xb9\xfb\x89\xd2\xc5\xa8\x63\x8f\xcd\x50\xda\x7e\xf3\x1d\x43\x3e\x68\x5c\x8c\xb7\x6d\x6a\x6e\xf3\x3e\x40\xdf\x31\xe1\x23\x99\xcf\x86\x6c\xbe\xef\x61\x7c\x24\xf3\x2c\xe4\xa4\xf2\xfd\x01\xeb\x4a\x9a\xdd\x96\x75\xb5\xff\x17\x76\xf5\x50\x61\x57\x57\xd8\x34\xed\x88\xcb\xce\xa6\xec\x5d\x4c\x3d\xc3\xbd\xd7\xa3\x7d\x5d\xd4\x4a\x17\xa3\xb9\xa4\x08\x12\x02\x64\xc5\x5a\x03\x08\xb1\xb3\xc6\x86\x64\x94\x02\xa3\x4f\x6f\x93\x3c\x0d\xc0\x57\x94\x5f\x24\x1c\x7d\xc7\xd5\x30\xe2\xb8\xe0\x7c\xfa\xeb\x47\xe2\x40\xf4\xf2\x20\xf4\x1d\xcf\x47\x9d\xee\x34\xfd\x39\xb1\x73\x14\x8d\xf5\x46\x2b\xc8\x5a\x15\xcb\xd6\x1b\x2b\x8e\x9c\x42\x5d\xb0\x18\xb0\x04\xd6\x90\xf7\xe6\xf4\xf3\x7e\x46\xfe\x7e\xca\xad\x7a\xec\x6e\xf6\x59\xf0\xe1\x73\x85\x5d\x97\x1f\xed\x2e\x9c\x61\xf9\xaa\xed\xc1\x01\xc3\x84\x16\xc0\xb3\x32\xce\x1a\x21\x2a\xa8\x34\x43\x48\x36\x51\x0e\xda\x99\x42\xaa\x78\x97\xce\x34\xf1\xef\xde\xbe\xf9\xf7\xbb\xb7\x7f\xfc\x2f\x00\x00\xff\xff\x1c\xe2\x17\xeb\xdc\x32\x00\x00")

func assetsDefault_manifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefault_manifest,
		"assets/default_manifest",
	)
}

func assetsDefault_manifest() (*asset, error) {
	bytes, err := assetsDefault_manifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/default_manifest", size: 13020, mode: os.FileMode(438), modTime: time.Unix(1516355678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\xa5\x40\xbb\x15\x41\x70\x96\x4e\x12\x53\x89\x54\x49\x3a\x86\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xc3\x01\xe2\xc9\xb8\xff\x3b\x7d\x77\x47\xf2\xed\xfa\x8a\x10\x42\x82\x5b\x15\xa6\x98\x43\xb0\x22\x41\xaa\x75\xb1\xa2\xf4\x45\x09\x7e\x5f\x53\x1f\x84\x4c\x68\x24\x21\xd6\xf7\x9f\x3e\xd3\x9a\x76\x13\xdc\x35\xaa\x7a\x57\x60\xa9\x27\xd6\x2f\x18\xea\x8e\x2c\xf1\xcf\x86\x49\x8c\x82\x15\xf9\x55\x93\x2a\x72\x0e\x2a\xcd\x18\x4f\x9e\x1b\x87\x77\x3d\x5e\x02\x1a\xb7\xb0\x0b\x6a\xd2\x53\x6b\xa9\x90\xa2\x40\xa9\x19\xaa\x60\x45\xde\x3c\xb6\x0c\xae\x11\x9b\xd2\x92\xf1\x24\x38\x70\xf7\x36\xbf\x6e\x7d\x33\xb7\x8e\x6d\xcf\xb1\x63\x73\xc8\x71\xa8\x53\x31\x5e\x51\x2a\x26\xb8\x95\x17\x0a\x1e\xb3\x64\x23\x41\x33\xc1\x95\x55\x44\x4b\x96\x24\x28\xed\x4c\x7c\x45\xae\x9f\x53\xe0\x51\xe6\x17\xc9\x18\xff\xad\x02\x93\xfd\x34\xcc\xd0\x55\x7b\x33\x47\x2b\x8b\x78\x3f\x40\xfb\xdb\xfb\xea\x33\xb7\xdd\x88\xa9\x22\x83\xdd\xf3\x22\x41\xb7\xc6\x59\x0e\xc9\x02\xd6\x51\x85\x92\x15\x7a\x89\xb2\x0c\x20\xe7\x36\xcf\x34\xe6\x1e\x7e\x25\x73\x2b\x31\x2e\x43\xb8\xa1\x11\xc6\x8c\xb3\xca\x26\x35\x5c\x58\xe2\x72\xc5\x66\x64\x05\x52\x76\xd3\x61\x34\xa9\x41\x1f\x2c\x91\x94\xe1\xe2\x8c\x49\xd5\x9d\xbb\x5c\x46\xa5\xfd\xb3\xa4\xd3\x0d\xb2\x25\x72\x69\x8c\xcf\x9e\x88\x49\x1a\xda\x09\x20\x8a\xaa\x00\x20\xfb\xde\x9f\x9d\x31\x64\x0a\x7b\xfb\xa7\xfe\xdb\x6a\x07\xbd\xc0\x07\x4b\xce\xec\x9c\xb3\xad\xa8\xca\xac\x8d\xa1\x50\x6b\xc6\x93\x0b\xdd\x1c\x8d\xd6\xfb\x99\xbd\x5d\x39\xc7\x0d\xdb\xbf\x70\x27\xe6\x00\x9e\xaf\x71\x46\x43\x26\xff\x02\xde\x42\xfa\xdf\x1e\xe8\x9f\xc1\xda\x6e\xfd\x00\x38\xb1\xd5\x67\xa8\xf5\x01\xf0\xf7\x06\x70\xf3\xb0\xb0\x08\xcc\x47\x00\x2b\x38\x3e\xc6\x76\x7d\xd7\x97\xf1\x7b\xed\x89\xc5\x28\x91\x87\xc3\x10\xba\x50\xa6\x61\xe5\xc4\x28\x0e\x3b\xf4\x88\x30\x2e\xb2\xc9\x97\xec\xc7\x02\x24\xf8\x4e\x54\x97\xd8\x8d\xb6\x3c\x0e\x98\x9b\xbf\xfa\x1d\x8e\x4e\xae\xd2\x54\xe8\x82\x06\x97\x8d\x4a\x80\x45\x5e\x76\x79\x00\x76\x60\xde\x15\xd9\x18\xb2\xcd\xd8\xbc\x22\xc4\x52\x10\xb7\xb4\xeb\xe4\x4d\x9a\x3c\xa7\xbb\xf2\xe2\x68\xd4\x55\x7d\x69\x38\xd2\x97\xc7\x20\x69\xb0\x03\x9b\x4c\xb7\xef\x68\x6a\x45\x69\xc2\x74\xba\x59\x3f\x84\x22\xa7\x3f\xbf\x7d\xf9\xfa\xf8\x43\xc4\x7a\x0b\x12\x69\x9c\x89\x44\xdc\x87\x82\x6b\xc9\xd6\x74\x9d\x89\x35\xcd\x41\x69\x94\x14\xc2\x12\x7d\xa5\xc0\xb6\x77\xa5\x69\x5e\xde\x1e\x5e\x94\x73\xc2\x11\x7b\x03\xf9\x6a\x31\x71\x97\x39\xac\xcf\xb7\x19\xab\x4b\xe7\xdc\x6b\xd1\xfb\x52\x16\x31\x55\x80\x0e\x53\x3c\xfd\xa8\x37\xe1\x22\x6b\xde\x2b\x5d\x1f\x63\xca\x75\x77\xd6\x31\xda\x2b\xc2\x39\x63\xf7\x8f\x4d\x32\x7d\x74\x56\xa2\xfe\x27\x18\xe2\x19\x83\xe4\x98\x51\x58\x09\xb3\x09\x53\x83\x1c\x35\xa5\xc8\xc8\xa4\x22\xfd\x14\x97\xf0\x7d\xfc\x2c\x59\x6c\x2e\xd4\x7f\xf7\xd7\x57\xfb\xeb\xab\xbf\x01\x00\x00\xff\xff\x0e\xdd\x1a\x2c\x9c\x18\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6300, mode: os.FileMode(438), modTime: time.Unix(1516355599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/default_manifest": assetsDefault_manifest,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"default_manifest": &bintree{assetsDefault_manifest, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


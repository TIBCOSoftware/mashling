// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/default_manifest
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1513272851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefault_manifest = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9a\x4d\x73\xdb\xc8\xd1\xc7\xcf\x76\x95\xbf\xc3\x96\xce\x2b\x63\xde\x67\xda\xc7\xe7\xb9\x24\x97\x24\x55\x9b\x5b\x2a\x87\xee\x9e\x1e\x12\xbb\x24\x80\x00\xa0\x2d\x6d\x6a\xbf\x7b\x0a\xa4\x65\x51\x5e\xd2\x02\x24\x96\x65\x5d\x44\x12\x62\x37\xff\xbf\x1e\x4e\xbf\x0c\xf1\xdf\x77\x6f\xdf\x5c\x7d\x94\x7e\xa8\xdb\xe6\xea\xc3\x4f\xea\xe7\xe9\x75\x96\x4e\x9a\x2c\x0d\xd7\x32\x5c\x7d\xf8\xe9\x5f\xef\xde\xbe\x79\x33\xbd\xf1\xcd\x9b\xab\x7a\xdb\xb5\xfd\xd8\xe1\xb8\xbe\xfa\xf0\xd3\xd5\xaa\x1e\xd7\x3b\x7a\xcf\xed\xb6\xfa\x5b\x9b\xe5\x1f\x7d\xbd\x95\xea\xd7\xa1\x6d\xf6\x6f\xf8\xf9\x60\xd2\x4b\xd7\x0e\xf5\xd8\xf6\xb7\x93\xc9\x7a\x1c\xbb\xe1\x43\x55\xcd\x34\xfd\x58\x7f\x56\x76\x95\x9c\x53\x36\x4b\xf6\xce\x59\x93\x18\x80\xc4\xba\x68\xa2\x89\x21\x44\x1d\x41\xa4\x18\x8b\xa0\xef\x6c\xa9\xc7\x86\xf7\x2a\xb7\x38\x8c\xd2\x5f\x4d\x97\xff\xf8\x79\x0e\xcb\x2f\xeb\xb6\xab\xcb\x6d\x35\x60\x8f\x5b\x9c\xcd\x71\xce\xec\x9e\xc1\x3a\x15\x92\x0d\x50\x4a\xb0\x41\x93\x36\x06\x54\x36\x29\x68\x5f\x8a\x75\x18\x53\xb1\x24\xe0\xfd\x25\x18\xea\x7e\xd7\x0d\xd2\x54\x9b\x76\xd5\xef\x86\xf9\x10\xe7\xec\x8e\x56\x02\xa2\x33\x28\x05\x1d\x19\x15\x32\x17\xa7\x54\x04\x53\x2c\x65\xeb\xc9\x3b\x03\x90\x84\x2c\x5d\x80\xe2\x9f\x7f\xfd\xbf\xff\xff\xfb\x2f\x6d\x19\x3f\x61\x2f\x55\xd9\xb4\xab\xf6\x9a\x37\x75\x25\xcd\xc7\xd9\x44\x67\x7c\x9c\x22\x8b\x99\x8c\x13\x25\xa4\x0d\x06\x04\x9b\x52\x71\x1c\x83\xcb\x90\xc0\x67\xa7\x0c\xe4\xe0\x8c\x2e\x67\xc9\x3e\x5f\xbf\x23\xd9\xeb\x7c\x3e\xed\x6e\xac\x37\xaf\x02\x77\x2f\xf4\x99\xbc\x6d\x33\xf6\x35\x55\xc8\x63\xdd\x36\xd3\xc5\x4f\xcf\x43\x3f\xf8\x3b\x89\x2f\x51\x2b\x43\x5e\x03\xf8\xe2\x0b\x93\x28\x4d\x41\x31\x59\xe1\xe4\x90\x72\xf4\x1e\x01\xe6\xe3\x1f\x6b\xbe\x5c\x14\x3e\xd6\xe3\xed\xb4\x1b\x5f\x55\x18\xbe\x88\xbe\x70\x1c\x7a\xe9\x36\xb7\xaf\x2f\x12\x07\xd9\x17\x8f\xc5\x30\xbe\xc6\x50\x0c\xe3\x85\x22\xb1\x6d\xb3\x6c\xaa\xa1\xde\x76\x1b\x79\x35\x81\x78\x20\xfa\x32\x71\x18\xfb\x7a\xb5\x92\x7e\x1f\xda\x8a\xdb\x7e\x7e\xb5\x7f\xe9\x60\xfc\x59\xf9\xf3\x22\xb2\x39\xd6\xfd\x04\xf6\xcd\x69\x6e\x43\xba\x44\x16\x72\x24\xcc\x06\x2d\x65\xb1\x45\xbc\x40\x14\xc7\x01\xd1\x5a\x32\xac\xd5\xe5\x3b\x9e\x2d\x0e\xeb\x4d\xdd\xac\x2a\xb9\x19\x0f\x12\xbf\x84\x6c\xd5\xf6\xf5\x66\x83\xdb\xdd\xcd\xe7\x2b\x4f\x04\xbf\xfb\x88\x93\x9d\x1e\x67\x12\x65\x09\x21\x81\x56\x8a\x7c\xb6\xca\x80\xcb\x50\x6c\x0a\x8c\xc1\x38\x6b\x31\xd2\xf9\x7e\xf5\x4f\xfd\xd0\x0c\x8c\x67\xc7\x6a\x53\x53\xc5\x6d\x93\xeb\xa9\x1a\x3f\x75\x2f\x7c\xd7\xb0\x7c\xa5\xf8\x22\x11\x78\x46\xd3\xf8\xdd\xd9\x17\xf6\x8d\xd8\x21\xaf\xa5\x1a\xd7\x7d\x5d\xc6\xbd\x83\xe9\x0b\xb5\x7f\x35\x9b\xf8\x81\x8f\x53\xa0\xae\xc4\x88\x94\xc4\x40\xc8\xc1\xb1\x8f\x12\x04\x35\x07\xb1\x45\x15\xed\x0d\x71\xcc\x01\x2d\x2e\x02\xbd\xd7\x39\x9f\x36\xe3\x47\xe1\xd5\xba\x5a\xb5\xd7\x43\x27\x9f\xaa\xe9\xcf\x6c\xcc\xaf\x8c\x4f\x81\x0a\x67\x41\xe2\xe0\x1d\xf8\x5c\x4c\x16\x06\x9f\x23\x3b\x74\x6c\x45\x19\x0d\xca\x2a\xeb\x65\xfe\x8a\xee\x3f\x68\x3e\x9f\x7c\x5e\x8a\x55\x7b\xdd\xcb\x50\x6f\x6a\x69\xf8\xb6\xa2\x5e\xf0\xb7\x05\x49\xed\xa4\x97\x53\xb8\xa4\x8b\x24\x4b\x9e\x94\x2d\xc1\x38\xe7\x55\x32\x96\xa2\xd7\x14\x82\x31\x1e\x4a\xe1\x80\x25\xaa\xd9\xb8\x77\x4a\x9f\x44\x7c\x23\x7d\x8d\x9b\xeb\xa1\xc1\xae\x9b\xdf\xd7\x3e\xee\xe0\x88\x97\xc0\xfb\xa9\x4e\x83\x75\x01\x59\x43\x66\x03\x42\x3a\xf8\x14\x18\x54\x96\x0c\x80\x90\xf8\x02\xb5\xeb\x4e\xd6\x7f\x76\xb2\x9b\xdf\x90\x9d\xb1\x3a\xda\x89\x8e\x39\x29\xcf\x45\x5b\xa3\x3c\x79\x5f\x02\x88\x76\xc4\x14\x20\x85\x98\x35\x0a\x98\x02\xe9\x02\x04\x53\x0b\xd0\xae\xca\x76\xac\x0e\x0f\xb3\x21\xce\x1b\x1e\x9d\xfe\x80\x42\x8a\x60\xbd\x88\x49\xc2\x81\x4c\x0a\x36\x38\x22\x04\x72\x39\x07\xa7\xa7\x4e\x2a\x5f\xe2\xf4\x67\x35\x95\xd8\xae\x6f\xc7\x96\x76\xa5\xaa\xdb\x05\x1c\x47\x86\xa7\x20\x82\x0e\x98\x8c\x64\x6d\x72\x4c\xd9\xb8\xec\x92\x05\x1b\xac\xa4\x62\xd9\x67\x5b\x8c\x0a\x26\xf2\xfc\x16\xb0\x6e\x9f\xcc\xb5\x7f\xf2\x03\xa3\x1d\xf4\x2d\xa1\xdb\x60\xb3\x7a\x3a\xdf\x03\xeb\x53\x84\x3a\x38\x1b\x92\x15\x4d\xde\x21\x48\x4a\x98\x4d\xc8\x90\x4a\xd2\x4e\x29\x4e\x0c\x19\x8a\x2b\xf0\x7d\x09\xf9\x7a\x25\xcd\xf5\xaa\xad\xb2\x0c\xdc\xd7\xdd\xd8\xce\x4f\xfb\x2f\x06\x7d\x4a\xf4\x33\xe2\x30\xde\x76\x32\xbf\x55\x7d\x11\xea\x83\xc4\xe7\x32\x56\x63\xbd\x95\x61\xc4\x6d\xf7\x0a\x68\x8f\xc4\x2e\xe6\x5e\x58\xd2\xcf\x58\xdd\x23\x7a\x6f\x31\x38\xed\xa2\x72\x10\xc8\x58\x13\x91\x18\xa7\xa9\xd3\x06\x0b\x81\x32\x24\x71\x9e\xcf\x23\x2e\x21\xd8\xcf\x64\xd5\x76\x77\xb3\x40\xff\x09\x9b\xa3\x09\x3a\xfb\x22\x45\x05\x4a\xa0\x19\xa2\x26\xed\x10\x43\x89\x9a\xd1\x23\x05\x56\x16\x6d\x10\x25\x17\x50\xff\x2b\x76\x93\x9c\x5f\xf6\xbb\x72\xb6\xfe\x33\x56\xf7\x04\x8c\x48\xa0\xb4\xf3\xa4\xbc\x8d\xc1\xdb\x40\x84\x64\xad\xb1\xda\x14\x97\xb4\xd1\xc6\x8a\x86\x78\x09\x82\xdd\xd4\xbe\x0e\xbc\xde\xd6\x79\xac\x26\xb1\x7d\xbb\x1b\x17\x34\xc3\x8f\x3b\x38\x6a\xff\x35\x41\x32\x89\x18\xc4\x83\x72\x84\xc2\xca\x47\xd4\xde\xb1\x02\x46\xa7\x8a\xc4\x82\x72\xbe\x1f\x9e\xcf\xb5\xa9\x57\xeb\x71\x18\xa5\xbb\x7f\x76\x3d\xf6\xc8\xd2\x5f\xaf\xe6\xd7\xb9\x99\x5e\xee\x09\x15\x69\xa5\x52\xd6\x09\x94\xb2\xce\x46\xe1\x80\x41\xbb\x92\x90\x33\x1b\x52\x3e\x11\x8a\x8a\xe7\xeb\xfa\x7c\xc2\xb6\x93\x66\xd2\x52\x37\xab\x2f\xa7\x73\xab\xf6\xba\xa5\x41\xfa\x8f\x0b\x16\x70\xb6\x9f\x7b\x4a\xf4\xa6\x18\xeb\x8c\x73\x60\x5c\xc8\x9e\x98\x4d\xb4\x12\x3c\x53\xe6\x82\xbe\xc4\x1c\x38\xd8\x4b\xf4\xf9\x47\xea\x2a\xc2\xa1\xe6\xe5\x8b\x38\xc7\xc5\x51\x7a\x27\x6b\xb0\x18\x15\xb5\x06\xd4\x8e\x34\x19\xab\xb3\xf3\x3a\x17\x2b\x59\x39\x8c\x46\x8a\xd0\x85\x57\xf0\xc1\x2a\x3c\x91\xed\x9c\x8b\x23\x36\x1b\x34\x01\xe7\xa0\x48\x22\xb0\x63\x8b\xb1\x20\x24\xa7\xc9\xb2\xb6\x46\x9c\x52\x21\xe0\x25\xf2\xca\x24\xe6\xf7\xba\xfb\xad\x6e\xaa\xc3\xc3\xf5\xf4\x9d\xba\x57\xb8\x88\x70\x9e\xa3\xa3\x29\xce\x0b\x28\x52\x2a\x6a\x85\x8e\xad\x43\x8d\x31\x27\x8c\x29\x83\x2a\x40\x4a\x2b\x52\x94\x5d\xbe\x00\x67\x57\x4b\xdf\x0b\x57\x9b\xdf\xdd\x6c\xa4\x93\x36\x47\x39\x24\xb1\x89\x60\x21\x17\x4d\x19\xbc\xa4\xa4\xc5\xb0\xb1\x21\x62\x74\x00\xc1\x61\xd6\x85\xe5\x12\x27\xc0\x77\x4a\x6e\x6e\xfe\x82\xc3\xfa\xf3\x83\x35\x8b\x49\x0e\x86\x27\x53\x85\x52\x2a\x90\xb6\x1c\x8d\x29\xb1\x68\x63\x43\x62\xa5\xd0\x66\xcb\x06\x25\x21\x00\xa0\xe2\x30\xbb\x5b\xfa\xa2\x71\x01\xe5\x6f\xab\x4a\xfa\x7e\xc9\x8f\x15\xa7\x4c\xee\xa1\x8a\xf6\x0c\x51\x65\xf1\x14\x43\x41\x56\xe4\x01\x89\xac\xc9\xc1\xb0\x8e\xcc\x91\x24\x9b\x70\x89\xe9\xba\xe7\xbe\xfd\xb4\x91\xdb\x29\x25\x6f\x65\xec\x6b\x9e\x0f\xf1\x4d\xdb\xa3\xac\x50\xac\x2a\x02\x0a\x1c\x7a\x6d\x59\x1c\x47\xa5\x08\xd0\x3b\xe7\x13\x11\x29\x86\x00\x10\x9e\x9e\xcd\xf7\xed\xe6\xfb\xb6\x5f\x55\x37\x15\xf7\xb7\xdd\xd8\x56\xc3\xb0\xae\x46\xe9\xb7\x75\x83\x8f\x9d\x1c\xb7\xef\x57\x6d\xbb\xda\xc8\xd0\xee\x7a\x96\x3d\xd8\xc1\xc9\xc9\xb9\x1a\x0d\xd8\x62\xb2\x23\xed\x28\x49\xc8\xb6\x28\x6f\x41\x6c\xb2\x25\x64\x95\xad\x2a\x2c\xb6\x9c\xdf\xf9\x7f\x3a\x60\x3c\x16\xba\x04\xb4\x91\xb1\x9a\xca\xa9\xdc\x3c\xd6\x18\x9e\x00\x6c\xe4\x64\x5f\x88\xd6\x46\x05\x9a\x94\x37\x1e\x4b\xf0\x59\xc0\xe5\x62\x84\xa2\x40\xa2\x0c\x10\x4c\x66\x12\x33\x9b\xee\x4e\xe0\x52\xb0\x49\xfb\x63\x59\xe2\x05\xb1\x0e\xf2\x96\x42\xd5\xb9\x79\xec\x06\xac\x17\x64\xda\xab\x5b\x8c\xd4\x8c\xd2\x37\xb8\x39\x0c\x97\xd2\xd7\x8f\x0e\xfe\x2f\x49\x78\x42\xec\x52\xe0\x8d\xdc\xec\x57\x7f\x23\x8f\x8d\x93\x2f\x08\x7a\x2c\x72\x29\xe0\xbe\x77\xfd\x71\xd1\x0e\xf2\x96\x40\x0d\xb7\x43\xb5\x6b\xea\x27\x2c\xd7\x70\x7b\xba\x9c\x89\x31\x00\x6c\x23\x33\x68\xf4\x0a\x8a\xa6\xa9\xed\x80\x14\x4d\x36\x91\x44\xb1\x40\xc2\xf9\x1d\xc7\x5e\xdd\x52\xa4\x4f\x75\x93\xdb\x4f\x4f\xd8\x6d\xdf\x8b\xea\x4e\xe0\x12\xb0\xa9\x56\x54\x83\xf0\xae\x97\x8a\xea\x5c\xf7\xbb\x47\x6f\x86\x39\x41\xf8\xb0\x24\x1e\xfd\xdc\x9b\x4a\xf0\xa1\x60\xb1\xc5\xc6\x12\x40\xe5\xa2\xd1\x1a\xaf\x3d\xb9\x08\x4e\x7b\xd1\x18\x62\x98\x7f\xb0\xf6\xb5\xd2\xc5\xa8\x63\x8f\xcd\x50\xda\x7e\xfb\x03\x43\xde\x6b\x5c\x8c\xb7\x6b\x6a\x6e\xf3\x21\x40\x3f\x30\xe1\x03\x99\x4f\x86\x6c\x7e\xec\x65\x7c\x20\xf3\x51\xc8\x49\xe5\xfb\x23\xd6\x95\x34\xfb\x23\xeb\xea\xf0\x2f\xec\xea\xa1\xc2\xae\xae\xb0\x69\xda\x11\x97\xdd\x9b\x72\x70\x31\xcd\x0c\x77\x5e\x4f\xe6\x23\xcd\xb1\x80\x78\x17\x33\x86\x4c\x29\x06\x13\x14\x8b\x03\xc1\xe8\xa7\xb4\xe4\x41\x39\x86\xf3\x43\xea\xd7\x01\xf8\x86\xf2\x8b\x84\xa3\xef\xb8\x1a\x46\x1c\x17\xdc\x9f\xfe\xf2\x91\x38\x12\xbd\x3c\x08\x7d\xc7\xf3\x51\xa7\x4f\x9a\xfe\x9c\x39\x39\xca\x62\x8c\x02\x84\x90\xb2\x4b\x92\x20\x2a\xef\x02\x27\x8c\x5a\xe9\x04\x25\xba\xa0\x6d\x54\xe5\xc9\x27\x47\x87\x2d\xb7\xea\xb1\x5b\x1f\xaa\xe0\xfd\xeb\x0a\xbb\x2e\x3f\x38\x5d\x78\x84\xe5\x9b\xb6\x47\x43\x3c\xa0\xb3\x36\xb0\x32\xde\x19\x21\x2a\xa8\x34\xdb\x08\x0e\x28\x47\xed\x4d\x21\x55\x82\x87\x47\xc6\xde\x77\x6f\xdf\xfc\xfb\xdd\xdb\x3f\xde\xbd\xfd\x5f\x00\x00\x00\xff\xff\xc4\x2d\x28\x7d\xde\x32\x00\x00")

func assetsDefault_manifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefault_manifest,
		"assets/default_manifest",
	)
}

func assetsDefault_manifest() (*asset, error) {
	bytes, err := assetsDefault_manifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/default_manifest", size: 13022, mode: os.FileMode(438), modTime: time.Unix(1515582337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\xa5\x40\xbb\x15\x41\x70\x96\x4e\x12\x53\x89\x54\x49\x3a\x86\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xc3\x01\xe2\xc9\xb8\xff\x3b\x7d\x77\x47\xf2\xed\xfa\x8a\x10\x42\x82\x5b\x15\xa6\x98\x43\xb0\x22\x41\xaa\x75\xb1\xa2\xf4\x45\x09\x7e\x5f\x53\x1f\x84\x4c\x68\x24\x21\xd6\xf7\x9f\x3e\xd3\x9a\x76\x13\xdc\x35\xaa\x7a\x57\x60\xa9\x27\xd6\x2f\x18\xea\x8e\x2c\xf1\xcf\x86\x49\x8c\x82\x15\xf9\x55\x93\x2a\x72\x0e\x2a\xcd\x18\x4f\x9e\x1b\x87\x77\x3d\x5e\x02\x1a\xb7\xb0\x0b\x6a\xd2\x53\x6b\xa9\x90\xa2\x40\xa9\x19\xaa\x60\x45\xde\x3c\xb6\x0c\xae\x11\x9b\xd2\x92\xf1\x24\x38\x70\xf7\x36\xbf\x6e\x7d\x33\xb7\x8e\x6d\xcf\xb1\x63\x73\xc8\x71\xa8\x53\x31\x5e\x51\x2a\x26\xb8\x95\x17\x0a\x1e\xb3\x64\x23\x41\x33\xc1\x95\x55\x44\x4b\x96\x24\x28\xed\x4c\x7c\x45\xae\x9f\x53\xe0\x51\xe6\x17\xc9\x18\xff\xad\x02\x93\xfd\x34\xcc\xd0\x55\x7b\x33\x47\x2b\x8b\x78\x3f\x40\xfb\xdb\xfb\xea\x33\xb7\xdd\x88\xa9\x22\x83\xdd\xf3\x22\x41\xb7\xc6\x59\x0e\xc9\x02\xd6\x51\x85\x92\x15\x7a\x89\xb2\x0c\x20\xe7\x36\xcf\x34\xe6\x1e\x7e\x25\x73\x2b\x31\x2e\x43\xb8\xa1\x11\xc6\x8c\xb3\xca\x26\x35\x5c\x58\xe2\x72\xc5\x66\x64\x05\x52\x76\xd3\x61\x34\xa9\x41\x1f\x2c\x91\x94\xe1\xe2\x8c\x49\xd5\x9d\xbb\x5c\x46\xa5\xfd\xb3\xa4\xd3\x0d\xb2\x25\x72\x69\x8c\xcf\x9e\x88\x49\x1a\xda\x09\x20\x8a\xaa\x00\x20\xfb\xde\x9f\x9d\x31\x64\x0a\x7b\xfb\xa7\xfe\xdb\x6a\x07\xbd\xc0\x07\x4b\xce\xec\x9c\xb3\xad\xa8\xca\xac\x8d\xa1\x50\x6b\xc6\x93\x0b\xdd\x1c\x8d\xd6\xfb\x99\xbd\x5d\x39\xc7\x0d\xdb\xbf\x70\x27\xe6\x00\x9e\xaf\x71\x46\x43\x26\xff\x02\xde\x42\xfa\xdf\x1e\xe8\x9f\xc1\xda\x6e\xfd\x00\x38\xb1\xd5\x67\xa8\xf5\x01\xf0\xf7\x06\x70\xf3\xb0\xb0\x08\xcc\x47\x00\x2b\x38\x3e\xc6\x76\x7d\xd7\x97\xf1\x7b\xed\x89\xc5\x28\x91\x87\xc3\x10\xba\x50\xa6\x61\xe5\xc4\x28\x0e\x3b\xf4\x88\x30\x2e\xb2\xc9\x97\xec\xc7\x02\x24\xf8\x4e\x54\x97\xd8\x8d\xb6\x3c\x0e\x98\x9b\xbf\xfa\x1d\x8e\x4e\xae\xd2\x54\xe8\x82\x06\x97\x8d\x4a\x80\x45\x5e\x76\x79\x00\x76\x60\xde\x15\xd9\x18\xb2\xcd\xd8\xbc\x22\xc4\x52\x10\xb7\xb4\xeb\xe4\x4d\x9a\x3c\xa7\xbb\xf2\xe2\x68\xd4\x55\x7d\x69\x38\xd2\x97\xc7\x20\x69\xb0\x03\x9b\x4c\xb7\xef\x68\x6a\x45\x69\xc2\x74\xba\x59\x3f\x84\x22\xa7\x3f\xbf\x7d\xf9\xfa\xf8\x43\xc4\x7a\x0b\x12\x69\x9c\x89\x44\xdc\x87\x82\x6b\xc9\xd6\x74\x9d\x89\x35\xcd\x41\x69\x94\x14\xc2\x12\x7d\xa5\xc0\xb6\x77\xa5\x69\x5e\xde\x1e\x5e\x94\x73\xc2\x11\x7b\x03\xf9\x6a\x31\x71\x97\x39\xac\xcf\xb7\x19\xab\x4b\xe7\xdc\x6b\xd1\xfb\x52\x16\x31\x55\x80\x0e\x53\x3c\xfd\xa8\x37\xe1\x22\x6b\xde\x2b\x5d\x1f\x63\xca\x75\x77\xd6\x31\xda\x2b\xc2\x39\x63\xf7\x8f\x4d\x32\x7d\x74\x56\xa2\xfe\x27\x18\xe2\x19\x83\xe4\x98\x51\x58\x09\xb3\x09\x53\x83\x1c\x35\xa5\xc8\xc8\xa4\x22\xfd\x14\x97\xf0\x7d\xfc\x2c\x59\x6c\x2e\xd4\x7f\xf7\xd7\x57\xfb\xeb\xab\xbf\x01\x00\x00\xff\xff\x0e\xdd\x1a\x2c\x9c\x18\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6300, mode: os.FileMode(438), modTime: time.Unix(1513272851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/default_manifest": assetsDefault_manifest,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"default_manifest": &bintree{assetsDefault_manifest, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/default_manifest
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1513272851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefault_manifest = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9a\x4d\x73\xdb\xc8\xd1\xc7\xcf\x76\x95\xbf\xc3\x96\xce\x2b\x63\x5e\x7a\xde\x7c\x7c\x9e\x4b\x72\x49\x52\xb5\xb9\xa5\x72\xe8\xee\xe9\xa1\xb0\x4b\x02\x08\x00\xda\xd2\xa6\xf6\xbb\xa7\x40\x5a\x16\xa5\x90\x26\x20\x31\x96\x7d\x11\x09\x88\xdd\xfc\xff\x7a\x30\xd3\xdd\xc3\xf9\xf7\xbb\xb7\x6f\xae\x3e\x4a\x3f\xd4\x6d\x73\xf5\xe1\x27\xf5\xf3\x74\x9d\xa5\x93\x26\x4b\xc3\xb5\x0c\x57\x1f\x7e\xfa\xc7\xbb\xb7\x6f\xde\x4c\x1f\x7c\xf3\xe6\xaa\xde\x74\x6d\x3f\x76\x38\xde\x5c\x7d\xf8\xe9\x6a\x55\x8f\x37\x5b\x7a\xcf\xed\xa6\xfa\x4b\x9b\xe5\x6f\x7d\xbd\x91\xea\xd7\xa1\x6d\x76\x1f\xf8\x79\x6f\xd2\x4b\xd7\x0e\xf5\xd8\xf6\x77\x93\xc9\xcd\x38\x76\xc3\x87\xaa\x9a\x69\xfa\xb1\xfe\xac\xec\x2a\x02\x28\x9b\x25\x3b\x00\x6b\x22\xa7\x44\x62\x21\x98\x60\x82\xf7\x41\x87\x24\x52\x8c\xc5\xa4\xef\x6d\xa9\xc7\x86\x77\x2a\x37\x38\x8c\xd2\x5f\x4d\xb7\xff\xf8\x79\x0e\xcb\x2f\x37\x6d\x57\x97\xbb\x6a\xc0\x1e\x37\x38\x9b\xe3\x94\xd9\x03\x43\xd1\xc9\x5b\xab\x8c\xd5\x12\x7d\xe0\xa8\x82\x0d\x10\x83\x64\x06\xb6\x4e\x1b\xd2\x60\xb5\x33\xe9\x12\x0c\x75\xbf\xed\x06\x69\xaa\x75\xbb\xea\xb7\xc3\x7c\x88\x53\x76\x0f\x14\xd9\x47\x63\xb4\x8d\x10\x25\xfb\xc8\x0a\x8d\x57\x8c\x36\x64\x9f\xb3\x43\x96\x08\xc6\x16\x47\x78\x01\x8a\xbf\xff\xf9\xff\xfe\xff\xaf\xbf\xb4\x65\xfc\x84\xbd\x54\x65\xdd\xae\xda\x6b\x5e\xd7\x95\x34\x1f\x67\x13\x9d\xf0\x71\x8c\x8c\x6c\xf4\x16\xad\x8a\x29\xc6\x68\x02\x1a\x1d\xb5\x57\xd1\x6b\xb6\xc5\x48\x0e\x81\x22\x3a\xd2\x72\x92\xec\xf3\xfd\x7b\x92\x9d\xce\x97\xd3\x6e\xc7\x7a\xfd\x43\xe0\xee\x84\xbe\x90\xb7\x6d\xc6\xbe\xa6\x0a\x79\xac\xdb\x66\xba\xf9\xe9\x65\xe8\x7b\x7f\x47\x67\xa3\xcd\x10\xb2\xe2\x90\x1c\x64\x61\xed\x5c\x66\xa5\x24\xb2\xb7\x10\x4b\x4c\x05\xd1\x29\x85\xa7\x67\xe3\x53\xfc\x43\xcd\x97\x8b\xc2\xc7\x7a\xbc\x9b\x66\xe3\x0f\x15\x86\x2f\xa2\x2f\x1c\x87\x5e\xba\xf5\xdd\x8f\x17\x89\xbd\xec\x8b\xc7\x62\x18\x7f\xc4\x50\x0c\xe3\x85\x22\xb1\x69\xb3\xac\xab\xa1\xde\x74\x6b\xf9\x61\x02\xf1\x48\xf4\x65\xe2\x30\xf6\xf5\x6a\x25\xfd\x2e\xb4\x15\xb7\xfd\xfc\x6c\xff\xda\xc1\xf8\x6f\xe5\x2f\x8b\xc8\xfa\x50\xf7\x33\xd8\xd7\xc7\xb9\x0d\xe9\x12\x58\x08\x48\x98\x0d\x5a\xca\x62\x8b\x38\x49\x41\x80\x3d\xa2\xb5\x64\x58\x2b\xba\x78\xc5\xb3\xc1\xe1\x66\x5d\x37\xab\x4a\x6e\xc7\xbd\xc4\x87\x89\xd4\xd5\xcd\x73\x73\xc2\xbd\xdb\x63\xac\x56\x19\xd0\xa9\x90\x2f\x5c\x52\xf2\x54\x10\x90\x0c\xb1\x83\xac\x74\x21\x93\xd0\x30\x68\x53\xe6\xd7\x40\x27\xa4\x5f\x30\x26\xf7\x8f\xd1\xaa\xed\xeb\xf5\x1a\x37\xdb\xdb\xcf\x77\xfe\x07\xf1\x11\xcf\xec\x62\x02\xd2\xaa\x84\x64\x4a\xce\x02\x51\xfb\xec\x15\xa8\x94\x0d\x80\x98\x64\x6c\x76\xcf\x88\xcf\x69\x8c\x17\xc7\x6a\x5d\x53\xc5\x6d\x93\xeb\xa9\x42\x79\xee\xfa\xf0\x4d\xc3\xf2\x44\xf1\x45\x22\xf0\x82\x42\xfa\x9b\x4e\x99\x2f\x5a\xe7\x53\x63\x87\x7c\x23\xd5\x78\xd3\xd7\x65\xdc\x39\x98\x1e\xa8\xdd\xd5\x6c\xe2\x47\x3e\x8e\x81\x2a\x8c\x20\x28\x3a\x93\x89\x48\xe4\xc4\x8a\x04\xab\x24\x16\x04\x85\xda\x01\x7b\xd1\x2a\x85\x45\xa0\x0f\x3a\xe7\xd3\x66\xfc\x28\xbc\xba\xa9\x56\xed\xf5\xd0\xc9\xa7\x6a\xfa\x33\x1b\xf3\x89\xf1\xd1\xa7\x99\xb3\x20\xb1\x77\x90\x5c\x2e\x26\x0b\x27\x97\x03\x03\x02\x5b\x51\x46\x27\x65\x95\x75\x32\xff\x69\xde\x7d\xd1\x7c\x3e\xf9\x3c\x14\xab\xf6\xba\x97\xa1\x5e\xd7\xd2\xf0\x5d\x45\xbd\xe0\x6f\x0b\x16\xb5\xa3\x5e\x8e\xe2\x96\x84\x88\x41\x30\xd2\x34\x55\x23\x98\x84\x45\x63\x08\x5c\x40\x93\x21\x4b\x16\x28\x67\x3f\x1b\xf7\x5e\xe9\xb3\x88\x6f\xa5\xaf\x71\x7d\x3d\x34\xd8\x75\xf3\x6b\xfd\xf3\x0e\x0e\x1a\x5f\x4a\xce\x89\xd2\x94\x2c\x78\x64\x9d\x32\x9b\x24\xa4\xbd\x8b\x9e\x93\xca\x92\x53\xc2\x14\xf9\x02\xf9\xfc\x5e\xd6\xbf\xb6\xb2\x9d\x5f\xa4\x9e\xb0\x7a\x20\x00\x60\x8e\xca\x71\xd1\xd6\x28\x47\xce\x15\x9f\x44\x03\x31\xf9\x14\x7d\xc8\x1a\x25\x99\x92\xe2\x05\x08\xa6\xb2\xa8\x5d\x95\xcd\x58\xed\x5f\x66\x43\x9c\x36\x3c\x58\x3a\x93\x42\x0a\xc9\x3a\x11\x13\x85\x3d\x99\xe8\xad\x07\x22\x4c\x04\x39\x7b\xd0\x8a\xe9\x6b\x69\x63\x09\xc7\xaa\xad\xba\xbe\x1d\x5b\xda\x96\xaa\x6e\x17\x70\x1c\x18\x1e\xdd\x10\x83\x1c\xc9\xa5\x82\x51\xa2\x36\x26\xe7\x98\x7d\xb2\xca\x30\x4b\x2a\x64\x42\x22\xf6\xca\xfa\xd3\x83\xf1\x74\xfa\xd4\xed\xb3\xb9\x76\x6f\xbe\x63\xb4\xbd\xbe\x25\x74\x6b\x6c\x56\xcf\xe7\x7b\x64\x7d\x8c\x50\x8b\x4b\x14\x02\x39\x43\x25\x0a\x10\x40\x42\x17\xc4\x97\x90\x8a\xd1\xc6\xf8\xec\x82\x8e\x30\x7f\xa9\xbf\x08\x21\x5f\xaf\xa4\xb9\x5e\xb5\x55\x96\x81\xfb\xba\x1b\xdb\xf9\xcb\xfe\xab\x41\x1f\x13\xfd\x82\x38\x8c\x77\x9d\xcc\x2f\x55\x5f\x85\x7a\x2f\xf1\xa5\x8c\xd5\x58\x6f\x64\x18\x71\xd3\xfd\x00\xb4\x07\x62\x17\x73\x2f\x4c\xe9\x27\xac\x1e\x10\x9d\xb3\xe8\x41\x43\x50\x90\x3c\x19\x6b\x02\x12\xe3\xd4\x89\x5b\x6f\x93\xa7\x9c\xa2\x80\xe3\x4b\xfc\x9e\xf2\xb9\x27\xab\x36\xdb\xdb\x05\xfa\x8f\xd8\x1c\xa8\x47\x72\xc6\x15\x28\xa4\x7d\x88\xa2\x53\x40\x71\x09\x94\x96\xa4\x9c\x2a\xa8\xc8\x33\xb9\x92\x2f\xa0\xfe\x57\xec\x26\x39\xbf\xec\x66\xe5\x6c\xfd\x27\xac\x1e\x08\x18\x91\x92\xd2\xe0\x48\x39\x1b\xbc\xb3\x9e\x08\xc9\x5a\x63\xb5\x29\x10\xb5\xd1\xc6\x4e\x5c\x97\x20\xd8\x4e\xe5\xeb\xc0\x37\x9b\x3a\x8f\xd5\x24\xb6\x6f\xb7\xe3\x82\x62\xf8\xbc\x83\x83\x7a\x58\x53\x8a\x26\x12\x27\x71\x49\x01\xa1\xb0\x72\x61\xd7\xe0\xa8\xc4\x08\xaa\x48\x28\x28\xea\x02\x5c\xeb\x7a\x75\x33\x0e\xa3\x74\x0f\xef\xae\xc7\x1e\x59\xfa\xeb\xd5\xfc\x3c\x37\xd3\xcb\xc1\xc8\xa5\xcc\x24\x2e\xa0\x88\x65\xe2\xa2\x44\xc5\xe4\x7d\x84\x60\x7d\xf2\x4a\x8b\xf6\x09\xb3\xbd\x04\x61\xdb\x49\x33\x69\xa9\x9b\xd5\x97\x1d\xcb\x55\x7b\xdd\xd2\x20\xfd\xc7\x05\x03\x38\xdb\xcf\x03\x25\x3a\x53\x8c\x05\x03\x90\x0c\xf8\xec\x88\xd9\x04\x2b\xde\x31\x65\x2e\xe8\x4a\xc8\x9e\xbd\xbd\x44\x9d\x7f\xa0\xae\x22\x1c\x6a\x5e\x3e\x88\x73\x5c\x3c\xb0\x05\x12\x20\x62\xd1\xd1\x64\x6b\xc5\x29\x01\x47\x31\xe7\x94\xb4\xd2\xc0\x09\x03\x16\xc4\x0c\x17\x66\x3b\x1c\x85\x67\xb2\x9d\x72\x71\x90\xba\xac\xd7\x94\x38\x7b\x45\x12\x12\x03\x5b\x0c\x05\x53\x04\x4d\x96\xb5\x35\x02\x4a\x79\x8f\x97\x58\x57\x26\x31\xbf\xd7\xdd\x6f\x75\x53\xed\x5f\xae\xa7\x67\xea\x41\xe1\x22\xc2\x79\x8e\x0e\xba\x1f\x23\x16\x5c\x26\x4b\x8a\xd0\x60\x56\xa5\x90\x2b\xca\x32\x01\x44\x71\x68\x53\x46\xa5\xd2\xe9\xbe\x7b\x3e\x67\x57\x4b\xdf\x0b\x57\xeb\xdf\x61\x36\xd2\x51\x9b\x83\x5d\xf1\xc2\x19\x81\x29\x28\x1d\x59\x94\x43\xe3\x92\x4b\xd9\x14\x51\x91\xa3\x15\x6b\x4d\x2a\xda\x5f\x22\xfb\xde\x2b\xb9\xbd\xfd\x13\x0e\x37\x9f\x5f\xac\x59\x4c\xb2\x37\x3c\xba\x54\x28\xa5\x3c\x69\xcb\xc1\x98\x12\x8a\x36\xd6\x47\x56\x0a\x6d\xb6\x6c\x50\x22\xa6\x94\x50\xf1\xfc\x2d\x90\x2f\x1a\x17\x50\xfe\xb6\xaa\xa4\xef\x97\xfc\x80\x73\xcc\xe4\x20\x8f\xc5\xa8\x4b\x76\x31\x87\x28\x0a\xb8\xf8\xac\xb2\x68\xa3\x43\x89\x41\x05\x8e\xcc\xc6\x40\xa2\x4b\xac\x7f\x3d\xf7\xed\xa7\xb5\xdc\x4d\x4b\xf2\x46\xc6\xbe\xe6\xf9\x10\x5f\xb5\x3d\xcc\xca\x51\x8b\x4a\x8e\x50\x12\xb8\x68\xac\xb7\x60\x41\x03\xb0\xd7\x98\xbc\xb3\x58\x8a\x17\xf7\xfc\x9c\xb5\x2b\x37\xdf\xb7\xfd\xaa\xba\xad\xb8\xbf\xeb\xc6\xb6\x1a\x86\x9b\x6a\x94\x7e\x53\x37\x78\x6e\xe7\xb8\x7d\xbf\x6a\xdb\xd5\x5a\x86\x76\xdb\xb3\xec\xc0\xf6\x4e\x8e\xee\xa4\x16\x66\x84\x08\x06\x63\x0e\x40\x25\x67\x36\x9c\x3c\xaa\x60\x29\x1b\x84\x6c\x30\xa0\x91\xf9\x7d\xf5\x23\xa1\x4b\x40\x1b\x19\xab\x29\x9d\xca\xed\xb9\xc2\xf0\x08\x60\x23\x47\xeb\xc2\x1c\xbd\xe7\xc2\x36\x26\x16\x4e\xd1\x65\x5f\x32\x9a\xe8\x52\xb2\x1e\x5d\x70\xe8\x1c\x5a\xa4\xf9\x93\xe9\x5e\xe0\x52\xb0\x49\xfb\xb9\x55\xe2\x15\xb1\xf6\xf2\x96\x42\xd5\xb9\x39\x77\x28\xed\x15\x99\x76\xea\x16\x23\x35\xa3\xf4\x0d\xae\xf7\xcd\xa5\xf4\xf5\xd9\xc6\xff\x35\x09\x8f\x88\x5d\x0a\xbc\x96\xdb\xdd\xe8\xaf\xe5\x5c\x3b\xf9\x8a\xa0\x87\x22\x97\x02\xee\x6a\xd7\xef\x17\x6d\x2f\x6f\x09\xd4\x70\x37\x54\xdb\xa6\x7e\xc6\x70\x0d\x77\x47\xd3\x59\xb4\x51\x69\xd0\x51\x34\xb9\x54\x48\xc7\xa8\xc4\x7a\x6b\x52\x72\x51\x8b\x38\xb0\x58\xac\xe1\xd3\xc7\x28\x9f\x32\xed\xd4\x2d\x45\xfa\x54\x37\xb9\xfd\xf4\x8c\xd9\xf6\xad\xa8\xee\x05\x2e\x01\x9b\x72\x45\x35\x08\x6f\x7b\xa9\xa8\xce\x75\xbf\x3d\x7b\x40\xe8\x08\xe1\xe3\x94\x78\x58\x87\x24\x14\x0d\xc9\xa7\x08\xa4\xd9\x3b\x47\x51\x01\xa0\x77\xac\xec\x54\x32\x72\x0c\x31\x67\x3b\x3f\x77\x3f\x51\xba\x18\x75\xec\xb1\x19\x4a\xdb\x6f\xbe\x63\xc8\x07\x8d\x8b\xf1\xb6\x4d\xcd\x6d\xde\x07\xe8\x3b\x26\x7c\x24\xf3\xd9\x90\xcd\xf7\x3d\x8c\x8f\x64\x9e\x85\x9c\x54\xbe\x3f\x60\x5d\x49\xb3\xdb\xb2\xae\xf6\xff\xc2\xae\x1e\x2a\xec\xea\x0a\x9b\xa6\x1d\x71\xd9\xd9\x94\xbd\x8b\xa9\x67\xb8\xf7\x7a\xb4\xaf\x8b\x5a\xe9\x62\x34\x97\x14\xad\x84\x60\xb3\x62\xad\xad\x15\x62\x07\x06\x42\x32\x4a\x59\xa3\x4f\x6f\x93\x3c\x0d\xc0\x57\x94\x5f\x24\x1c\x7d\xc7\xd5\x30\xe2\xb8\xe0\xcc\xfe\xeb\x47\xe2\x40\xf4\xf2\x20\xf4\x1d\xcf\x47\x9d\xbe\x69\xfa\x73\x62\xe7\x28\x1a\xf0\x46\x2b\x9b\xb5\x2a\xc0\xe0\x0d\x88\x23\xa7\x50\x17\x2c\xc6\x02\x59\x30\xe4\xbd\x39\xfd\xbc\x9f\x91\xbf\x9f\x72\xab\x1e\xbb\x9b\x7d\x16\x7c\xb8\xae\xb0\xeb\xf2\xa3\xdd\x85\x33\x2c\x5f\xb5\x3d\x38\x74\x99\x10\xac\xf5\xac\x8c\x03\x23\x44\x05\x95\x66\x1b\x12\x24\xca\x41\x3b\x53\x48\x15\xef\xd2\x99\x26\xfe\xdd\xdb\x37\xff\x7c\xf7\xf6\x8f\xff\x04\x00\x00\xff\xff\x85\x56\xf1\xac\xf0\x33\x00\x00")

func assetsDefault_manifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefault_manifest,
		"assets/default_manifest",
	)
}

func assetsDefault_manifest() (*asset, error) {
	bytes, err := assetsDefault_manifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/default_manifest", size: 13296, mode: os.FileMode(438), modTime: time.Unix(1518076400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\x25\x40\xbb\x15\x41\x40\x4b\x27\x89\xa9\x44\xaa\xe4\x39\x81\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xd7\x01\xe2\xc9\xe0\xfd\x1f\xbf\xfb\x48\xea\xed\xf2\x82\x10\x42\x82\x6b\x1d\xa6\x90\xb3\x60\x45\x82\x14\xb1\x58\x51\xfa\xac\xa5\xb8\xad\x57\xef\xa4\x4a\x68\xa4\x58\x8c\xb7\x9f\x3e\xd3\x7a\xed\x2a\xb8\x69\x4c\x71\x5b\x40\x69\x27\xd7\xcf\x10\x62\xb7\xac\xe0\xf7\x86\x2b\x88\x82\x15\xf9\x59\x2f\x55\xcb\x39\xd3\x69\xc6\x45\xf2\xd4\x04\xbc\xe9\xc9\x12\x86\xf0\xca\xb6\x41\xbd\xf4\xd8\x7a\x2a\x94\x2c\x40\x21\x07\x1d\xac\xc8\x9b\xc7\x97\x21\x35\x72\xd3\xa8\xb8\x48\x82\xbd\x74\x67\x8b\xeb\xb6\x37\x6b\xeb\xc4\xf6\x1a\x3b\xb1\x60\x39\x0c\x6d\x2a\xc1\x0b\x28\xcd\xa5\xb0\xca\x42\x29\x62\x9e\x6c\x14\x43\x2e\x85\xb6\xaa\xa0\xe2\x49\x02\xca\x2e\x84\x17\x10\xf8\x94\x32\x11\x65\x7e\x95\x8c\x8b\x5f\x3a\x30\xc5\x8f\xc3\x0a\x5d\xbd\x37\x6b\xb4\x8a\x88\x77\x03\xda\xdf\xce\xd7\x9f\xb9\xfd\x46\x5c\x17\x19\xdb\x3e\x2d\x92\x74\xeb\x9c\xe7\x2c\x59\xc0\x3b\xe8\x50\xf1\x02\x97\x68\xcb\x00\x72\x6e\xf7\x1c\x21\xf7\xc8\x2b\x9d\x6b\x05\x71\x99\xc2\x15\x8d\x20\xe6\x82\x57\x3e\xa9\x11\xc2\x92\x97\x2b\x37\xa3\x2a\xa6\x54\xc7\x0e\xa3\x45\x0d\xe6\x60\x89\xa2\x8c\x10\x27\x2c\xaa\x9e\xdc\xe5\x2a\x2a\xfd\x9f\xa4\x9c\x8e\xc8\x96\xa8\xa5\x71\x3e\x7b\x21\xe6\xd2\xd0\x4f\xc0\xa2\xa8\x4a\x80\x65\x0f\x7d\xee\x8c\x59\xa6\xa1\x77\xfe\xd4\x7f\x5b\xeb\xa0\x97\xf8\xe0\x90\x33\x27\xe7\x64\x47\x54\xe5\xd6\x26\xd0\x80\xc8\x45\x72\xa6\x27\x47\x63\xf5\x7e\xb8\xb7\x6b\xe7\xb8\x63\xfb\x0e\x77\x6a\x0e\xe0\xf9\x06\x67\x34\x65\xf2\x37\xe0\x2d\x4b\xff\x3a\x03\xfd\x3b\x58\x3b\xad\x1f\x00\x27\xb6\xfe\x0c\xad\x3e\x00\xfe\xde\x00\x6e\x5e\x16\x16\x81\xf9\x08\x60\xa5\x80\xfb\xd8\x6e\xef\xda\x19\x7f\xd4\x9e\x5a\x0c\x0a\x44\x38\x4c\xa1\x4b\x65\x1a\x56\x8e\xcc\x62\x7f\x86\x1e\x90\xc6\x59\x0e\xf9\x92\xf3\x58\x30\xc5\x7c\x37\xaa\x73\x9c\x46\x5b\x1d\x7b\xcc\xcd\xdf\xfd\x0e\x47\x47\x77\x69\x2a\x74\x19\x32\x97\x8f\x4a\x81\x47\x5e\x71\x79\x01\x76\x60\xde\x95\xd9\x18\xb2\xcd\xdc\xbc\x2a\xc4\xd2\x10\xb7\xb6\xeb\xe6\x4d\x9a\x3a\xa7\x87\xf2\xe2\x68\x34\x54\xfd\x68\x38\x30\x96\xc7\x21\x69\xb0\xc3\x36\x19\xb6\xdf\xd1\xf4\x8a\xd2\x84\x63\xba\x59\xdf\x85\x32\xa7\x3f\xbe\x7d\xf9\x7a\xff\x5d\xc6\xf8\xca\x14\xd0\x38\x93\x89\xbc\x0d\xa5\x40\xc5\xd7\x74\x9d\xc9\x35\xcd\x99\x46\x50\x94\x85\x25\xfa\x4a\x85\xd7\xde\x93\xa6\xf9\xf2\x76\xf7\xac\x9d\x0c\x47\xec\x03\xe4\xeb\xc5\xc4\xb3\xcc\xe1\x7d\xbe\x93\xb1\x7a\x74\xce\x7d\x2c\x7a\xbf\x94\x45\x5c\x17\x0c\xc3\x14\x8e\xbf\xea\x4d\x78\xc8\x9a\xef\x4a\xd7\x66\x4c\x79\xee\xce\x4a\xa3\xbd\x26\x9c\x32\x77\x3f\x6d\x92\xe9\xd4\x59\xa9\xfa\x3f\xc1\x10\x0f\x0d\x92\x43\xa8\xb0\x52\xe6\x13\x58\x83\x1c\xc4\x52\x64\x84\xa9\x48\xbf\xc4\xff\x11\x9b\x8b\x62\x83\x0f\x23\xf7\x06\x4b\xfc\x09\xbb\xdc\x59\x1c\x7e\x9d\xb0\x05\x9c\x54\x2f\x71\x93\xe4\x04\xb1\x8b\x5e\x17\xa3\xca\xfa\xef\xee\xf2\x62\x77\x79\xf1\x27\x00\x00\xff\xff\x36\x63\x4c\x69\xaf\x19\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6575, mode: os.FileMode(438), modTime: time.Unix(1517829111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/default_manifest": assetsDefault_manifest,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"default_manifest": &bintree{assetsDefault_manifest, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/default_manifest
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1513139893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefault_manifest = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9a\xcf\x73\xdb\x48\xae\xc7\xcf\x49\x55\xfe\x87\x29\x9f\xc7\x61\xff\xee\x46\x8e\xef\x5d\xde\xbb\xbc\xb7\x55\xb3\xb7\xad\x3d\x00\x68\xb4\xc4\x19\x89\xe4\x92\x54\x62\xcf\xd6\xfc\xef\x5b\x94\xe2\x58\xce\x48\x63\x52\x56\xc5\xc9\xc5\x92\x68\x01\xfa\x7e\xd0\x6a\x00\x0d\xf1\xdf\xef\xde\xbe\xb9\xf9\x28\xfd\x50\xb7\xcd\xcd\x87\x9f\xd4\xcf\xd3\xeb\x2c\x9d\x34\x59\x1a\xae\x65\xb8\xf9\xf0\xd3\x3f\xde\xbd\x7d\xf3\x66\x7a\xe3\x9b\x37\x37\xf5\xb6\x6b\xfb\xb1\xc3\x71\x7d\xf3\xe1\xa7\x9b\x55\x3d\xae\x77\xf4\x9e\xdb\x6d\xf5\x7f\x6d\x96\xbf\xf5\xf5\x56\xaa\x5f\x87\xb6\xd9\xbf\xe1\xe7\x83\x49\x2f\x5d\x3b\xd4\x63\xdb\xdf\x4f\x26\xeb\x71\xec\x86\x0f\x55\x35\xd3\xf4\x63\xfd\x59\xd9\x4d\x72\x4e\xd9\x2c\xd9\x3b\x67\x4d\x62\x00\x12\xeb\xa2\x89\x26\x86\x10\x75\x04\x91\x62\x2c\x82\x7e\xb0\xa5\x1e\x1b\xde\xab\xdc\xe2\x30\x4a\x7f\x33\x5d\xfe\xe3\xe7\x39\x2c\xbf\xac\xdb\xae\x2e\xf7\xd5\x80\x3d\x6e\x71\x36\xc7\x39\xb3\x47\x06\xeb\x54\x48\x36\x40\x29\xc1\x06\x4d\xda\x18\x50\xd9\xa4\xa0\x7d\x29\xd6\x61\x4c\xc5\x92\x80\xf7\xd7\x60\xa8\xfb\x5d\x37\x48\x53\x6d\xda\x55\xbf\x1b\xe6\x43\x9c\xb3\x3b\x5a\x09\x88\xce\xa0\x14\x74\x64\x54\xc8\x5c\x9c\x52\x11\x4c\xb1\x94\xad\x27\xef\x0c\x40\x12\xb2\x74\x05\x8a\xbf\xff\xef\x7f\xfd\xf7\xff\xff\xd2\x96\xf1\x13\xf6\x52\x95\x4d\xbb\x6a\x6f\x79\x53\x57\xd2\x7c\x9c\x4d\x74\xc6\xc7\x29\xb2\x98\xc9\x38\x51\x42\xda\x60\x40\xb0\x29\x15\xc7\x31\xb8\x0c\x09\x7c\x76\xca\x40\x0e\xce\xe8\x72\x96\xec\xf3\xf5\x07\x92\xbd\xce\x97\xd3\xee\xc6\x7a\xf3\x43\xe0\xee\x85\xbe\x90\xb7\x6d\xc6\xbe\xa6\x0a\x79\xac\xdb\x66\xba\xf8\xe9\x65\xe8\x07\x7f\xa7\xf0\x21\x06\x1d\x8a\xb3\xc6\x29\xe3\x80\x8a\x37\x9c\x0d\x69\xaf\x83\xc9\x94\x8c\xd2\xa4\xb3\x68\xe5\x66\xe3\x1f\x6b\xbe\x5e\x14\x3e\xd6\xe3\xfd\xb4\x1b\x7f\xa8\x30\x7c\x11\x7d\xe5\x38\xf4\xd2\x6d\xee\x7f\xbc\x48\x1c\x64\x5f\x3d\x16\xc3\xf8\x23\x86\x62\x18\xaf\x14\x89\x6d\x9b\x65\x53\x0d\xf5\xb6\xdb\xc8\x0f\x13\x88\x27\xa2\xaf\x13\x87\xb1\xaf\x57\x2b\xe9\xf7\xa1\xad\xb8\xed\xe7\x57\xfb\xd7\x0e\xc6\x9f\x95\xbf\x2c\x22\x9b\x63\xdd\x17\xb0\x6f\x4e\x73\xb3\x58\xb1\x0a\x48\x39\x1f\x4a\xd0\x64\xbd\x29\x2e\xb0\x0b\x81\x93\x71\xda\x92\x57\xd1\x89\x9c\x2f\x94\x97\x52\x6d\x71\x58\x6f\xea\x66\x55\xc9\xdd\x78\x90\xf8\x25\x64\xab\xb6\xaf\x37\x1b\xdc\xee\xee\x3e\x5f\xb9\x10\xfc\xe1\x23\x4e\x76\x7a\x9c\x49\x94\x25\x84\x04\x5a\x29\xf2\xd9\x2a\x03\x2e\x43\xb1\x29\x30\x06\xe3\xac\xc5\x48\xe7\xfb\xd5\x3f\xf5\x43\x33\x30\x5e\x1c\xab\x4d\x4d\x15\xb7\x4d\xae\xa7\x6a\x7c\xe9\x5e\xf8\xa6\x61\xf9\x4a\xf1\x55\x22\xf0\x82\xa6\xf1\x9b\xb3\x2f\xec\x1b\xb1\x43\x5e\x4b\x35\xae\xfb\xba\x8c\x7b\x07\xd3\x17\x6a\xff\x6a\x36\xf1\x13\x1f\xa7\x40\x5d\x89\x11\x29\x89\x81\x90\x83\x63\x1f\x25\x08\x6a\x0e\x62\x8b\x2a\xda\x1b\xe2\x98\x03\x5a\x5c\x04\xfa\xa8\x73\x3e\x6d\xc6\x8f\xc2\xab\x75\xb5\x6a\x6f\x87\x4e\x3e\x55\xd3\x9f\xd9\x98\x5f\x19\x9f\x02\x15\xce\x82\xc4\xc1\x3b\xf0\xb9\x98\x2c\x0c\x3e\x47\x76\xe8\xd8\x8a\x32\x1a\x94\x55\xd6\xcb\xfc\x15\xdd\x7f\xd0\x7c\x3e\xf9\xbc\x14\xab\xf6\xb6\x97\xa1\xde\xd4\xd2\xf0\x7d\x45\xbd\xe0\x6f\x0b\x92\xda\x49\x2f\xa7\x70\x49\x17\x49\x96\x3c\x29\x5b\x82\x71\xce\xab\x64\x2c\x45\xaf\x29\x04\x63\x3c\x94\xc2\x01\x4b\x54\xb3\x71\x1f\x94\x5e\x44\x7c\x27\x7d\x8d\x9b\xdb\xa1\xc1\xae\x9b\xdf\xd7\x3e\xef\xe0\x88\x97\xc0\x7b\x51\x9a\xc0\xba\x80\xac\x21\xb3\x01\x21\x1d\x7c\x0a\x0c\x2a\x4b\x06\x40\x48\x7c\x85\xda\xf5\x20\xeb\x5f\x3b\xd9\xcd\x6f\xc8\xce\x58\x1d\xed\x44\xc7\x9c\x94\xe7\xa2\xad\x51\x9e\xbc\x2f\x01\x44\x3b\x62\x0a\x90\x42\xcc\x1a\x05\x4c\x81\x74\x05\x82\xa9\x05\x68\x57\x65\x3b\x56\x87\x87\xd9\x10\xe7\x0d\x8f\xa6\x3f\xa0\x90\x22\x58\x2f\x62\x92\x70\x20\x93\x82\x0d\x8e\x08\x81\x5c\xce\xc1\x69\xc5\x64\xf3\x35\xa6\x3f\xab\xa9\xc4\x76\x7d\x3b\xb6\xb4\x2b\x55\xdd\x2e\xe0\x38\x32\x3c\x05\x11\x74\xc0\x64\x24\x6b\x93\x63\xca\xc6\x65\x97\x2c\xd8\x60\x25\x15\xcb\x3e\xdb\x62\x54\x30\x91\xe7\xcf\x0c\xea\xf6\x62\xae\xfd\x93\xef\x18\xed\xa0\x6f\x09\xdd\x06\x9b\xd5\xe5\x7c\x4f\xac\x4f\x11\xea\xe0\x6c\x48\x56\x34\x79\x87\x20\x29\x61\x36\x21\x43\x2a\x49\x3b\xa5\x38\x31\x64\x28\xae\xc0\xb7\x25\xe4\xdb\x95\x34\xb7\xab\xb6\xca\x32\x70\x5f\x77\x63\x3b\x3f\xed\xbf\x1a\xf4\x29\xd1\x2f\x88\xc3\x78\xdf\xc9\xfc\x56\xf5\x55\xa8\x0f\x12\x5f\xca\x58\x8d\xf5\x56\x86\x11\xb7\xdd\x0f\x40\x7b\x24\x76\x31\xf7\xc2\x92\x7e\xc6\xea\x11\xd1\x7b\x8b\xc1\x69\x17\x95\x83\x40\xc6\x9a\x88\xc4\xc8\x5a\x91\x0d\x16\x02\x65\x48\xe2\x3c\x9f\x47\x5c\x42\xb0\x3f\x93\x55\xdb\xdd\xdd\x02\xfd\x27\x6c\x1e\xd5\x9b\xec\x8b\x14\x15\x28\x81\x66\x88\x9a\xb4\x43\x0c\x25\x6a\x46\x8f\x14\x58\x59\xb4\x41\x94\x5c\x41\xfd\xaf\xd8\x4d\x72\x7e\xd9\xef\xca\xd9\xfa\xcf\x58\x1d\xcd\x00\x10\x09\x94\x76\x9e\x94\xb7\x31\x78\x1b\x88\x90\xac\x35\x56\x9b\xe2\x92\x36\xda\x58\xd1\x10\xaf\x41\xb0\x9b\xda\xd7\x81\xd7\xdb\x3a\x8f\xd5\x24\xb6\x6f\x77\xe3\x82\x66\xf8\x79\x07\x47\xed\xbf\x26\x48\x26\x11\x83\x78\x50\x8e\x50\x58\xf9\x88\xda\x3b\x56\xc0\xe8\x54\x91\x58\x50\xce\xf7\xc3\xf3\xb9\x36\xf5\x6a\x3d\x0e\xa3\x74\x8f\xcf\x6e\xc7\x1e\x59\xfa\xdb\xd5\xfc\x3a\x37\xd3\xcb\x23\xa1\x22\xad\x54\xca\x3a\x81\x52\xd6\xd9\x28\x1c\x30\x68\x57\x12\x72\x66\x43\xca\x27\x42\x51\xf1\x1a\xd3\x9b\xb6\x93\x66\xd2\x52\x37\xab\x2f\xd3\xb9\x55\x7b\xdb\xd2\x20\xfd\xc7\x05\x0b\x38\xdb\xcf\x23\x25\x7a\x53\x8c\x75\xc6\x39\x30\x2e\x64\x4f\xcc\x26\x5a\x09\x9e\x29\x73\x41\x5f\x62\x0e\x1c\xec\x35\xfa\xfc\x23\x75\x15\xe1\x50\xf3\xf2\x45\x9c\xe3\xe2\x28\xbd\x93\x35\x58\x8c\x8a\x5a\x03\x6a\x47\x9a\x8c\xd5\xd9\x79\x9d\x8b\x95\xac\x1c\x46\x23\x45\xe8\xca\x2b\xf8\x64\x15\x2e\x64\x3b\xe7\xe2\x88\xcd\x06\x4d\xc0\x39\x28\x92\x08\xec\xd8\x62\x2c\x08\xc9\x69\xb2\xac\xad\x11\xa7\x54\x08\x78\x8d\xbc\x32\x89\xf9\xbd\xee\x7e\xab\x9b\xea\xf0\x70\x3b\x7d\xa7\x1e\x15\x2e\x22\x9c\xe7\xe8\xe8\x14\xe7\x05\x14\x29\x15\xb5\x42\xc7\xd6\xa1\xc6\x98\x13\xc6\x94\x41\x15\x20\xa5\x15\x29\xca\x2e\x5f\x81\xb3\xab\xa5\xef\x85\xab\xcd\xef\x6e\x36\xd2\x49\x9b\xa3\x1c\x92\xd8\x44\xb0\x90\x8b\xa6\x0c\x5e\x52\xd2\x62\xd8\xd8\x10\x31\x3a\x80\xe0\x30\xeb\xc2\x72\x8d\xdf\xbc\x1f\x94\xdc\xdd\xfd\x0f\x0e\xeb\xcf\x0f\xd6\x2c\x26\x39\x18\x9e\x4c\x15\x4a\xa9\x40\xda\x72\x34\xa6\xc4\xa2\x8d\x0d\x89\x95\x42\x9b\x2d\x1b\x94\x84\x00\x80\x8a\xc3\xec\x6e\xe9\x8b\xc6\x05\x94\xbf\xad\x2a\xe9\xfb\x25\x3f\x56\x9c\x32\x79\x84\x2a\xda\x33\x44\x95\xc5\x53\x0c\x05\x59\x91\x07\x24\xb2\x26\x07\xc3\x3a\x32\x47\x92\x6c\xc2\x35\x4e\xd7\x3d\xf7\xed\xa7\x8d\xdc\x4f\x29\x79\x2b\x63\x5f\xf3\x7c\x88\xbf\xb4\x3d\xca\x0a\xc5\xaa\x22\xa0\xc0\xa1\xd7\x96\xc5\x71\x54\x8a\x00\xbd\x73\x3e\x11\x91\x62\x08\x00\xe1\xf2\x6c\xbe\x6f\x37\xdf\xb7\xfd\xaa\xba\xab\xb8\xbf\xef\xc6\xb6\x1a\x86\x75\x35\x4a\xbf\xad\x1b\x7c\x6e\x72\xdc\xbe\x5f\xb5\xed\x6a\x23\x43\xbb\xeb\x59\xf6\x60\x07\x27\x27\xcf\xd5\x68\xc0\x16\x93\x1d\x69\x47\x49\x42\xb6\x45\x79\x0b\x62\x93\x2d\x21\xab\x6c\x55\x61\xb1\xe5\xfc\xce\xff\xd3\x80\xf1\x58\xe8\x12\xd0\x46\xc6\x6a\x2a\xa7\x72\xf7\x5c\x63\x78\x02\xb0\x91\x93\x7d\x21\x5a\x1b\x15\x68\x52\xde\x78\x2c\xc1\x67\x01\x97\x8b\x11\x8a\x02\x89\x32\x40\x30\x99\x49\xcc\x6c\xba\x07\x81\x4b\xc1\x26\xed\xcf\x65\x89\x57\xc4\x3a\xc8\x5b\x0a\x55\xe7\xe6\xb9\x1b\xb0\x5e\x91\x69\xaf\x6e\x31\x52\x33\x4a\xdf\xe0\xe6\x70\xb8\x94\xbe\x7e\xf6\xe0\xff\x9a\x84\x27\xc4\x2e\x05\xde\xc8\xdd\x7e\xf5\x37\xf2\xdc\x71\xf2\x15\x41\x8f\x45\x2e\x05\xdc\xf7\xae\xdf\x2f\xda\x41\xde\x12\xa8\xe1\x7e\xa8\x76\x4d\x7d\xc1\x72\x0d\xf7\xa7\xcb\x99\x18\x03\xc0\x36\x32\x83\x46\xaf\xa0\x68\x9a\xda\x0e\x48\xd1\x64\x13\x49\x14\x0b\x24\x9c\xdf\x71\xec\xd5\x2d\x45\xfa\x54\x37\xb9\xfd\x74\xc1\x6e\xfb\x56\x54\x0f\x02\x97\x80\x4d\xb5\xa2\x1a\x84\x77\xbd\x54\x54\xe7\xba\xdf\x3d\x7b\x33\xcc\x09\xc2\xa7\x25\xf1\xe8\xe7\xde\x54\x82\x0f\x05\x8b\x2d\x36\x96\x00\x2a\x17\x8d\xd6\x78\xed\xc9\x45\x70\xda\x8b\xc6\x10\xc3\xfc\xc1\xda\xd7\x4a\x17\xa3\x8e\x3d\x36\x43\x69\xfb\xed\x77\x0c\xf9\xa8\x71\x31\xde\xae\xa9\xb9\xcd\x87\x00\x7d\xc7\x84\x4f\x64\x5e\x0c\xd9\x7c\xdf\xcb\xf8\x44\xe6\xb3\x90\x93\xca\xf7\x47\xac\x2b\x69\xf6\x23\xeb\xea\xf0\x2f\xec\xea\xa1\xc2\xae\xae\xb0\x69\xda\x11\x97\xdd\x9b\x72\x70\x31\x9d\x19\x1e\xbc\x9e\xcc\x47\x9a\x63\x01\xf1\x2e\x66\x0c\x99\x52\x0c\x26\x28\x16\x07\x82\xd1\x4f\x69\xc9\x83\x72\x0c\xe7\x0f\xa9\x5f\x07\xe0\x2f\x94\x5f\x25\x1c\x7d\xc7\xd5\x30\xe2\xb8\xe0\xfe\xf4\xd7\x8f\xc4\x91\xe8\xe5\x41\xe8\x3b\x9e\x8f\x3a\x7d\xd2\xf4\xe7\xcc\xe4\x28\x8b\x31\x0a\x10\x42\xca\x2e\x49\x82\xa8\xbc\x0b\x9c\x30\x6a\xa5\x13\x94\xe8\x82\xb6\x51\x95\x8b\x27\x47\x87\x2d\xb7\xea\xb1\x5b\x1f\xaa\xe0\xe3\xeb\x0a\xbb\x2e\x3f\x99\x2e\x3c\xc3\xf2\x97\xb6\x47\x87\x78\x40\x67\x6d\x60\x65\xbc\x33\x42\x54\x50\x69\xb6\x11\x1c\x50\x8e\xda\x9b\x42\xaa\x04\x0f\xcf\x1c\x7b\xdf\xbd\x7d\xf3\xcf\x77\x6f\xff\x78\xf7\xf6\x3f\x01\x00\x00\xff\xff\x39\x96\x06\x1a\xde\x32\x00\x00")

func assetsDefault_manifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefault_manifest,
		"assets/default_manifest",
	)
}

func assetsDefault_manifest() (*asset, error) {
	bytes, err := assetsDefault_manifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/default_manifest", size: 13022, mode: os.FileMode(438), modTime: time.Unix(1513156458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\xa5\x40\xbb\x15\x41\x70\x96\x4e\x12\x53\x89\x54\x49\x3a\x86\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xc3\x01\xe2\xc9\xb8\xff\x3b\x7d\x77\x47\xf2\xed\xfa\x8a\x10\x42\x82\x5b\x15\xa6\x98\x43\xb0\x22\x41\xaa\x75\xb1\xa2\xf4\x45\x09\x7e\x5f\x53\x1f\x84\x4c\x68\x24\x21\xd6\xf7\x9f\x3e\xd3\x9a\x76\x13\xdc\x35\xaa\x7a\x57\x60\xa9\x27\xd6\x2f\x18\xea\x8e\x2c\xf1\xcf\x86\x49\x8c\x82\x15\xf9\x55\x93\x2a\x72\x0e\x2a\xcd\x18\x4f\x9e\x1b\x87\x77\x3d\x5e\x02\x1a\xb7\xb0\x0b\x6a\xd2\x53\x6b\xa9\x90\xa2\x40\xa9\x19\xaa\x60\x45\xde\x3c\xb6\x0c\xae\x11\x9b\xd2\x92\xf1\x24\x38\x70\xf7\x36\xbf\x6e\x7d\x33\xb7\x8e\x6d\xcf\xb1\x63\x73\xc8\x71\xa8\x53\x31\x5e\x51\x2a\x26\xb8\x95\x17\x0a\x1e\xb3\x64\x23\x41\x33\xc1\x95\x55\x44\x4b\x96\x24\x28\xed\x4c\x7c\x45\xae\x9f\x53\xe0\x51\xe6\x17\xc9\x18\xff\xad\x02\x93\xfd\x34\xcc\xd0\x55\x7b\x33\x47\x2b\x8b\x78\x3f\x40\xfb\xdb\xfb\xea\x33\xb7\xdd\x88\xa9\x22\x83\xdd\xf3\x22\x41\xb7\xc6\x59\x0e\xc9\x02\xd6\x51\x85\x92\x15\x7a\x89\xb2\x0c\x20\xe7\x36\xcf\x34\xe6\x1e\x7e\x25\x73\x2b\x31\x2e\x43\xb8\xa1\x11\xc6\x8c\xb3\xca\x26\x35\x5c\x58\xe2\x72\xc5\x66\x64\x05\x52\x76\xd3\x61\x34\xa9\x41\x1f\x2c\x91\x94\xe1\xe2\x8c\x49\xd5\x9d\xbb\x5c\x46\xa5\xfd\xb3\xa4\xd3\x0d\xb2\x25\x72\x69\x8c\xcf\x9e\x88\x49\x1a\xda\x09\x20\x8a\xaa\x00\x20\xfb\xde\x9f\x9d\x31\x64\x0a\x7b\xfb\xa7\xfe\xdb\x6a\x07\xbd\xc0\x07\x4b\xce\xec\x9c\xb3\xad\xa8\xca\xac\x8d\xa1\x50\x6b\xc6\x93\x0b\xdd\x1c\x8d\xd6\xfb\x99\xbd\x5d\x39\xc7\x0d\xdb\xbf\x70\x27\xe6\x00\x9e\xaf\x71\x46\x43\x26\xff\x02\xde\x42\xfa\xdf\x1e\xe8\x9f\xc1\xda\x6e\xfd\x00\x38\xb1\xd5\x67\xa8\xf5\x01\xf0\xf7\x06\x70\xf3\xb0\xb0\x08\xcc\x47\x00\x2b\x38\x3e\xc6\x76\x7d\xd7\x97\xf1\x7b\xed\x89\xc5\x28\x91\x87\xc3\x10\xba\x50\xa6\x61\xe5\xc4\x28\x0e\x3b\xf4\x88\x30\x2e\xb2\xc9\x97\xec\xc7\x02\x24\xf8\x4e\x54\x97\xd8\x8d\xb6\x3c\x0e\x98\x9b\xbf\xfa\x1d\x8e\x4e\xae\xd2\x54\xe8\x82\x06\x97\x8d\x4a\x80\x45\x5e\x76\x79\x00\x76\x60\xde\x15\xd9\x18\xb2\xcd\xd8\xbc\x22\xc4\x52\x10\xb7\xb4\xeb\xe4\x4d\x9a\x3c\xa7\xbb\xf2\xe2\x68\xd4\x55\x7d\x69\x38\xd2\x97\xc7\x20\x69\xb0\x03\x9b\x4c\xb7\xef\x68\x6a\x45\x69\xc2\x74\xba\x59\x3f\x84\x22\xa7\x3f\xbf\x7d\xf9\xfa\xf8\x43\xc4\x7a\x0b\x12\x69\x9c\x89\x44\xdc\x87\x82\x6b\xc9\xd6\x74\x9d\x89\x35\xcd\x41\x69\x94\x14\xc2\x12\x7d\xa5\xc0\xb6\x77\xa5\x69\x5e\xde\x1e\x5e\x94\x73\xc2\x11\x7b\x03\xf9\x6a\x31\x71\x97\x39\xac\xcf\xb7\x19\xab\x4b\xe7\xdc\x6b\xd1\xfb\x52\x16\x31\x55\x80\x0e\x53\x3c\xfd\xa8\x37\xe1\x22\x6b\xde\x2b\x5d\x1f\x63\xca\x75\x77\xd6\x31\xda\x2b\xc2\x39\x63\xf7\x8f\x4d\x32\x7d\x74\x56\xa2\xfe\x27\x18\xe2\x19\x83\xe4\x98\x51\x58\x09\xb3\x09\x53\x83\x1c\x35\xa5\xc8\xc8\xa4\x22\xfd\x14\x97\xf0\x7d\xfc\x2c\x59\x6c\x2e\xd4\x7f\xf7\xd7\x57\xfb\xeb\xab\xbf\x01\x00\x00\xff\xff\x0e\xdd\x1a\x2c\x9c\x18\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6300, mode: os.FileMode(438), modTime: time.Unix(1513139893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/default_manifest": assetsDefault_manifest,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"default_manifest": &bintree{assetsDefault_manifest, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


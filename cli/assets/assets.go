// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/defGopkg.lock
// assets/defGopkg.toml
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1519905570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x99\x4b\x6f\xe4\x48\x72\x80\xef\x0b\xec\x7f\x28\xc8\x87\xbd\x8c\xc4\x7c\x3f\x60\xec\xc5\xbe\xd8\x17\xdb\xc0\xec\x6d\xb0\x68\x44\x44\x46\xb2\x38\xcd\x22\xe9\x24\x4b\x2d\xcd\xaf\x37\x58\x25\xa9\x58\x5d\xac\x15\xdb\xbd\xd0\x41\xca\xc8\x24\xf9\x65\x64\xbc\x32\xf4\x2f\xbb\xbf\xed\x9b\x71\x97\x9b\x96\x77\xcd\xb8\x83\xe3\xd4\xd7\xdc\x71\x81\x89\xd3\x2f\xbb\xd4\xef\xba\x7e\xda\x71\x6a\xa6\x7f\xdd\xd1\x1e\xba\x9a\xc7\xdd\x01\x5e\x77\xc8\xbb\x63\x97\xfa\x8e\x77\xf8\xba\x9b\xf6\xbc\xeb\xf8\x65\xda\xfd\x25\xf1\xb0\xe3\x6e\x3c\x16\xfe\xcb\xd3\x9f\xff\x34\xff\xfc\xf6\xdb\x50\xfa\xdf\x99\xa6\xf1\xef\x7f\xff\xf3\x9f\x76\x3b\x2c\xd0\xd1\x7e\xf7\xd7\xdd\xc3\x01\xc6\x89\xcb\xc3\x2c\xec\xe0\xc0\xb3\xa8\x6e\xa6\xfd\x11\x9f\xa8\x3f\x54\xff\xd5\x27\xfe\x9f\xd2\x1c\xb8\xfa\x7d\xec\xbb\x01\xa6\xfd\x69\xe5\x00\xf4\x15\x66\x88\xbf\xee\x7e\x7b\x78\x7a\x38\xbd\xb2\xf0\x73\x33\x36\x7d\x37\xbf\x21\x18\x23\x74\xe2\x64\x8d\xd1\x2a\x50\x8c\xc8\xda\x78\xe5\x95\x77\xce\x4b\x1f\x99\xb3\xd2\x10\xe5\xc3\x1a\xdb\x0a\xc6\xaf\xfb\x7e\x68\xf2\x6b\x35\x42\x81\x03\x6c\x42\xc8\x32\x3a\xad\x85\xd2\x92\x83\xf3\x14\x84\xd7\xde\x04\xcf\x89\x0c\x69\x2b\x15\x4a\xa3\xa5\x55\x71\x33\x42\x53\x8e\xc3\xc8\x5d\xd5\xf6\x75\x39\x8e\x9b\x18\x92\x0b\x4a\x49\x1d\x4c\xe0\xe4\x02\x09\x50\x4e\x10\x68\x9f\x5c\x4a\x16\x88\x83\x51\x3a\x5b\x3c\x6f\xe8\x99\xcb\xfb\x73\xcf\xf2\x49\x3c\x99\xad\x64\x7f\xfb\xcf\x7f\xfb\xf7\xff\xfe\xb5\xcf\xd3\x37\x28\x5c\xe5\xb6\xaf\xfb\x47\x6a\x9b\x1b\xc2\x79\xbc\xdb\x3d\x70\xf7\xfc\xf0\xcb\xdb\xdf\xc7\xa9\x69\x4f\xeb\x6e\xd0\x51\x07\xa7\x41\x8b\x10\x43\x08\xca\x83\x92\x41\x3a\x11\x9c\x24\x9d\x15\x27\xef\x31\x80\x45\xc9\x3f\x05\xd9\x77\x53\x69\xf0\x1e\x28\xd0\xd4\xf4\xdd\xbc\xf6\xdb\x07\xf0\x42\x56\x25\xce\x4d\xd7\xcc\xe3\xd5\x69\x7e\x99\xb8\x1b\xef\xcd\x36\xdd\x38\x41\x47\xbc\x3a\x79\xe8\x13\xb7\xab\x33\x43\xe9\x9f\x9b\xc4\x65\x75\x72\xa4\xd2\x0c\x53\x95\xeb\xba\x1f\xd7\x17\x70\x79\x6e\xee\x7c\x73\x3c\x0e\x43\x5f\xa6\xd5\xb9\x89\x4f\x3e\xba\x9c\x7a\x6e\xa6\xd7\xd9\x14\x6f\x85\x85\x87\xf6\x75\x4d\x3c\x5e\x5e\x7e\xda\x60\x35\x36\x87\xa1\xbd\xd0\x4c\xa5\xa9\x6b\x2e\xa7\x95\x15\xf5\x65\x5c\xb7\x8c\xac\x93\xf1\x49\x90\x8f\xd6\x24\x26\x69\x6d\x22\x21\x38\x90\xd3\x26\xe4\x10\x33\x80\x15\x02\xd6\x1d\x6b\x6b\xdc\x59\x33\x97\xf6\x1f\x98\xca\x30\x7c\x6c\x83\xfa\x2e\x37\xf5\x62\x58\xb8\x3a\x2b\xf3\x56\x36\x6b\xe6\x5a\x9a\x60\x82\x6b\xc9\x01\x86\x61\xa1\xfc\x93\xec\x4d\x55\x1f\x42\xee\xea\xa6\xe3\xef\x86\x55\x39\x76\xdd\x62\x51\xdb\x5f\x3d\x73\xdf\xf7\x14\xca\xec\x89\xd1\x20\x13\x29\xd0\x98\x58\x67\xb6\x1c\x3d\x1b\x72\x00\x5a\xa3\x22\x29\xf0\xff\xe7\x7b\x07\x18\xf7\x6d\xd3\xd5\x77\xe3\xc3\xcb\x74\x56\xf8\x87\x86\xaa\x61\x5e\xfe\xcb\xcd\xfc\xbb\xc1\xd4\x7d\x69\xda\x16\x0e\xc7\x97\xef\xf5\xd2\x36\x58\x51\xdf\xa5\x93\x97\x8e\x57\xe2\xfb\xdb\xd7\x42\x19\x19\x33\xba\x4c\x39\x46\x87\x19\x0c\xa0\x42\xb2\x26\x09\x99\x51\x45\x50\x64\xa4\xca\x5b\xb7\x0f\x03\xd0\x9e\xab\x69\x5f\x9a\x3c\xdd\xc6\xed\x19\x66\xde\xcc\x79\xfa\x86\x46\x40\x30\x0c\x2c\x13\xaa\x00\x88\x96\x35\xb3\xd7\x82\x43\x06\x23\x40\x5a\x43\x8e\xa5\x88\x7e\x2b\x4d\x82\x67\xa6\x7a\x5f\xd5\xfd\xe3\x38\xf0\xb7\x5b\x9e\x93\xf4\x06\x83\x29\x31\x20\x39\x6b\xa2\x4d\x59\x25\xa6\x68\x93\x27\x03\x86\x34\x0b\x25\xa3\xd0\x42\x5b\xb6\x3f\xe5\x75\xfc\xa6\xaa\xba\x7f\x2c\x3c\x36\x6d\xc3\x1d\xbd\xde\x12\x62\x61\xf8\xca\x65\x05\x32\x47\x00\xf0\x0c\x01\x93\x32\x26\x18\x15\x21\x4b\xf0\x9e\xb2\x91\xa8\x50\xa3\x36\x98\x92\xfb\x67\x41\xbe\x70\x69\xa0\x7d\x1c\x3b\x18\x86\x15\xce\x95\x8c\x8c\x18\xad\x65\x21\x31\x6a\xe3\x80\x64\x4c\xa4\x22\xa3\x74\x36\x38\x8a\x22\x71\x8a\x11\x62\xa0\xad\xa7\xf9\x0e\xf3\xbf\x47\x3e\xf2\x26\x02\x63\x88\x82\xb0\x94\xa5\x56\xc2\xa2\xb5\xd9\x45\x96\x06\x09\x5d\x0c\xce\x27\x09\x1c\x55\x8e\x61\xa5\x26\x90\x4f\x62\x2b\xd7\x1c\x2e\xfb\x3a\x1f\xa6\xea\xfc\x6b\x13\x9a\x8e\x02\xd0\x47\x6d\x99\x55\x60\x72\xa8\x82\xd3\xce\x20\x42\x44\x93\x92\x33\x52\x10\xea\x64\x6f\xd0\xc4\x93\xfe\x11\xb4\xba\x9f\xf3\xe8\xd4\xe3\x31\xdf\x0b\x42\x4d\xff\x11\x2c\x4e\x4b\xd7\x23\x45\x32\x29\xa0\x8d\x19\x02\x07\xa9\x54\x4a\x21\xb9\xa8\x85\x22\xe2\x98\x51\xf9\x88\xe4\x84\x76\x61\x3b\x5a\x0b\x5d\xfd\x29\xdc\x99\xe8\x8a\x8f\x1e\x6b\xee\x1e\xeb\xbe\x4a\x7c\xae\x02\xfa\x4b\x10\x1c\xa6\xd7\x81\xc7\xef\x86\x15\x74\xaf\xdf\x8b\xd2\xb1\xc0\x55\x9e\x7a\x93\x4f\xcd\x81\xc7\x09\x0e\xc3\xba\x16\x24\xdb\x88\xde\xa3\x55\x98\x03\x1b\x34\x26\x82\xf5\xec\xb2\x8f\x59\x49\xa5\x5c\xb2\x5e\x06\xf3\x73\xa1\xe1\x4d\x35\x3f\xe0\x6a\xd6\x6a\x70\x46\x1a\x2f\x4c\x74\xa8\xb4\xf2\x80\x04\x73\xde\xd2\x4e\x47\x87\x29\x06\x36\x96\x36\x17\xe0\x6f\x59\x66\xce\x27\x13\xbf\x6c\xb3\x68\xc9\xa0\xac\x0e\x3e\x67\x97\x5d\x30\x41\xc7\x14\x94\x77\x9e\xa4\xd7\x3a\x67\x93\x4c\x92\x36\x89\xb5\x02\x7c\xf3\xdd\xe4\x9d\xeb\x70\x7c\xd9\xa6\x17\x40\xab\x6c\x36\x19\xa5\xf3\x81\x65\xf4\xc0\x36\x1a\x21\x39\x0a\x2b\x32\x08\x74\x84\x36\xa7\x9f\x3a\xae\xdf\x61\x98\xc9\x7e\x3d\xd9\xe2\x26\x2c\x02\xc0\x28\xa4\xb1\x28\xac\xf6\xce\x6a\x87\x08\xa8\xb5\xd2\x52\x65\x13\xa4\x92\x4a\xcf\xb0\x5b\xd5\xf2\xfb\x71\x4e\x1f\x23\xed\x0f\x4d\x9a\xaa\xfd\x34\x0d\xa5\x3f\xbe\x13\x7f\x06\xc3\x12\x63\x50\x01\x29\xb2\x8d\xc2\x20\x30\x09\xeb\x4f\xd9\x56\x44\x02\x23\x32\xfb\x0c\xbc\x1e\x73\xb6\xea\xe8\x6b\xf9\x91\xe0\x88\xc1\xb0\x16\x40\xc9\x4a\x0b\x90\xc8\xa0\x0f\x1a\x92\xc9\x39\x68\xc8\x59\xab\x18\x31\xe5\x3b\x48\x2b\x5f\x6f\x9b\x7a\x3f\x8d\x13\x0f\x97\xbf\x1e\xa7\x02\xc4\xe5\xb1\xee\xef\x45\x9e\xa7\x45\x19\xda\xb6\x4c\x53\x5f\x06\x5c\x94\x55\x6f\x2f\xfa\xf2\x56\xcc\xdc\x4c\x2c\x16\x9f\x97\x7c\x11\x5f\xe2\x17\x55\x5d\xd7\x40\xeb\x17\x42\xd0\x01\x81\x65\x16\x4c\x92\x89\xa3\x88\x2a\x69\x8b\xc8\x84\x68\xa2\x67\xd6\xc6\x10\xd2\x4a\x72\x90\xf6\x4e\x76\xd8\x7a\x52\xfd\xc0\xdd\xac\x9b\xa6\xab\xdf\x2f\x8d\x73\x86\xeb\x71\xbe\x50\x6d\x34\x29\xb0\x2a\x2b\x6d\x94\x31\x51\x19\x97\x2c\x12\x29\xaf\xd9\x59\xc2\x44\x19\x6c\xf6\xc9\x91\xd3\x9b\x33\xff\x82\xa9\x42\x18\x1b\xfa\x81\xc3\xfb\xd6\x14\x5e\xd7\xb2\x47\x36\x88\xc4\x32\xa8\xa4\x35\x5b\xc1\xc6\x62\x48\x29\x46\x29\xa4\xa1\x08\x1e\x32\x40\xda\xdc\x1b\x58\x52\x2e\xb5\xb8\x85\x72\x0e\xb2\x8b\xbb\xcb\x9d\xe4\xa3\x9d\xc4\x48\xc9\x09\x64\x1f\xc9\x90\x06\x9f\x21\x06\x23\x51\x93\xd4\x8a\x8d\x10\xce\xc1\xe6\xb0\x31\x43\xfe\xd1\x0c\x5f\x9b\xae\x3a\xff\x7a\x9c\x0f\xfa\x42\xfe\x39\x76\x6e\xa1\xfe\xce\xca\xab\xb7\xe4\x3c\xa7\x66\xe4\x3b\x93\xe7\xcf\xcd\xd7\xbb\xcb\x82\xab\xc4\x7d\xff\xd4\xb4\x62\x6d\x6c\x42\x8d\x02\x41\x41\x12\x39\xa3\xcd\x42\x13\x1a\x13\xd8\x82\x8e\x09\x84\x88\xeb\x75\xef\x8a\x12\x86\x86\x4b\x61\xaa\xda\x3f\xcc\x26\xdb\x56\x99\x12\x18\x42\x2f\x64\x20\x16\x16\x94\x8d\x36\x26\x95\x59\x04\x0a\x9a\xb5\x56\x31\x4b\x17\x37\xa7\xb9\xad\x8e\xf9\x0e\xfa\xf2\xf2\x1f\x30\xae\xb4\x06\xcf\x72\xad\x56\xdc\x51\x08\xe1\x50\x6a\xf2\x4a\x65\x9f\xa5\xd2\x2e\x90\x10\xa0\x93\x26\x05\x1c\x20\xc6\x08\x82\xb6\xab\xec\x6b\x5d\x71\x29\xef\x5d\x8b\x4f\x13\x4c\x08\x32\x27\x1b\x92\x0f\x2c\x0c\x65\x97\x44\x62\xa9\xa4\xcf\xc1\x0b\x4f\x81\x48\x29\x13\x71\x73\x34\x28\x54\xfa\x6f\x2d\xbf\xce\x61\xe9\xc0\x53\x69\x68\x23\x87\x0c\x92\x45\xb4\x08\x1c\x8d\x0d\x4a\x3b\x6d\xb4\x91\xc6\x90\x93\x10\x9d\x9d\x53\x8b\x63\xfb\x49\x56\x39\xd5\x66\x4f\x7d\xa9\xab\x97\x8a\xca\xeb\x30\xdd\x7a\xf7\xc3\x38\xee\xab\x89\xcb\xa1\xe9\xa0\x5d\xb9\xe5\x66\x22\x98\x2f\x6c\x10\x92\x37\x98\x53\x22\x45\xd1\x81\xf0\x1a\x93\x02\x93\x14\x78\x50\xfc\x49\x25\xbd\xe4\xe8\xf8\x36\xaf\x7e\xe4\xae\x73\x05\xf7\xee\x58\x73\x71\xa0\xae\x47\xd5\x7e\x7e\xee\x43\xd6\xa4\xee\xd2\x95\x69\xba\x89\x4b\x07\xed\xb9\x2e\xe6\xd2\x2c\x7c\xb4\xe5\x97\x53\xad\xd1\xf2\xcb\xa2\xaf\x05\x74\xc7\x71\x53\x70\x8e\x32\xe9\x10\x89\x29\x06\x9b\x5c\x4e\xa0\x82\x8d\x51\x3b\xb0\xde\x82\xb5\xa0\x01\x3f\xb1\xc2\xe5\xb6\xc7\xd7\xdb\x83\x7f\xe3\x38\x76\xcd\xcb\x22\x98\x74\xa9\xff\x76\xa7\xc5\x16\x74\x10\xd2\xc8\xc0\x72\xbe\xdd\xa0\x0c\x41\xb0\x76\x73\x89\x61\x83\x64\xb6\x46\x43\xd6\x8a\x60\x3b\xd6\x6a\xc5\xbc\x28\x25\x60\xe2\xab\xd2\x02\x26\xae\xf0\xd8\xb4\xe9\x56\xeb\xf3\xf4\x04\x78\x3b\x51\x73\xb7\x72\x46\x8b\x60\x7c\x11\x96\x86\x57\x57\x1f\xe9\xf2\xc1\x99\xfe\x08\xf5\x85\x6b\x64\x3a\x16\xae\xb0\x49\x4d\x39\x5e\xf5\x2d\xa1\x1b\x73\x5f\x0e\x97\xd6\x5a\xd7\x50\x9f\xce\x4b\x6f\x84\xd4\xa6\x72\x23\xec\xd6\x1e\x2f\xd0\xd5\x3c\x01\xb6\x77\xac\x87\x65\x04\x96\x26\xba\x18\x0c\x4a\x72\xd6\x62\x10\xc6\x80\xb3\x24\xf4\x1c\xcb\x28\xf8\x90\x92\xfe\xe4\x98\xfa\xba\xe5\xa7\xc5\x69\xd5\xdc\x5d\xee\xbc\x2b\xe7\x75\x7e\x02\x86\x66\xac\x60\x68\x2a\xe8\xba\x7e\x82\xeb\x06\xdb\x62\x49\x19\xa8\x1a\x27\x98\x8e\x77\x6c\x0d\x82\x14\x32\x2b\x49\x39\x06\xcd\xde\xeb\x24\x48\x4a\xad\x19\xc9\x1a\x65\x7c\x54\x42\x68\x25\x3f\xa9\x38\x6e\x37\x51\x06\xfa\x3c\x57\x23\xb4\xd0\xd1\xa2\x61\xf8\x2e\x98\x4b\x2a\xbe\x95\x96\xfe\xd8\xa5\xd2\x63\xb3\xec\xe5\xa6\x85\xff\x53\xdf\x75\x7c\xd3\xd8\x2d\x9c\xb8\x9b\x1a\x68\xc7\x45\x8b\x96\xfa\xb4\x6c\x6b\xce\xc0\x2d\x9e\xb8\xbf\xb4\xf8\xe5\x59\x56\x07\x1e\xc7\x99\xfc\x7a\x49\x7f\x6b\xcf\x1f\x82\xaf\xcc\x03\xb4\xcd\xf3\x85\xfc\xc0\x13\x5c\xb5\x94\x3b\x38\x2c\xbf\x3a\xf0\x62\xf3\x85\xc7\xbe\x7d\x5e\x11\x54\x69\x71\xb6\x1f\xc2\x01\xc6\x71\xda\x97\xfe\x58\xef\x2f\x3e\x32\xc1\x34\x5e\x8d\x8e\x97\xe1\x04\xc3\xb5\xd3\x9c\xfe\xe1\xb0\x1e\x81\x94\x71\x4a\x0a\x9d\xa4\xc8\x86\x8c\x53\x86\x2d\x5a\x01\x32\xc3\x5c\x45\xa3\x36\x0a\x9d\x53\xff\xd8\xb4\xc7\xfe\x58\x88\xeb\x02\xc3\xfe\x94\x24\x17\xe3\x0a\x86\x21\xad\x95\x0c\x37\x26\xf2\x11\x1b\x4e\xe5\xd7\xbb\xf4\xfb\x8a\xf0\xf6\xbf\x14\x11\x8c\xd6\x8e\x84\xb2\x46\x31\x62\x06\x21\x49\xfb\x68\x22\x26\x2f\xad\xca\x28\xb2\xb3\xf1\x2d\xc1\x9f\x34\x3a\x27\x6e\x38\xbd\x08\x3a\x68\x5f\xff\xe0\xf2\xf8\xbe\x93\xc4\xe7\xde\xcb\xc7\xc4\xa5\x88\x92\xb3\xbc\xe9\x86\xe3\x34\x3e\xa6\xa6\xe6\x71\x9a\x1f\x88\xde\x0a\x27\x55\x0a\x08\x81\x14\xaa\x34\x97\x5f\x1e\x83\xf7\x08\x64\x25\x92\x67\xeb\x25\x05\x70\x99\x45\x46\x8a\x32\x73\x4a\x41\xca\x14\x95\x36\x94\x4e\x5f\x3b\x9f\xf3\x07\x44\x3d\x8c\x8f\x94\xa8\x5d\xce\x5d\x71\xfc\x5f\x00\x00\x00\xff\xff\x0c\x2a\x3e\x45\x45\x1e\x00\x00")

func assetsDefgopkgLockBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgLock,
		"assets/defGopkg.lock",
	)
}

func assetsDefgopkgLock() (*asset, error) {
	bytes, err := assetsDefgopkgLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.lock", size: 7749, mode: os.FileMode(438), modTime: time.Unix(1520523508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x31\xcf\xd3\x30\x10\x86\xf7\x4a\xfd\x0f\xa7\x74\xa5\xf6\xc7\x27\x26\xa4\x0c\x4c\xec\x4c\xa0\xaa\x83\x63\x5f\x1c\x93\xd8\x67\xce\xe7\xaa\xfd\xf7\x28\x4d\xa0\x85\x52\x86\x6f\x89\xa2\xd7\xef\xf3\xbc\xba\x1d\x7c\xa6\x3c\x7a\x25\x14\x27\xc0\xb3\x89\x79\xc2\xed\x66\xb7\xdd\xec\xe0\x0b\xf6\xc8\x20\x04\x83\x48\x2e\x1f\xb5\xf6\x34\x99\xe4\x95\x0f\x32\xd4\x4e\x05\xd2\x0e\xb3\x76\x64\x8b\xbe\x39\xd4\x20\x71\x9a\xe9\x9e\x18\x1c\x8a\x09\x13\xba\xfb\x0d\x47\xb6\x46\x4c\x62\x24\x50\x52\xeb\x14\xe3\x8f\x1a\x18\x1d\xb4\x70\x68\x56\xbf\xa5\xa8\x6b\x41\xd6\x32\x84\xe4\xb5\x8d\x6e\xf9\x6b\x8e\x33\x11\x7c\xa2\x67\x40\x66\xfa\x8e\x56\x74\x1e\xfd\xd7\xe6\x1d\x34\x5d\x90\xae\xda\x11\x45\x11\xfb\x87\xca\xa7\xf9\xf3\xed\x6a\x9d\xc5\x87\x83\xa5\x54\x84\x4d\x48\x72\xbc\x4e\x01\x24\x13\x11\x5a\x78\x36\xd4\x2c\xad\x13\x72\x09\x94\xe6\xe2\x7b\xf5\xa2\x5e\x9a\xb7\x1b\x5f\x57\x65\xc7\x26\xd9\x61\x2e\x3a\x3c\xad\x59\xa1\xca\xf6\x6f\x38\x5e\x7a\xe2\xf1\x0f\x7c\x99\xa6\x13\x32\x07\x87\xff\x19\x3e\xeb\xcb\xe3\x05\xaf\xea\xc3\xdd\x05\x99\x6b\xc2\x5f\x06\x4a\x7b\x4f\xd0\x42\x6f\xa6\x82\x4b\xe6\x69\x2f\x58\xa4\x40\x0b\xc2\x75\x0d\x6b\xaa\x05\xdd\x3e\x1b\x3b\x1a\x8f\xb7\xb7\xed\xe6\xb7\xef\x1f\xe4\x73\xee\x67\x00\x00\x00\xff\xff\xfc\xcc\xd9\x95\xab\x02\x00\x00")

func assetsDefgopkgTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgToml,
		"assets/defGopkg.toml",
	)
}

func assetsDefgopkgToml() (*asset, error) {
	bytes, err := assetsDefgopkgTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.toml", size: 683, mode: os.FileMode(438), modTime: time.Unix(1520523508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\x25\x40\xbb\x15\x41\x40\x4b\x27\x89\xa9\x44\xaa\xe4\x39\x81\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xd7\x01\xe2\xc9\xe0\xfd\x1f\xbf\xfb\x48\xea\xed\xf2\x82\x10\x42\x82\x6b\x1d\xa6\x90\xb3\x60\x45\x82\x14\xb1\x58\x51\xfa\xac\xa5\xb8\xad\x57\xef\xa4\x4a\x68\xa4\x58\x8c\xb7\x9f\x3e\xd3\x7a\xed\x2a\xb8\x69\x4c\x71\x5b\x40\x69\x27\xd7\xcf\x10\x62\xb7\xac\xe0\xf7\x86\x2b\x88\x82\x15\xf9\x59\x2f\x55\xcb\x39\xd3\x69\xc6\x45\xf2\xd4\x04\xbc\xe9\xc9\x12\x86\xf0\xca\xb6\x41\xbd\xf4\xd8\x7a\x2a\x94\x2c\x40\x21\x07\x1d\xac\xc8\x9b\xc7\x97\x21\x35\x72\xd3\xa8\xb8\x48\x82\xbd\x74\x67\x8b\xeb\xb6\x37\x6b\xeb\xc4\xf6\x1a\x3b\xb1\x60\x39\x0c\x6d\x2a\xc1\x0b\x28\xcd\xa5\xb0\xca\x42\x29\x62\x9e\x6c\x14\x43\x2e\x85\xb6\xaa\xa0\xe2\x49\x02\xca\x2e\x84\x17\x10\xf8\x94\x32\x11\x65\x7e\x95\x8c\x8b\x5f\x3a\x30\xc5\x8f\xc3\x0a\x5d\xbd\x37\x6b\xb4\x8a\x88\x77\x03\xda\xdf\xce\xd7\x9f\xb9\xfd\x46\x5c\x17\x19\xdb\x3e\x2d\x92\x74\xeb\x9c\xe7\x2c\x59\xc0\x3b\xe8\x50\xf1\x02\x97\x68\xcb\x00\x72\x6e\xf7\x1c\x21\xf7\xc8\x2b\x9d\x6b\x05\x71\x99\xc2\x15\x8d\x20\xe6\x82\x57\x3e\xa9\x11\xc2\x92\x97\x2b\x37\xa3\x2a\xa6\x54\xc7\x0e\xa3\x45\x0d\xe6\x60\x89\xa2\x8c\x10\x27\x2c\xaa\x9e\xdc\xe5\x2a\x2a\xfd\x9f\xa4\x9c\x8e\xc8\x96\xa8\xa5\x71\x3e\x7b\x21\xe6\xd2\xd0\x4f\xc0\xa2\xa8\x4a\x80\x65\x0f\x7d\xee\x8c\x59\xa6\xa1\x77\xfe\xd4\x7f\x5b\xeb\xa0\x97\xf8\xe0\x90\x33\x27\xe7\x64\x47\x54\xe5\xd6\x26\xd0\x80\xc8\x45\x72\xa6\x27\x47\x63\xf5\x7e\xb8\xb7\x6b\xe7\xb8\x63\xfb\x0e\x77\x6a\x0e\xe0\xf9\x06\x67\x34\x65\xf2\x37\xe0\x2d\x4b\xff\x3a\x03\xfd\x3b\x58\x3b\xad\x1f\x00\x27\xb6\xfe\x0c\xad\x3e\x00\xfe\xde\x00\x6e\x5e\x16\x16\x81\xf9\x08\x60\xa5\x80\xfb\xd8\x6e\xef\xda\x19\x7f\xd4\x9e\x5a\x0c\x0a\x44\x38\x4c\xa1\x4b\x65\x1a\x56\x8e\xcc\x62\x7f\x86\x1e\x90\xc6\x59\x0e\xf9\x92\xf3\x58\x30\xc5\x7c\x37\xaa\x73\x9c\x46\x5b\x1d\x7b\xcc\xcd\xdf\xfd\x0e\x47\x47\x77\x69\x2a\x74\x19\x32\x97\x8f\x4a\x81\x47\x5e\x71\x79\x01\x76\x60\xde\x95\xd9\x18\xb2\xcd\xdc\xbc\x2a\xc4\xd2\x10\xb7\xb6\xeb\xe6\x4d\x9a\x3a\xa7\x87\xf2\xe2\x68\x34\x54\xfd\x68\x38\x30\x96\xc7\x21\x69\xb0\xc3\x36\x19\xb6\xdf\xd1\xf4\x8a\xd2\x84\x63\xba\x59\xdf\x85\x32\xa7\x3f\xbe\x7d\xf9\x7a\xff\x5d\xc6\xf8\xca\x14\xd0\x38\x93\x89\xbc\x0d\xa5\x40\xc5\xd7\x74\x9d\xc9\x35\xcd\x99\x46\x50\x94\x85\x25\xfa\x4a\x85\xd7\xde\x93\xa6\xf9\xf2\x76\xf7\xac\x9d\x0c\x47\xec\x03\xe4\xeb\xc5\xc4\xb3\xcc\xe1\x7d\xbe\x93\xb1\x7a\x74\xce\x7d\x2c\x7a\xbf\x94\x45\x5c\x17\x0c\xc3\x14\x8e\xbf\xea\x4d\x78\xc8\x9a\xef\x4a\xd7\x66\x4c\x79\xee\xce\x4a\xa3\xbd\x26\x9c\x32\x77\x3f\x6d\x92\xe9\xd4\x59\xa9\xfa\x3f\xc1\x10\x0f\x0d\x92\x43\xa8\xb0\x52\xe6\x13\x58\x83\x1c\xc4\x52\x64\x84\xa9\x48\xbf\xc4\xff\x11\x9b\x8b\x62\x83\x0f\x23\xf7\x06\x4b\xfc\x09\xbb\xdc\x59\x1c\x7e\x9d\xb0\x05\x9c\x54\x2f\x71\x93\xe4\x04\xb1\x8b\x5e\x17\xa3\xca\xfa\xef\xee\xf2\x62\x77\x79\xf1\x27\x00\x00\xff\xff\x36\x63\x4c\x69\xaf\x19\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6575, mode: os.FileMode(438), modTime: time.Unix(1519905570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/defGopkg.lock": assetsDefgopkgLock,
	"assets/defGopkg.toml": assetsDefgopkgToml,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"defGopkg.lock": &bintree{assetsDefgopkgLock, map[string]*bintree{}},
		"defGopkg.toml": &bintree{assetsDefgopkgToml, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


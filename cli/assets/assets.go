// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/defGopkg.lock
// assets/defGopkg.toml
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1523944915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x4b\x6f\xec\xc6\x8e\xde\x07\xc8\x7f\x68\x9c\x59\xdc\x4d\x6c\xd5\xfb\x81\xc1\xdd\xcc\x6c\x66\x56\xb3\xc8\xdd\x05\xc1\x01\xc9\x62\xa9\x75\xac\x96\x34\x25\xb5\x8f\x9d\x5f\x7f\xa1\x6e\x3f\xd4\xa7\xd5\xb1\x8c\x04\x5e\xb8\x8b\x64\x49\x5f\xb1\x8a\xe4\x57\xd4\x7f\xec\xfe\xb5\x6f\xc6\x5d\x6e\x5a\xde\x35\xe3\x0e\x8e\x53\x5f\x73\xc7\x05\x26\x4e\xbf\xec\x52\xbf\xeb\xfa\x69\xc7\xa9\x99\xfe\x73\x47\x7b\xe8\x6a\x1e\x77\x07\x78\xde\x21\xef\x8e\x5d\xea\x3b\xde\xe1\xf3\x6e\xda\xf3\xae\xe3\xa7\x69\xf7\x8f\xc4\xc3\x8e\xbb\xf1\x58\xf8\x1f\xf7\x3f\xff\x34\xff\xfd\xf6\xdb\x50\xfa\x6f\x4c\xd3\xf8\xfb\xef\x3f\xff\xb4\xdb\x61\x81\x8e\xf6\xbb\x7f\xee\xbe\x1c\x60\x9c\xb8\x7c\x99\x85\x1d\x1c\x78\x16\xd5\xcd\xb4\x3f\xe2\x3d\xf5\x87\xaa\x6f\x9b\x47\x86\xba\xe5\xea\xdb\xd8\x77\x03\x4c\xfb\x93\xe5\x00\xf4\x00\x33\x88\x7f\xee\x7e\xfb\x72\xff\xe5\xf4\xc8\xc2\x8f\xcd\xd8\xf4\xdd\xfc\x04\xe3\x32\x64\xad\x13\x48\x6d\x95\xa7\xc8\x39\x28\x25\x2c\x09\x66\x19\x42\x76\x99\x62\x40\xa9\xf9\xcb\x1a\xb6\x15\x18\xbf\xee\xfb\xa1\xc9\xcf\xd5\x08\x05\x0e\xb0\x09\x42\x96\xd1\x69\x2d\x94\x96\x1c\x9c\xa7\x20\xbc\xf6\x26\x78\x4e\x64\x48\x5b\xa9\x50\x1a\x2d\xad\x8a\x9b\x21\x34\xe5\x38\x8c\xdc\x55\x6d\x5f\x97\xe3\xb8\x09\x43\x72\x41\x29\xa9\x83\x09\x9c\x5c\x20\x01\xca\x09\x02\xed\x93\x4b\xc9\x02\x71\x30\x4a\x67\x8b\xe7\x05\x3d\x72\x79\x9d\xf7\x28\xef\xc5\xbd\xd9\x8a\xec\x5f\xff\xfb\x5f\xff\xfd\x7f\xbf\xf6\x79\xfa\x0e\x85\xab\xdc\xf6\x75\x7f\x47\x6d\x73\x85\x70\x1e\xef\x76\x5f\xb8\x7b\xfc\xf2\xcb\xcb\xef\xe3\xd4\xb4\x6f\x03\xea\xbb\xdc\xd4\xa7\x69\x57\x2b\xe1\x1c\x24\xb1\xc8\xde\x5b\x15\x01\xa4\x4f\x36\x78\x13\xa3\x8f\x18\xd9\xa4\x2c\x23\x26\xc6\x40\x57\x2b\x11\xf7\xf6\x5e\xfd\xa5\x95\xf4\xdd\x54\x1a\xbc\xb5\x1a\xa0\xa9\xe9\xbb\xd9\xf6\xfb\xdb\x42\x16\xb2\x2a\x71\x6e\xba\x66\x1e\xaf\xaa\x9b\x6e\x9c\xa0\x23\x5e\x55\xb6\x4d\xf7\xc0\x65\x55\x75\xe8\x13\xb7\xb7\x35\xd5\xd8\x1c\x86\x76\xfd\xa9\x23\x97\xc7\xe6\xc6\x1b\xc7\xe3\x30\xf4\x65\x5a\xd5\x4d\x7c\x0a\xd4\x35\xd5\xc5\x36\xce\x8a\xc7\x66\x7a\x9e\x0f\xea\xb5\xb0\xf0\xd0\x3e\xaf\x89\xc7\xf7\xb7\xae\x2e\x61\x29\xac\x90\xf7\xf0\xd8\xf4\x65\x7c\x53\x4f\xa5\xa9\x6b\x2e\x97\x0f\x5a\x0a\x2b\x9a\xcd\x57\x0f\x17\x46\x90\xca\xdb\x94\x4d\x88\x60\x0d\xe7\x60\xb3\x74\x2a\x44\x13\x89\x39\x71\xe6\x9c\x9c\x25\xf9\xf7\x1f\xae\xf6\x4f\x0e\xd6\x30\xbc\xbb\x69\x18\xe6\x35\xf4\xc7\xb2\xd8\xb7\x97\x70\x79\x1f\x16\xae\xce\x9b\x72\x2d\x9b\x7d\x7c\x29\x4d\x30\xc1\xa5\xe4\x00\xc3\xb0\xd8\xdf\x85\xac\xe2\xa7\xa1\x6c\x52\x9f\x7e\xf2\x38\x5e\x81\xf8\x33\xcb\x2a\x35\x85\x57\x80\xff\xe9\x9c\xf9\xe7\x27\xcc\xf3\xb1\xfb\xec\x1b\xea\x9e\xa8\xe2\x52\x96\xa7\x6c\xe3\xac\x96\x9f\x3e\xe3\xaa\xf3\xa4\x01\xca\xf8\xf9\x59\x53\xff\xc0\x1f\xae\x6a\x5e\xfd\x3c\x9c\x9e\x07\xfe\xc8\x76\xae\xb3\x5b\x6c\xaa\xdc\x70\x9b\x3e\xb2\x2c\x9c\x2f\x4d\x5e\x42\xf2\x4d\xc8\x5d\xdd\x74\xfc\xc3\xb0\x2a\xc7\xae\x5b\x18\xb5\xfd\xc5\x9c\x8b\x74\x33\x0f\xaa\x03\x74\x50\x73\x5a\x0f\x6f\x69\x98\x48\x91\xd2\x41\xc4\xe4\x83\x64\x12\xc1\xda\x0c\x5e\x79\x65\x33\x1b\x2b\x7d\x0e\xe6\xef\x0d\xef\x03\x8c\xfb\xb6\xe9\xea\x9b\x45\xf0\x69\x3a\xa7\x80\xb7\xf0\xac\x86\xd9\xfc\x97\x2b\xfd\x6b\x0e\xab\xfb\xd2\xb4\x2d\x1c\x8e\x4f\x3f\xba\xb0\x6d\xb0\xa2\xbe\x4b\xa7\x2a\x33\x5e\x88\x4f\x9e\x5a\x75\x8a\x0b\x2e\x7a\xe7\x2c\x6a\xa3\x31\xeb\xec\xad\xc6\xe0\x42\x92\x4e\x08\xf4\xca\x6a\x67\x45\xd6\x2e\x6f\x5d\x3e\x0c\x40\x7b\xae\xa6\x7d\x69\xf2\x74\x4d\x4e\x66\x30\xf3\x62\xce\xea\x2b\x34\x02\x82\x61\x60\x99\x50\x05\x40\xb4\xac\x99\xbd\x16\x1c\x32\x18\x01\xd2\x1a\x72\x2c\x45\xf4\x5b\xd1\x24\x78\x64\xaa\xf7\x55\xdd\xdf\x8d\x03\x7f\xbf\xc6\x73\x92\x5e\xb3\x0c\x4a\x0c\x48\xce\x9a\x68\x53\x56\x89\x29\xda\xe4\xc9\x80\x21\xcd\x42\xc9\x28\xb4\xd0\x96\xed\x2a\x8c\xad\x94\x96\x5f\x5c\x55\xf7\x77\x85\xc7\xa6\x6d\xb8\xa3\xe7\x6b\x84\x58\x18\xe6\xea\xbf\x42\x85\x22\x00\x78\x86\x80\x49\x19\x13\x8c\x8a\x90\x25\x78\x4f\xd9\x48\x54\xa8\x51\x1b\x4c\xc9\xfd\x5d\x20\x9f\xb8\x34\xd0\xde\x8d\x1d\x0c\xc3\x0a\xce\x15\xda\x89\x18\xad\x65\x21\x31\x6a\xe3\x80\x64\x4c\xa4\x22\xa3\x74\x36\x38\x8a\x22\x71\x8a\x11\xe2\x89\xac\x6d\xda\xcd\x57\x30\xff\x7f\xe4\x23\x6f\xe3\xff\x86\x28\x08\x4b\x59\x6a\x25\x2c\x5a\x9b\x5d\x64\x69\x90\xd0\xc5\xe0\x7c\x92\xc0\x51\xe5\x18\x56\x88\xaf\xbc\x17\x5b\x71\xcd\x05\xbc\xaf\xf3\x61\xaa\xce\xff\x36\x41\xd3\x51\x00\xfa\xa8\x2d\xb3\x0a\x4c\x0e\x55\x70\xda\x19\x44\x88\x68\x52\x72\x46\x0a\x42\x9d\xec\x4a\x36\xd2\x9f\x81\x56\xf7\xd5\x50\xfa\xa9\xc7\x63\xbe\x95\x84\x9a\xfe\x2d\x59\x9c\x4c\xd7\x33\x45\x32\x29\xa0\x8d\x19\x02\x07\xa9\x54\x4a\x21\xb9\xa8\x85\x22\xe2\x98\x51\xf9\x88\xe4\x84\x76\x61\x3b\xb4\x16\xba\xfa\x43\x70\x67\x44\x17\xf8\xe8\xae\xe6\xee\xae\xee\xab\xc4\x23\x95\x66\x98\xfa\xf7\x24\x38\xcc\xb5\x6d\xfc\x61\x58\x41\xf7\xfc\xa3\x28\x1d\x0b\x5c\x30\x81\x17\xf9\xd4\x1c\x78\x9c\xe0\x30\xdc\x28\x22\x6c\x23\x7a\x8f\x56\x61\x0e\x6c\xd0\x98\x08\xd6\xb3\xcb\x3e\x66\x25\x95\x72\xc9\x7a\x19\xcc\x5f\x4b\x0d\x2f\xae\xf9\x44\xa8\x59\xab\xc1\x19\x69\xbc\x30\xd1\xa1\xd2\xca\x03\x12\x90\x14\xa8\x9d\x8e\x0e\x53\x0c\x6c\x2c\x6d\xbe\x65\xbe\x54\x99\xb9\x9e\x4c\xfc\xb4\xed\x44\x4b\x06\x65\x75\xf0\x39\xbb\xec\x82\x09\x3a\xa6\xa0\xbc\xf3\x24\xbd\xd6\x39\x9b\x64\x92\xb4\x49\xac\xdd\x32\xe5\x67\x71\x1d\x8e\x4f\xdb\xfc\x02\x68\x95\xcd\x26\xa3\x74\x3e\xb0\x8c\x1e\xd8\x46\x23\x24\x47\x61\x45\x06\x81\x8e\xd0\xe6\xf4\x97\xb6\xeb\x1b\x0c\x33\xb2\x5f\x4f\x67\x71\x13\x2c\x02\xc0\x28\xa4\xb1\x28\xac\xf6\xce\x6a\x87\x08\xa8\xb5\xd2\x52\x65\x13\xa4\x92\x4a\xcf\x60\xb7\xba\xe5\xdb\x71\x2e\x1f\x23\xed\x0f\x4d\x9a\xaa\xfd\x34\x0d\xa5\x3f\xbe\x22\xfe\x08\x0c\x4b\x8c\x41\x05\xa4\xc8\x36\x0a\x83\xc0\x24\xac\x3f\x55\x5b\x11\x09\x8c\xc8\xec\x33\xf0\x7a\xce\xd9\xea\xa3\x87\xf2\x99\xe4\x88\xc1\xb0\x16\x40\xc9\x4a\x0b\x90\xc8\xa0\x0f\x1a\x92\xc9\x39\x68\xc8\x59\xab\x18\x31\xe5\x1b\x90\x56\xde\xde\x36\xf5\x7e\x1a\x27\x1e\xde\x7f\xdd\x4d\x05\x88\xcb\x5d\xdd\xdf\xca\x3c\xf7\x0b\xc6\xda\xb6\x4c\x53\x5f\x06\x5c\xd0\xaa\x97\x07\x7d\x7d\x21\x33\x57\x8a\x85\xf1\xd9\xe4\xab\xf8\x1a\xbf\xaa\xea\x92\x03\xad\xdf\x44\x41\x07\x04\x96\x59\x30\x49\x26\x8e\x22\xaa\xa4\x2d\x22\x13\xa2\x89\x9e\x59\x1b\x43\xb8\xd6\xe6\x90\xf6\x46\x75\xd8\xdc\x6a\x1b\xb8\x9b\x7d\xd3\x74\xf5\x6b\xd3\x63\xae\x70\x3d\x8e\x5c\x1e\x37\x1e\x29\xb0\x2a\x2b\x6d\x94\x31\x51\x19\x97\x2c\x12\x29\xaf\xd9\x59\xc2\x44\x19\x6c\xf6\xc9\x91\xd3\x9b\x2b\xff\x02\x53\x85\x30\x36\xf4\x89\xcd\xfb\xde\x14\x5e\xf7\xb2\x47\x36\x88\xc4\x32\xa8\xa4\x35\x5b\xc1\xc6\x62\x48\x29\x46\x29\xa4\xa1\x08\x1e\x32\x40\xda\xdc\x00\x5b\xa2\x5c\x7a\x71\x0b\xca\x39\xc9\x2e\xae\x39\x37\x8a\x8f\x76\x12\x23\x25\x27\x90\x7d\x24\x43\x1a\x7c\x86\x18\x8c\x44\x4d\x52\x2b\x36\x42\x38\x07\x9b\xd3\xc6\x0c\xf2\x8f\x66\x78\x68\xba\xea\xfc\xef\x6e\xde\xe8\x77\xe4\x1f\xc3\xce\x2d\xd4\x3f\x9c\xf2\xea\xa5\x38\xcf\xa5\x19\xf9\x86\xf2\xfc\xba\xf9\x26\xf8\x6e\x70\x51\xb8\x6f\xef\x9a\x56\xac\x8d\x4d\xa8\x51\x20\x28\x48\x22\x67\xb4\x59\x68\x42\x63\x02\x5b\xd0\x31\x81\x10\x71\x9d\xf7\xae\x38\x61\x68\xb8\x14\xa6\xaa\xfd\xc3\x6c\x3a\xdb\x2a\x53\x02\x43\xe8\x85\x0c\xc4\xc2\x82\xb2\xd1\xc6\xa4\x32\x8b\x40\x41\xb3\xd6\x2a\x66\xe9\xe2\xe6\x32\xb7\x35\x30\x5f\x81\x3e\x3d\xfd\x0f\x8c\x2b\xfd\xef\xb3\x5c\xab\x95\x70\x14\x42\x38\x94\x9a\xbc\x52\xd9\x67\xa9\xb4\x0b\x24\x04\xe8\xa4\x49\x01\x07\x88\x31\x82\xa0\xed\x2e\x7b\xa8\x5f\x3b\x22\x9b\x0a\x4c\x08\x32\x27\x1b\x92\x0f\x2c\x0c\x65\x97\x44\x62\xa9\xe6\xeb\xb6\x17\x9e\x02\x91\x52\x26\xe2\xe6\x6c\x50\xa8\xf4\xdf\x5b\x7e\x9e\xd3\xd2\x81\xa7\xd2\xd0\x46\x1c\x32\x48\x16\xd1\x22\x70\x34\x36\x28\xed\xb4\xd1\x46\x1a\x43\x4e\x42\x74\x76\x2e\x2d\x8e\xed\x07\x55\xe5\xc4\xcd\xee\xfb\x52\x57\x4f\x15\x95\xe7\x61\xba\x8e\xee\x2f\xe3\xb8\xaf\x26\x2e\x87\xa6\x83\x76\xe5\x96\x9b\x89\x60\xbe\xb0\x41\x48\xde\x60\x4e\x89\x14\x45\x07\xc2\x6b\x4c\x0a\x4c\x52\xe0\x41\xf1\x07\x4c\x7a\x89\xa3\xe3\xeb\xba\xfa\x56\xbb\xce\x0c\xee\x35\xb0\x66\x72\xa0\x2e\x47\xd5\x7e\x9e\xf7\x26\x6b\x52\xf7\xde\x12\x6c\xba\x89\x4b\x07\xed\x99\x17\x73\x69\x16\x31\xda\xf2\xd3\x89\x6b\xb4\xfc\xb4\x68\xb5\x02\xdd\x08\xdc\x14\x9c\xa3\x4c\x3a\x44\x62\x8a\xc1\x26\x97\x13\xa8\x60\x63\xd4\x0e\xac\xb7\x60\x2d\x68\xc0\x0f\x4e\xe1\x72\xd9\xe3\xf3\xf5\xc6\xbf\xe0\x38\x76\xcd\xd3\x22\x99\x74\xa9\xff\x7e\xa3\xeb\x1b\x74\x10\xd2\xc8\xc0\x72\xbe\xdd\xa0\x0c\x41\xb0\x76\x33\xc5\xb0\x41\x32\x5b\xa3\x21\x6b\x45\xb0\x1d\xd6\x2a\x63\x5e\x50\x09\x98\xf8\x82\x5a\xc0\xc4\x15\x1e\x9b\x45\x17\xed\xcd\xeb\xb3\x7a\x02\xbc\x56\xd4\x8b\x6e\xdf\xfb\x1e\x2d\x92\xf1\xbb\xb0\x34\xbc\x6a\x7d\xa4\xf7\x17\xce\xe8\x8f\x50\xbf\xe3\x1a\x99\x8e\x85\x2b\x6c\x52\x53\x8e\x8b\xf6\xfb\x54\xa0\x1b\x73\x5f\x0e\xef\x8d\xb7\xae\xa1\x3e\x9d\x4d\xaf\x84\xd4\xa6\x72\x25\xec\xd6\xa6\x17\xe8\x6a\x9e\x00\xdb\x1b\xa7\x87\x65\x04\x96\x26\xba\x18\x0c\x4a\x72\xd6\x62\x10\xc6\x80\xb3\x24\xf4\x9c\xcb\x28\xf8\x90\x92\xfe\x60\x9b\xfa\xba\xe5\xfb\xc5\x6e\xd5\xdc\xbd\xdf\x79\x57\xf6\xeb\x3c\x03\x86\x66\xac\x60\x68\x2a\xe8\xba\x7e\x82\xcb\x06\xdb\xc2\xa4\x0c\x54\x8d\x13\x4c\xc7\x1b\x67\x0d\x82\x14\x32\x2b\x49\x39\x06\xcd\xde\xeb\x24\x48\x4a\xad\x19\xc9\x1a\x65\x7c\x54\x42\x68\x25\x3f\x60\x1c\xd7\x8b\x28\x03\x7d\x5c\xab\x11\x5a\xe8\x68\xd1\x30\x7c\x15\xcc\x94\x8a\xaf\xa5\xa5\x3f\x76\xa9\xf4\xd8\x2c\xfb\xc0\x89\x97\x5d\xf0\xae\xe3\xab\xaf\x0a\x85\x13\x77\x53\x03\xed\xb8\xe8\xe6\x52\x9f\x96\x6d\xcd\x19\x70\x8b\x27\xdc\x5f\x5b\xfc\xfa\x28\xab\x03\x8f\xe3\x8c\xfc\xd2\xa4\xbf\x3e\xcf\x6f\x82\x07\xe6\x01\xda\xe6\x71\xf1\x69\x88\x27\xb8\xf8\x9e\xd1\xc1\x61\xf9\xd6\x81\x17\x8b\x2f\x3c\xf6\xed\xe3\x8a\xa0\x4a\x8b\xbd\x7d\x13\x0e\x30\x8e\xd3\xbe\xf4\xc7\x7a\xff\x1e\x23\x13\x4c\xe3\xc5\xe8\xb8\xf8\x10\x05\xc3\x65\xd0\x9c\x3e\xa8\xad\x67\x20\x65\x9c\x92\x42\x27\x29\xb2\x21\xe3\x94\x61\x8b\x56\x80\xcc\x30\xb3\x68\xd4\x46\xa1\x73\xea\xcf\x8f\xf6\xf9\xab\x50\x5d\x60\xd8\x9f\x8a\xe4\x62\x5c\xc1\x30\xa4\x35\xca\x70\x75\x44\xde\x72\xc3\x89\x7e\xbd\x4a\x7f\x64\x84\xd7\xdf\xb8\x23\x18\xad\x1d\x09\x65\x8d\x62\xc4\x0c\x42\x92\xf6\xd1\x44\x4c\x5e\x5a\x95\x51\x64\x67\xe3\x07\x05\xbe\x1f\x1e\xea\xfb\xa6\xab\x60\xec\xe4\x1d\x72\xb9\x7f\x94\xdb\x3a\x69\x3e\x4a\x13\x08\x84\x52\x36\x65\x0f\x46\x2b\x21\x15\x86\x94\x85\xb6\x96\x14\x28\xe1\x34\x90\x58\x21\x64\x1f\x74\xf5\x5f\x11\xb5\x09\x86\xfb\x47\xb5\xb1\xe9\xe9\x21\x12\x38\x36\x19\x49\x49\x15\x59\x27\xb4\x21\x80\x36\x48\xd1\x8b\x9c\x39\x48\x09\xd7\xf4\x50\xdd\xdb\x8f\xfa\x20\xaf\x78\x9e\xe1\xd0\x6e\xc5\xe3\x73\xf4\xc1\x05\x66\xf2\x06\xb5\x42\x11\x83\x4a\x49\xda\x00\x56\x82\x31\x2e\xc9\x04\x9e\xf1\xba\xcf\xa8\xee\xff\x2a\x61\xfd\x36\x61\xdb\x74\xa7\xf6\x68\x82\xe1\x8e\xda\x86\xbb\x8d\xf7\x7f\xaf\xb3\x73\x4e\x39\xd4\x9a\xc0\x00\x99\x9c\x9c\xb5\x81\x33\xa2\x70\x8a\x4c\x66\xc3\x56\x9d\x93\xde\xcf\x3f\xfd\x76\x0a\xd2\x99\x0b\xc2\xe9\x51\xd0\x41\xfb\xfc\x07\x97\xbb\x57\x50\x89\xcf\xed\xbc\x37\xc5\xfb\x42\xe5\x2c\x6f\xba\xe1\x38\x8d\x77\xa9\xa9\x79\x9c\xe6\x09\xd1\x5b\xe1\xa4\x4a\x01\x21\x90\x42\x95\x66\x46\xef\x31\x78\x8f\x40\x56\x22\x79\xb6\x5e\x52\x00\x97\x59\x64\xa4\x28\x33\xa7\x14\xa4\x4c\x51\x69\x43\xe7\x2f\x50\xe7\xd4\xf1\x06\xa2\x1e\xc6\x3b\x4a\xd4\x2e\x75\x17\x38\xfe\x1d\x00\x00\xff\xff\xc3\x52\x32\x3a\x7d\x23\x00\x00")

func assetsDefgopkgLockBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgLock,
		"assets/defGopkg.lock",
	)
}

func assetsDefgopkgLock() (*asset, error) {
	bytes, err := assetsDefgopkgLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.lock", size: 9085, mode: os.FileMode(438), modTime: time.Unix(1523946113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x31\xcf\xd3\x30\x10\x86\xf7\x4a\xfd\x0f\xa7\x74\xa5\xf6\xc7\x27\x26\xa4\x0c\x4c\xec\x4c\xa0\xaa\x83\x63\x5f\x1c\x93\xd8\x67\xce\xe7\xaa\xfd\xf7\x28\x4d\xa0\x85\x52\x86\x6f\x89\xa2\xd7\xef\xf3\xbc\xba\x1d\x7c\xa6\x3c\x7a\x25\x14\x27\xc0\xb3\x89\x79\xc2\xed\x66\xb7\xdd\xec\xe0\x0b\xf6\xc8\x20\x04\x83\x48\x2e\x1f\xb5\xf6\x34\x99\xe4\x95\x0f\x32\xd4\x4e\x05\xd2\x0e\xb3\x76\x64\x8b\xbe\x39\xd4\x20\x71\x9a\xe9\x9e\x18\x1c\x8a\x09\x13\xba\xfb\x0d\x47\xb6\x46\x4c\x62\x24\x50\x52\xeb\x14\xe3\x8f\x1a\x18\x1d\xb4\x70\x68\x56\xbf\xa5\xa8\x6b\x41\xd6\x32\x84\xe4\xb5\x8d\x6e\xf9\x6b\x8e\x33\x11\x7c\xa2\x67\x40\x66\xfa\x8e\x56\x74\x1e\xfd\xd7\xe6\x1d\x34\x5d\x90\xae\xda\x11\x45\x11\xfb\x87\xca\xa7\xf9\xf3\xed\x6a\x9d\xc5\x87\x83\xa5\x54\x84\x4d\x48\x72\xbc\x4e\x01\x24\x13\x11\x5a\x78\x36\xd4\x2c\xad\x13\x72\x09\x94\xe6\xe2\x7b\xf5\xa2\x5e\x9a\xb7\x1b\x5f\x57\x65\xc7\x26\xd9\x61\x2e\x3a\x3c\xad\x59\xa1\xca\xf6\x6f\x38\x5e\x7a\xe2\xf1\x0f\x7c\x99\xa6\x13\x32\x07\x87\xff\x19\x3e\xeb\xcb\xe3\x05\xaf\xea\xc3\xdd\x05\x99\x6b\xc2\x5f\x06\x4a\x7b\x4f\xd0\x42\x6f\xa6\x82\x4b\xe6\x69\x2f\x58\xa4\x40\x0b\xc2\x75\x0d\x6b\xaa\x05\xdd\x3e\x1b\x3b\x1a\x8f\xb7\xb7\xed\xe6\xb7\xef\x1f\xe4\x73\xee\x67\x00\x00\x00\xff\xff\xfc\xcc\xd9\x95\xab\x02\x00\x00")

func assetsDefgopkgTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgToml,
		"assets/defGopkg.toml",
	)
}

func assetsDefgopkgToml() (*asset, error) {
	bytes, err := assetsDefgopkgTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.toml", size: 683, mode: os.FileMode(438), modTime: time.Unix(1523944915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\x25\x40\xbb\x15\x41\x40\x4b\x27\x89\xa9\x44\xaa\xe4\x39\x81\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xd7\x01\xe2\xc9\xe0\xfd\x1f\xbf\xfb\x48\xea\xed\xf2\x82\x10\x42\x82\x6b\x1d\xa6\x90\xb3\x60\x45\x82\x14\xb1\x58\x51\xfa\xac\xa5\xb8\xad\x57\xef\xa4\x4a\x68\xa4\x58\x8c\xb7\x9f\x3e\xd3\x7a\xed\x2a\xb8\x69\x4c\x71\x5b\x40\x69\x27\xd7\xcf\x10\x62\xb7\xac\xe0\xf7\x86\x2b\x88\x82\x15\xf9\x59\x2f\x55\xcb\x39\xd3\x69\xc6\x45\xf2\xd4\x04\xbc\xe9\xc9\x12\x86\xf0\xca\xb6\x41\xbd\xf4\xd8\x7a\x2a\x94\x2c\x40\x21\x07\x1d\xac\xc8\x9b\xc7\x97\x21\x35\x72\xd3\xa8\xb8\x48\x82\xbd\x74\x67\x8b\xeb\xb6\x37\x6b\xeb\xc4\xf6\x1a\x3b\xb1\x60\x39\x0c\x6d\x2a\xc1\x0b\x28\xcd\xa5\xb0\xca\x42\x29\x62\x9e\x6c\x14\x43\x2e\x85\xb6\xaa\xa0\xe2\x49\x02\xca\x2e\x84\x17\x10\xf8\x94\x32\x11\x65\x7e\x95\x8c\x8b\x5f\x3a\x30\xc5\x8f\xc3\x0a\x5d\xbd\x37\x6b\xb4\x8a\x88\x77\x03\xda\xdf\xce\xd7\x9f\xb9\xfd\x46\x5c\x17\x19\xdb\x3e\x2d\x92\x74\xeb\x9c\xe7\x2c\x59\xc0\x3b\xe8\x50\xf1\x02\x97\x68\xcb\x00\x72\x6e\xf7\x1c\x21\xf7\xc8\x2b\x9d\x6b\x05\x71\x99\xc2\x15\x8d\x20\xe6\x82\x57\x3e\xa9\x11\xc2\x92\x97\x2b\x37\xa3\x2a\xa6\x54\xc7\x0e\xa3\x45\x0d\xe6\x60\x89\xa2\x8c\x10\x27\x2c\xaa\x9e\xdc\xe5\x2a\x2a\xfd\x9f\xa4\x9c\x8e\xc8\x96\xa8\xa5\x71\x3e\x7b\x21\xe6\xd2\xd0\x4f\xc0\xa2\xa8\x4a\x80\x65\x0f\x7d\xee\x8c\x59\xa6\xa1\x77\xfe\xd4\x7f\x5b\xeb\xa0\x97\xf8\xe0\x90\x33\x27\xe7\x64\x47\x54\xe5\xd6\x26\xd0\x80\xc8\x45\x72\xa6\x27\x47\x63\xf5\x7e\xb8\xb7\x6b\xe7\xb8\x63\xfb\x0e\x77\x6a\x0e\xe0\xf9\x06\x67\x34\x65\xf2\x37\xe0\x2d\x4b\xff\x3a\x03\xfd\x3b\x58\x3b\xad\x1f\x00\x27\xb6\xfe\x0c\xad\x3e\x00\xfe\xde\x00\x6e\x5e\x16\x16\x81\xf9\x08\x60\xa5\x80\xfb\xd8\x6e\xef\xda\x19\x7f\xd4\x9e\x5a\x0c\x0a\x44\x38\x4c\xa1\x4b\x65\x1a\x56\x8e\xcc\x62\x7f\x86\x1e\x90\xc6\x59\x0e\xf9\x92\xf3\x58\x30\xc5\x7c\x37\xaa\x73\x9c\x46\x5b\x1d\x7b\xcc\xcd\xdf\xfd\x0e\x47\x47\x77\x69\x2a\x74\x19\x32\x97\x8f\x4a\x81\x47\x5e\x71\x79\x01\x76\x60\xde\x95\xd9\x18\xb2\xcd\xdc\xbc\x2a\xc4\xd2\x10\xb7\xb6\xeb\xe6\x4d\x9a\x3a\xa7\x87\xf2\xe2\x68\x34\x54\xfd\x68\x38\x30\x96\xc7\x21\x69\xb0\xc3\x36\x19\xb6\xdf\xd1\xf4\x8a\xd2\x84\x63\xba\x59\xdf\x85\x32\xa7\x3f\xbe\x7d\xf9\x7a\xff\x5d\xc6\xf8\xca\x14\xd0\x38\x93\x89\xbc\x0d\xa5\x40\xc5\xd7\x74\x9d\xc9\x35\xcd\x99\x46\x50\x94\x85\x25\xfa\x4a\x85\xd7\xde\x93\xa6\xf9\xf2\x76\xf7\xac\x9d\x0c\x47\xec\x03\xe4\xeb\xc5\xc4\xb3\xcc\xe1\x7d\xbe\x93\xb1\x7a\x74\xce\x7d\x2c\x7a\xbf\x94\x45\x5c\x17\x0c\xc3\x14\x8e\xbf\xea\x4d\x78\xc8\x9a\xef\x4a\xd7\x66\x4c\x79\xee\xce\x4a\xa3\xbd\x26\x9c\x32\x77\x3f\x6d\x92\xe9\xd4\x59\xa9\xfa\x3f\xc1\x10\x0f\x0d\x92\x43\xa8\xb0\x52\xe6\x13\x58\x83\x1c\xc4\x52\x64\x84\xa9\x48\xbf\xc4\xff\x11\x9b\x8b\x62\x83\x0f\x23\xf7\x06\x4b\xfc\x09\xbb\xdc\x59\x1c\x7e\x9d\xb0\x05\x9c\x54\x2f\x71\x93\xe4\x04\xb1\x8b\x5e\x17\xa3\xca\xfa\xef\xee\xf2\x62\x77\x79\xf1\x27\x00\x00\xff\xff\x36\x63\x4c\x69\xaf\x19\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6575, mode: os.FileMode(438), modTime: time.Unix(1523944915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/defGopkg.lock": assetsDefgopkgLock,
	"assets/defGopkg.toml": assetsDefgopkgToml,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"defGopkg.lock": &bintree{assetsDefgopkgLock, map[string]*bintree{}},
		"defGopkg.toml": &bintree{assetsDefgopkgToml, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


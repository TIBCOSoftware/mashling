// Code generated by go-bindata.
// sources:
// assets/banner.txt
// assets/defGopkg.lock
// assets/defGopkg.toml
// schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcf\xee\xa4\x30\x08\x3e\x8f\x89\xef\xc0\x8d\xf9\xa5\x0b\xdc\x79\x96\x49\xb8\xec\xbd\x87\x5e\xfb\xf0\x1b\x68\xeb\x38\x4e\xd5\xdd\x45\x63\x94\xf2\x7d\x50\xfe\x54\xd8\x04\x11\x91\x55\x04\xd7\xe5\xad\x93\x26\xd4\x75\xec\x1f\xaa\x7e\x8b\xb8\x8e\x99\x49\xbb\xb8\x36\x0c\xb5\xa3\x5c\xa3\x4a\x24\xbc\x2e\x80\x44\xd4\x4c\x45\xd8\xb9\x44\xd7\x05\xa8\x19\xfa\x12\xe1\xd0\x36\xca\x6e\x06\x4d\x0b\xb7\x82\xb8\x2e\xa4\x42\x8c\x88\xf0\x4f\x48\x16\x8d\x4d\xb3\x0a\xee\xf5\x42\x7b\x7a\xed\x11\x1e\xbc\x6a\xec\x03\x00\x69\x17\x2f\xe0\x07\xd6\x17\x65\x82\x1e\x58\x77\xad\xf8\x0e\x87\xbe\x7c\xc8\x05\x16\x50\x14\xa3\x7c\x88\x74\xc4\x4e\xe8\xbc\xaa\xbc\x15\x19\x49\xc9\xf3\x4f\x44\xa2\x5f\x21\xa2\x7a\x3a\x99\x79\x64\x95\xb6\x5e\x38\x52\x7e\xe4\xce\x3b\x29\xbd\xa5\x75\x8d\xcc\x90\x90\x4a\xd9\xa0\xac\x29\xe5\x34\x11\x65\x9c\x82\xd1\xd1\x7d\x9b\x39\x89\xcc\xb0\xee\x9f\xe6\x70\xe0\x5c\xb2\x7a\xf8\x39\x27\xe2\xac\x07\x02\x25\x49\xd2\x08\xe6\x78\xe0\x52\x12\x61\xca\xd9\x8d\x89\x8e\x51\x73\x12\x4a\x97\x04\xa0\xa5\xa4\xc0\x4f\xf7\xed\x65\xe9\x29\xe4\x33\x06\x90\x92\xf3\x19\xc3\xbe\x08\xa7\x31\x00\xe6\x72\xcf\x20\x57\x31\x78\x26\xce\x19\x64\x30\xe8\x39\x01\x48\x29\x53\x02\x3f\x22\x06\xcd\x15\x1e\x67\x11\xc8\xbb\x29\xe4\x2a\x03\xbd\x12\x74\xda\x42\x72\xda\x44\x9b\xf7\xa4\x3e\xe9\xff\x81\xf5\x0a\x26\x8e\xb9\xa1\x5d\xc0\x31\x37\x17\x29\xef\xfd\x37\xc6\x16\x91\x49\xa5\xf7\xab\x0f\xec\x25\xd2\x4b\x1e\xfd\xc5\x1c\x03\xce\xa3\xd1\x94\xd9\x8f\xa3\x4b\xb0\x4f\x6d\xa2\xf6\xd7\x08\xb0\xf4\xc4\xfb\x28\xb3\xdc\x80\xb5\x94\xbc\x3f\xd1\xf4\x77\xdf\x2d\x21\xdf\xec\x37\xda\x2c\xed\x8e\x1a\x4c\x2c\xad\x45\x24\xc9\x5d\xd4\x90\x7b\xd8\x3b\xa1\xf1\xb7\x22\x46\x4f\xc6\x0d\x83\x84\x7b\xdf\x76\x3b\x70\x3d\x71\xcc\x8e\x26\x62\x65\xff\x91\x31\xe1\x90\x1b\x32\x14\xf7\x78\x14\x9d\xe8\x9a\xdc\x87\x37\x2a\x12\x14\x34\x63\xdf\xd4\xd4\x4e\x75\x5c\x97\x75\x79\x3c\x1e\x53\x32\xeb\x4f\x3b\xea\x4f\x21\x15\x6a\x3c\x9f\xf6\xf3\xa1\x7f\xda\x4f\xc3\x18\x98\xdf\xce\xe8\x2f\xfe\x5a\xa1\x9a\x39\xb2\x7d\x8f\x95\x70\x6f\xd6\x7c\x55\x40\x03\x04\x83\x17\x08\x18\xfa\xc3\x42\xf7\xaa\xe1\x13\xb7\x95\xf8\x16\xb7\xec\xc0\xf7\xf5\xb4\x0a\x2f\x73\xcb\x7a\xb8\x9e\x11\x44\xed\x81\xd7\x86\x1c\x3a\xab\x2f\xb3\x5f\x56\xcd\x4c\xda\x77\xbb\xc6\x8a\x63\xe2\xcd\xe4\x3c\x95\xdf\xb9\x35\xe9\x8e\xfe\xca\xbc\x36\xfa\x3f\x01\x00\x00\xff\xff\x0c\x3c\x9d\x92\xb1\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2481, mode: os.FileMode(438), modTime: time.Unix(1518512764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xcd\x6e\xe4\xca\x6e\xde\xcf\x53\x34\x9c\xc5\xdd\x1c\x5b\xf5\xff\x83\xe0\x6e\x92\x4d\xb2\x49\x02\x9c\xbb\x3b\xb8\x18\x90\x2c\x96\xba\xce\xa8\x25\xa5\xa4\xf6\xd8\xe7\xe9\x03\xb5\xed\xee\xb6\x5b\xe3\x11\x06\x59\xd9\x45\x52\x5d\x5f\xb1\x48\x7e\x2c\xfe\xcb\xee\x1f\xfb\x32\xed\x72\xe9\x78\x57\xa6\x1d\x1c\xe7\xa1\xe5\x9e\x2b\xcc\x9c\x7e\xdb\xa5\x61\xd7\x0f\xf3\x8e\x53\x99\xff\x75\x47\x7b\xe8\x5b\x9e\x76\x07\x78\xde\x21\xef\x8e\x7d\x1a\x7a\xde\xe1\xf3\x6e\xde\xf3\xae\xe7\xa7\x79\xf7\xb7\xc4\xe3\x8e\xfb\xe9\x58\xf9\x6f\x0f\x5f\xbe\x7c\xf9\xe3\x8f\xb1\x0e\x7f\x32\xcd\xd3\x3f\xff\xf9\x65\xb7\xc3\x0a\x3d\xed\x77\x7f\xdf\xdd\x1d\x60\x9a\xb9\xde\x7d\xd9\xed\x7a\x38\xf0\x22\x69\xcb\xbc\x3f\xe2\x03\x0d\x87\xe6\xbf\x86\xc4\xff\x53\xcb\x81\x9b\x3f\xa7\xa1\x1f\x61\xde\x2f\x86\x23\xd0\x37\x58\xb6\xff\xfb\xee\x8f\xbb\x87\xbb\xe5\xf7\x2a\x3f\x96\xa9\x0c\xfd\xf2\x7d\x30\x46\xe8\xc4\xc9\x1a\xa3\x55\xa0\x18\x91\xb5\xf1\xca\x2b\xef\x9c\x97\x3e\x32\x67\xa5\x21\xca\xbb\x1b\x54\x2b\x08\x7e\xdf\x0f\x63\xc9\xcf\xcd\x04\x15\x0e\xb0\x61\xf7\x2c\xa3\xd3\x5a\x28\x2d\x39\x38\x4f\x41\x78\xed\x4d\xf0\x9c\xc8\x90\xb6\x52\xa1\x34\x5a\x5a\x15\xb7\xed\x5e\xea\x71\x9c\xb8\x6f\xba\xa1\xad\xc7\x69\xc3\xf6\xc9\x05\xa5\xa4\x0e\x26\x70\x72\x81\x04\x28\x27\x08\xb4\x4f\x2e\x25\x0b\xc4\xc1\x28\x9d\x2d\x9e\x4e\xf2\xc8\xf5\xed\xb3\x47\xf9\x20\x1e\xcc\x26\x4c\xff\xf8\xcf\x7f\xfb\xf7\xff\xfe\x7d\xc8\xf3\x77\xa8\xdc\xe4\x6e\x68\x87\x7b\xea\xca\x47\x6c\x5f\x76\xbb\xdd\xee\x8e\xfb\xc7\xbb\xdf\x5e\xfe\x3d\xce\xa5\x5b\x8c\x3e\x22\x46\x1d\x9c\x06\x2d\x42\x0c\x21\x28\x0f\x4a\x06\xe9\x44\x70\x92\x74\x56\x9c\xbc\xc7\x00\x16\x25\xff\x3a\xb8\xa1\x9f\x6b\xc1\x75\x80\x40\x73\x19\xfa\xc5\xf2\xfb\x1b\xd0\x2b\x51\x93\x38\x97\xbe\x2c\xeb\x35\x2d\x3f\xcd\xdc\x4f\x3f\x50\x96\x7e\x9a\xa1\x27\x5e\xd3\x1d\x86\xc4\xdd\x9a\x62\xac\xc3\x63\x49\x5c\xd7\x74\x13\xd5\x32\xce\x4d\x6e\xdb\x61\x5a\xd5\x73\x7d\x2c\xeb\xfb\x4d\xc7\x71\x1c\xea\xbc\xa6\x9a\xf9\x94\x7f\x57\x9a\xc7\x32\x3f\x2f\x01\x77\x23\xab\x3c\x76\xcf\x2b\xd2\xe9\xfc\xc3\xa7\x73\x35\x53\x39\x8c\xdd\x19\xc7\x5c\x4b\xdb\x72\x3d\xd9\x35\x34\xd4\x69\x2d\x08\xb2\x4e\xc6\x27\x41\x3e\x5a\x93\x98\xa4\xb5\x89\x84\xe0\x40\x4e\x9b\x90\x43\xcc\x00\x56\x08\x58\xc9\x9a\x4b\x25\x49\x3c\xfe\xa0\x8c\xac\x45\x45\xf7\xc3\x88\x18\xc7\x37\xe8\x34\xf4\xb9\xb4\x97\x55\xe5\xe6\xc5\x75\x37\xa2\xc5\x13\xef\x84\x09\x66\x78\x27\x38\xc0\x38\x5e\xfc\x7c\x12\xbd\x7a\xe6\x4d\xc6\x7d\x5b\x7a\x7e\xbf\x6a\xea\xb1\xef\x2f\x26\xdd\x70\xfd\xc1\x8f\x32\x4a\xa1\xcc\x9e\x18\x0d\x32\x91\x02\x8d\x89\x75\x66\xcb\xd1\xb3\x21\x07\xa0\x35\x2a\x92\x02\x7f\x21\xa3\x0e\x30\xed\xbb\xd2\xb7\x3f\xc8\xf6\xa7\xf9\xc5\xbb\x67\x9f\x34\xe3\x62\xfc\xdb\x47\xf5\x5b\x4c\xb4\x43\x2d\x5d\x07\x87\xe3\xd3\x07\x5f\x74\x05\x1b\x1a\xfa\x74\x4a\xbd\xe9\x5a\xfa\xa3\x43\x6b\xa1\x8c\x8c\x19\x5d\xa6\x1c\xa3\xc3\x0c\x06\x50\x21\x59\x93\x84\xcc\xa8\x22\x28\x32\x52\xe5\x4d\x87\x86\x11\x68\xcf\xcd\xbc\xaf\x25\xcf\x37\x55\x77\x81\xb1\x1c\xe2\x45\xfb\x11\x88\x80\x60\x18\x58\x26\x54\x01\x10\x2d\x6b\x66\xaf\x05\x87\x0c\x46\x80\xb4\x86\x1c\x4b\x11\xfd\x26\x20\x09\x1e\x99\xda\x7d\xd3\x0e\xf7\xd3\xc8\xdf\x6f\xa0\x9c\x84\x1f\x11\x30\x25\x06\x24\x67\x4d\xb4\x29\xab\xc4\x14\x6d\xf2\x64\xc0\x90\x66\xa1\x64\x14\x5a\x68\xcb\xf6\xb3\x64\xfa\x94\x96\xf9\xd5\x3f\xed\x70\x5f\x79\x2a\x5d\xe1\x9e\x9e\x6f\xb0\x61\x65\xf8\xc6\xf5\x16\x5e\x8e\x00\xe0\x19\x02\x26\x65\x4c\x30\x2a\x42\x96\xe0\x3d\x65\x23\x51\xa1\x46\x6d\x30\x25\xf7\xff\x01\xef\x89\x6b\x81\xee\x7e\xea\x61\x1c\x6f\x11\xde\xd2\x27\x62\xb4\x96\x85\xc4\xa8\x8d\x03\x92\x31\x91\x8a\x8c\xd2\xd9\xe0\x28\x8a\xc4\x29\x46\x88\x81\x36\x5d\xde\x1b\x8e\xff\x3d\xf2\x91\x37\x6c\x6e\x0c\x51\x10\x96\xb2\xd4\x4a\x58\xb4\x36\xbb\xc8\xd2\x20\xa1\x8b\xc1\xf9\x24\x81\xa3\xca\x31\xdc\x72\xb7\x7c\x10\x9b\x10\x2d\x75\x6f\x68\xf3\x61\x6e\x5e\xfe\x6c\x00\xa5\xa3\x00\xf4\x51\x5b\x66\x15\x98\x1c\xaa\xe0\xb4\x33\x88\x10\xd1\xa4\xe4\x8c\x14\x84\x3a\xd9\x8f\xa0\xc4\x83\xde\x0c\xaa\x1d\x16\xe2\x9b\x07\x3c\xe6\xf5\xc2\x52\x86\xb7\x12\x70\xb2\x5b\xcb\xff\x64\x52\x40\x1b\x33\x04\x0e\x52\xa9\x94\x42\x72\x51\x0b\x45\xc4\x31\xa3\xf2\x11\xc9\x09\xed\xc2\x46\x48\x1d\xf4\xed\x4f\x40\xbd\x40\xb9\xc6\x45\xf7\x2d\xf7\xf7\xed\xd0\x24\x7e\x21\xeb\xe1\x5c\xd0\xc6\xf9\x79\xe4\xe9\xfd\xaa\x81\xfe\xf9\x83\x24\x1d\x2b\x5c\x13\xcc\xab\x78\x2e\x07\x9e\x66\x38\x8c\x6b\x27\x97\x6c\x23\x7a\x8f\x56\x61\x0e\x6c\xd0\x98\x08\xd6\xb3\xcb\x3e\x66\x25\x95\x72\xc9\x7a\x19\xcc\xaf\xa7\xfb\xab\x37\x36\x27\x91\xb5\x1a\x9c\x91\xc6\x0b\x13\x1d\x2a\xad\x3c\x20\xc1\xc2\x38\xda\xe9\xe8\x30\xc5\xc0\xc6\xd2\xb6\x16\xf8\x95\x22\x16\x36\x98\xf9\x69\x4b\xc4\x4a\x06\x65\x75\xf0\x39\xbb\xec\x82\x09\x3a\xa6\xa0\xbc\xf3\x24\xbd\xd6\x39\x9b\x64\x92\xb4\x49\xac\xb4\xc0\xdb\x9e\x04\x6f\x88\x0e\xc7\xa7\x2d\xce\x00\xb4\xca\x66\x93\x51\x3a\x1f\x58\x46\x0f\x6c\xa3\x11\x92\xa3\xb0\x22\x83\x40\x47\x68\x73\xfa\xe5\xdb\xf9\x13\xc6\x05\xd3\xef\xa7\x80\xdb\x00\x88\x00\x30\x0a\x69\x2c\x0a\xab\xbd\xb3\xda\x21\x02\x6a\xad\xb4\x54\xd9\x04\xa9\xa4\xd2\x0b\xcc\x4d\xbe\xf8\xf3\xb8\x14\xff\x89\xf6\x87\x92\xe6\x66\x3f\xcf\x63\x1d\x8e\xaf\x58\x7f\x82\x83\x25\xc6\xa0\x02\x52\x64\x1b\x85\x41\x60\x12\xd6\x9f\x08\x52\x44\x02\x23\x32\xfb\x0c\xbc\x52\x43\x36\x3a\xe6\x5b\xdd\x5e\xe5\x30\x18\xd6\x02\x28\x59\x69\x01\x12\x19\xf4\x41\x43\x32\x39\x07\x0d\x39\x6b\x15\x23\xa6\xbc\x06\x66\x65\xe3\xae\xb4\xfb\x79\x9a\x79\xbc\xfc\x77\x3f\x57\x20\xae\xf7\xed\xb0\x5e\x4b\x1e\x2e\x8d\x61\xd7\x31\xcd\x43\x1d\xf1\xd2\xf5\xbc\xfe\xc8\xd7\xd7\x8e\xe3\xa3\xfc\x62\xfa\x62\xf0\x55\x7c\x8d\x5f\x55\xf3\xbe\x4d\x59\x7b\x79\x81\x0e\x08\x2c\xb3\x60\x92\x4c\x1c\x45\x54\x49\x5b\x44\x26\x44\x13\x3d\xb3\x36\x86\x90\x6e\x4b\xbb\xb4\x6b\xb5\x7d\xe3\xbd\x0c\x23\xf7\x8b\x3b\x4a\xdf\xbe\xbd\xcd\x16\x62\x1a\x70\x79\xc0\x6c\x0a\x1d\xb0\x2a\x2b\x6d\x94\x31\x51\x19\x97\x2c\x12\x29\xaf\xd9\x59\xc2\x44\x19\x6c\xf6\xc9\x91\xd3\xdb\x58\xfa\x0a\x4e\x83\x30\x15\xda\x7a\x55\xdf\x4b\xe5\x35\xb7\x7a\x64\x83\x48\x2c\x83\x4a\x5a\xb3\x15\x6c\x2c\x86\x94\x62\x94\x42\x1a\x8a\xe0\x21\x03\xa4\x6d\xaf\xed\x6b\x74\xd7\x8e\xfb\x29\xba\xa5\x56\x5e\x5e\x0d\xab\xbc\xa1\x9d\xc4\x48\xc9\x09\x64\x1f\xc9\x90\x06\x9f\x21\x06\x23\x51\x93\xd4\x8a\x8d\x10\xce\xc1\xb6\x42\xb0\x60\xfb\xab\x8c\xdf\x4a\xdf\xbc\xfc\xb9\x5f\xae\xf4\x02\xf8\x27\x68\x73\x07\xed\xfb\x20\x6e\x5e\xa9\x74\x21\x52\xe4\x75\xdd\xcb\x4e\xcb\x5b\xea\xac\xbf\x66\xd9\x1f\x5d\x90\x56\xac\x8d\x4d\xa8\x51\x20\x28\x48\x22\x67\xb4\x59\x68\x42\x63\x02\x5b\xd0\x31\x81\x10\x71\xa5\x01\x5d\x39\xf8\x58\xb8\x56\xa6\xa6\xfb\xcb\x6c\x88\x5c\x95\x29\x81\x21\xf4\x42\x06\x62\x61\x41\xd9\x68\x63\x52\x99\x45\xa0\xa0\x59\x6b\x15\xb3\x74\x71\x13\x37\x6d\xcc\xb7\x37\x84\x4f\x4f\xff\x01\xd3\xed\x00\xed\x45\xac\xd5\x6d\x96\x09\x21\x1c\x4a\x4d\x5e\xa9\xec\xb3\x54\xda\x05\x12\x02\x74\xd2\xa4\x80\x03\xc4\x18\x41\xd0\x46\x37\x7d\x6b\x1b\xae\xf5\xf5\xf9\xff\x33\x6a\x08\x41\xe6\x64\x43\xf2\x81\x85\xa1\xec\x92\x48\x2c\x95\xf4\x39\x78\xe1\x29\x10\x29\x65\x22\x6e\xcb\xef\x4a\x75\xf8\xde\xf1\xf3\x52\x63\x0e\x3c\xd7\x42\x9b\x20\xc8\x20\x59\x44\x8b\xc0\xd1\xd8\xa0\xb4\xd3\x46\x1b\x69\x0c\x39\x09\xd1\xd9\x85\x15\x1c\xdb\xcf\x08\xe1\xd4\x35\x3d\x0c\xb5\x6d\x9e\x1a\xaa\xcf\xe3\x7c\x93\xb2\x77\xd3\xb4\x6f\x66\xae\x87\xd2\x43\x77\xfb\x90\xcc\x44\xb0\x3c\x8f\x20\x24\x6f\x30\xa7\x44\x8a\xa2\x03\xe1\x35\x26\x05\x26\x29\xf0\xa0\xf8\xb3\x8e\xf6\x1a\x42\xcf\x37\x44\x78\x9e\x72\xcc\x57\xd5\x62\x21\x71\xf5\x6e\xd1\xec\x97\x8f\xde\x44\x25\xf5\xe7\xc9\x46\xe9\x67\xae\x3d\x74\x2f\x0d\x2a\xd7\x72\x49\xbe\x8e\x9f\x4e\xfd\x40\xc7\x4f\x97\x49\x10\xd0\x6a\x42\xa6\xe0\x1c\x65\xd2\x21\x12\x53\x0c\x36\xb9\x9c\x40\x05\x1b\xa3\x76\x60\xbd\x05\x6b\x41\x03\x7e\x16\x69\xd7\x27\x9d\x9e\x6f\x6e\xf8\x75\x60\xd2\x97\xa7\x4b\x71\xe8\xd3\xf0\x7d\x75\x18\x15\x74\x10\xd2\xc8\xc0\x72\x79\x50\xa0\x0c\x41\xb0\x76\x4b\x0f\x60\x83\x64\xb6\x46\x43\xd6\x8a\x60\x23\x9c\xb5\xb6\xf5\x42\xf6\x30\xf3\x35\xf7\xc3\xcc\x0d\x1e\x4b\x97\x6e\x5c\xbc\x68\x67\xc0\x1b\x79\xcb\xfd\xed\x75\x5c\xaa\xe9\x45\x56\x0b\xaf\xd9\x1e\xe9\xbc\xd7\x02\xfa\x08\xed\x19\xd0\xc4\x74\xac\xdc\x60\x49\xa5\x1e\xaf\x27\x7a\xd0\x4f\x79\xa8\x87\xf3\x20\xaa\x2f\x34\xa4\x17\xc3\x8f\x32\xea\x52\xfd\x28\xeb\x57\xbe\xad\xd0\xb7\x3c\x03\x76\xab\x11\xc2\x32\x02\x4b\x13\x5d\x0c\x06\x25\x39\x6b\x31\x08\x63\xc0\x59\x12\x7a\xa9\x49\x14\x7c\x48\x49\x7f\x76\x25\x43\xdb\xf1\xc3\xd5\xcd\xb4\xdc\x9f\x5f\x93\xb7\x77\xf3\x62\x0f\x63\x99\x1a\x18\x4b\x03\x7d\x3f\xcc\xf0\x6e\x1a\x75\x65\x51\x47\x6a\xa6\x19\xe6\xe3\x6a\x3c\x41\x90\x42\x66\x25\x29\xc7\xa0\xd9\x7b\x9d\x04\x49\xa9\x35\x23\x59\xa3\x8c\x8f\x4a\x08\xad\xe4\x67\x0d\xc1\x2d\xf8\x3a\xd2\x4f\x38\x15\xa1\x83\x9e\x2e\x33\xb5\xb7\xf5\xd2\xe5\xf0\x8d\xb0\x0e\xc7\x3e\xd5\x01\xcb\xd5\x70\x33\x5d\xd2\x99\x86\xbe\xe7\x8f\x83\xce\xca\x89\xfb\xb9\x40\x37\x5d\xa6\x96\x34\xa4\xab\x91\xdf\x02\xb3\xc3\x13\xda\xaf\x1d\x7e\x7d\x94\xcd\x81\xa7\x69\x01\xfc\xce\x62\xb8\x09\xd7\xb7\xf5\x37\xe6\x11\xba\xf2\x78\x06\x7c\xe0\x19\xae\x87\xab\x3d\x1c\xae\xf6\x1b\xf9\x72\xde\xca\xd3\xd0\x3d\xde\xae\x9b\x74\xb9\xc3\xb3\x6c\x84\x69\x9a\xf7\x75\x38\xb6\xfb\x73\xf4\xcf\x30\x4f\xd7\x8b\xe3\x79\x35\xc3\xf8\x2e\x19\x4e\xc3\xf5\xb5\x4a\xa2\x8c\x53\x52\xe8\x24\x45\x36\x64\x9c\x32\x6c\xd1\x0a\x90\x19\x96\x06\x16\xb5\x51\xe8\x9c\xfa\x24\x6c\xa7\xe1\x58\x89\xdb\x0a\xe3\xfe\xc4\x66\x57\xeb\x06\xc6\x31\xad\x30\xfa\x87\x30\x38\x27\xfa\xa9\x1d\x7a\x15\x7e\xe8\xcc\x6e\xc6\xf1\x11\x8c\xd6\x8e\x84\xb2\x46\x31\x62\x06\x21\x49\xfb\x68\x22\x26\x2f\xad\xca\x28\xb2\xb3\xf1\x44\xc0\x27\x07\x2e\xcc\x0a\xcb\xaf\x40\x0f\xdd\xf3\x5f\x5c\xef\xdf\x0e\xf0\x3a\x95\x3f\xcb\x2f\x5d\x8d\xfc\xb2\xdb\x95\x7e\x3c\xce\xd3\x7d\x2a\x2d\x4f\xf3\x62\x1e\xbd\x15\x4e\xaa\x14\x10\x02\x29\x54\x69\xe9\x86\x3c\x06\xef\x11\xc8\x4a\x24\xcf\xd6\x4b\x0a\xe0\x32\x8b\x8c\x14\x65\xe6\x94\x82\x94\x29\x2a\x6d\x28\x2d\x7b\xbd\x5c\xe9\x19\x41\x3b\x4e\xf7\x94\xa8\xbb\x52\x5d\x83\xf8\xbf\x00\x00\x00\xff\xff\x36\xe5\xbc\x3b\xf7\x1c\x00\x00")

func assetsDefgopkgLockBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgLock,
		"assets/defGopkg.lock",
	)
}

func assetsDefgopkgLock() (*asset, error) {
	bytes, err := assetsDefgopkgLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.lock", size: 7415, mode: os.FileMode(438), modTime: time.Unix(1519368647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xb1\x8e\xd4\x30\x10\x86\x7b\x3f\xc5\x28\x69\x59\xfb\x38\x51\x21\x6d\x01\x14\x88\x0a\x09\x28\x40\xab\x2b\x1c\x7b\xe2\x98\xc4\x1e\x33\x1e\x2f\x77\x6f\x8f\xb2\x7b\x1c\xc7\x2e\x69\x68\xa2\x68\xfc\xcf\xff\x7d\x76\x0f\xef\xa9\xcc\x41\x0b\xa5\x05\xf0\xde\xa6\xb2\xa0\xea\x55\x0f\x9f\x70\x44\x06\x21\x98\x44\x4a\x7d\x6d\x4c\xa0\xc5\xe6\xa0\x43\x94\xa9\x0d\x3a\x92\xf1\x58\x8c\x27\x57\xcd\x9f\x06\x3d\x49\x5a\x54\x0f\x23\x31\x78\x14\x1b\x17\xf4\xcf\x01\x9e\x5c\x4b\x98\xc5\x4a\xa4\xac\x4f\x1c\xc6\x1f\x2d\x32\x7a\xd8\xc3\xa1\x7b\x2c\x77\x94\x4c\xab\xc8\x46\xa6\x98\x83\x71\xc9\x9f\xff\xba\x3b\xd5\x43\x0c\x99\xb6\xf2\x85\xe9\x3b\x3a\x31\x65\x0e\x5f\xbb\x17\xd0\x0d\x51\x86\xe6\x66\x14\x4d\x1c\xae\x22\x6f\xd6\xcf\xb7\xb5\x54\xf5\x70\x38\x38\xca\x55\xd8\xc6\x2c\x77\x2b\x07\x20\xdb\x84\xb0\x87\x2d\x4a\x77\x0a\x1d\x91\x6b\xa4\xbc\xe6\x5e\xea\x1b\x7d\xd3\xfd\x67\xdb\xed\xb9\x6e\x60\x9b\xdd\xb4\xe6\x3c\x1e\xcf\xa3\x4a\x8d\xdd\xe5\x6a\x7a\x18\x89\xe7\xe7\xcb\x27\x2a\x1d\x91\x39\x7a\xdc\x66\xde\x9b\x87\x2b\xf1\x5b\xfd\xea\x49\xbc\x70\xcb\xf8\xb8\x4d\x79\x17\x08\xf6\x30\xda\xa5\xe2\x69\x14\x68\x27\x58\xa5\xc2\x1e\x84\xdb\x79\xd6\x72\xab\xe8\x77\xc5\xba\xd9\x06\x7c\x3a\x52\xea\xe2\x11\xfe\xbe\x5c\xe9\xd4\x3f\xfd\xbe\x7c\x78\xfb\xee\xe3\x67\x1a\xe5\xa7\x65\x34\xe3\x42\x81\x76\x4b\x1c\x3a\xa5\x7e\xab\x5d\x5b\x6c\x3a\xfc\x0a\x00\x00\xff\xff\xb1\xe6\x45\x3e\xde\x02\x00\x00")

func assetsDefgopkgTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgToml,
		"assets/defGopkg.toml",
	)
}

func assetsDefgopkgToml() (*asset, error) {
	bytes, err := assetsDefgopkgTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.toml", size: 734, mode: os.FileMode(438), modTime: time.Unix(1519368647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\x25\x40\xbb\x15\x41\x40\x4b\x27\x89\xa9\x44\xaa\xe4\x39\x81\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xd7\x01\xe2\xc9\xe0\xfd\x1f\xbf\xfb\x48\xea\xed\xf2\x82\x10\x42\x82\x6b\x1d\xa6\x90\xb3\x60\x45\x82\x14\xb1\x58\x51\xfa\xac\xa5\xb8\xad\x57\xef\xa4\x4a\x68\xa4\x58\x8c\xb7\x9f\x3e\xd3\x7a\xed\x2a\xb8\x69\x4c\x71\x5b\x40\x69\x27\xd7\xcf\x10\x62\xb7\xac\xe0\xf7\x86\x2b\x88\x82\x15\xf9\x59\x2f\x55\xcb\x39\xd3\x69\xc6\x45\xf2\xd4\x04\xbc\xe9\xc9\x12\x86\xf0\xca\xb6\x41\xbd\xf4\xd8\x7a\x2a\x94\x2c\x40\x21\x07\x1d\xac\xc8\x9b\xc7\x97\x21\x35\x72\xd3\xa8\xb8\x48\x82\xbd\x74\x67\x8b\xeb\xb6\x37\x6b\xeb\xc4\xf6\x1a\x3b\xb1\x60\x39\x0c\x6d\x2a\xc1\x0b\x28\xcd\xa5\xb0\xca\x42\x29\x62\x9e\x6c\x14\x43\x2e\x85\xb6\xaa\xa0\xe2\x49\x02\xca\x2e\x84\x17\x10\xf8\x94\x32\x11\x65\x7e\x95\x8c\x8b\x5f\x3a\x30\xc5\x8f\xc3\x0a\x5d\xbd\x37\x6b\xb4\x8a\x88\x77\x03\xda\xdf\xce\xd7\x9f\xb9\xfd\x46\x5c\x17\x19\xdb\x3e\x2d\x92\x74\xeb\x9c\xe7\x2c\x59\xc0\x3b\xe8\x50\xf1\x02\x97\x68\xcb\x00\x72\x6e\xf7\x1c\x21\xf7\xc8\x2b\x9d\x6b\x05\x71\x99\xc2\x15\x8d\x20\xe6\x82\x57\x3e\xa9\x11\xc2\x92\x97\x2b\x37\xa3\x2a\xa6\x54\xc7\x0e\xa3\x45\x0d\xe6\x60\x89\xa2\x8c\x10\x27\x2c\xaa\x9e\xdc\xe5\x2a\x2a\xfd\x9f\xa4\x9c\x8e\xc8\x96\xa8\xa5\x71\x3e\x7b\x21\xe6\xd2\xd0\x4f\xc0\xa2\xa8\x4a\x80\x65\x0f\x7d\xee\x8c\x59\xa6\xa1\x77\xfe\xd4\x7f\x5b\xeb\xa0\x97\xf8\xe0\x90\x33\x27\xe7\x64\x47\x54\xe5\xd6\x26\xd0\x80\xc8\x45\x72\xa6\x27\x47\x63\xf5\x7e\xb8\xb7\x6b\xe7\xb8\x63\xfb\x0e\x77\x6a\x0e\xe0\xf9\x06\x67\x34\x65\xf2\x37\xe0\x2d\x4b\xff\x3a\x03\xfd\x3b\x58\x3b\xad\x1f\x00\x27\xb6\xfe\x0c\xad\x3e\x00\xfe\xde\x00\x6e\x5e\x16\x16\x81\xf9\x08\x60\xa5\x80\xfb\xd8\x6e\xef\xda\x19\x7f\xd4\x9e\x5a\x0c\x0a\x44\x38\x4c\xa1\x4b\x65\x1a\x56\x8e\xcc\x62\x7f\x86\x1e\x90\xc6\x59\x0e\xf9\x92\xf3\x58\x30\xc5\x7c\x37\xaa\x73\x9c\x46\x5b\x1d\x7b\xcc\xcd\xdf\xfd\x0e\x47\x47\x77\x69\x2a\x74\x19\x32\x97\x8f\x4a\x81\x47\x5e\x71\x79\x01\x76\x60\xde\x95\xd9\x18\xb2\xcd\xdc\xbc\x2a\xc4\xd2\x10\xb7\xb6\xeb\xe6\x4d\x9a\x3a\xa7\x87\xf2\xe2\x68\x34\x54\xfd\x68\x38\x30\x96\xc7\x21\x69\xb0\xc3\x36\x19\xb6\xdf\xd1\xf4\x8a\xd2\x84\x63\xba\x59\xdf\x85\x32\xa7\x3f\xbe\x7d\xf9\x7a\xff\x5d\xc6\xf8\xca\x14\xd0\x38\x93\x89\xbc\x0d\xa5\x40\xc5\xd7\x74\x9d\xc9\x35\xcd\x99\x46\x50\x94\x85\x25\xfa\x4a\x85\xd7\xde\x93\xa6\xf9\xf2\x76\xf7\xac\x9d\x0c\x47\xec\x03\xe4\xeb\xc5\xc4\xb3\xcc\xe1\x7d\xbe\x93\xb1\x7a\x74\xce\x7d\x2c\x7a\xbf\x94\x45\x5c\x17\x0c\xc3\x14\x8e\xbf\xea\x4d\x78\xc8\x9a\xef\x4a\xd7\x66\x4c\x79\xee\xce\x4a\xa3\xbd\x26\x9c\x32\x77\x3f\x6d\x92\xe9\xd4\x59\xa9\xfa\x3f\xc1\x10\x0f\x0d\x92\x43\xa8\xb0\x52\xe6\x13\x58\x83\x1c\xc4\x52\x64\x84\xa9\x48\xbf\xc4\xff\x11\x9b\x8b\x62\x83\x0f\x23\xf7\x06\x4b\xfc\x09\xbb\xdc\x59\x1c\x7e\x9d\xb0\x05\x9c\x54\x2f\x71\x93\xe4\x04\xb1\x8b\x5e\x17\xa3\xca\xfa\xef\xee\xf2\x62\x77\x79\xf1\x27\x00\x00\xff\xff\x36\x63\x4c\x69\xaf\x19\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6575, mode: os.FileMode(438), modTime: time.Unix(1518512764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt": assetsBannerTxt,
	"assets/defGopkg.lock": assetsDefgopkgLock,
	"assets/defGopkg.toml": assetsDefgopkgToml,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt": &bintree{assetsBannerTxt, map[string]*bintree{}},
		"defGopkg.lock": &bintree{assetsDefgopkgLock, map[string]*bintree{}},
		"defGopkg.toml": &bintree{assetsDefgopkgToml, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


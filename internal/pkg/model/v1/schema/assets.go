// Code generated by go-bindata.
// sources:
// schema.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xbd\x6e\xdb\x30\x10\xde\x03\xe4\x1d\x08\x25\x63\x12\x76\xe8\xe4\xb1\x9d\x3a\x25\x40\xbb\x15\x41\x40\x4b\x27\x89\xa9\x44\xaa\xe4\x39\x81\x11\xf8\xdd\x0b\xfd\x5a\x54\x49\x4a\xae\x25\xd7\x01\xe2\xc9\xe0\xfd\x1f\xbf\xfb\x48\xea\xed\xf2\x82\x10\x42\x82\x6b\x1d\xa6\x90\xb3\x60\x45\x82\x14\xb1\x58\x51\xfa\xac\xa5\xb8\xad\x57\xef\xa4\x4a\x68\xa4\x58\x8c\xb7\x9f\x3e\xd3\x7a\xed\x2a\xb8\x69\x4c\x71\x5b\x40\x69\x27\xd7\xcf\x10\x62\xb7\xac\xe0\xf7\x86\x2b\x88\x82\x15\xf9\x59\x2f\x55\xcb\x39\xd3\x69\xc6\x45\xf2\xd4\x04\xbc\xe9\xc9\x12\x86\xf0\xca\xb6\x41\xbd\xf4\xd8\x7a\x2a\x94\x2c\x40\x21\x07\x1d\xac\xc8\x9b\xc7\x97\x21\x35\x72\xd3\xa8\xb8\x48\x82\xbd\x74\x67\x8b\xeb\xb6\x37\x6b\xeb\xc4\xf6\x1a\x3b\xb1\x60\x39\x0c\x6d\x2a\xc1\x0b\x28\xcd\xa5\xb0\xca\x42\x29\x62\x9e\x6c\x14\x43\x2e\x85\xb6\xaa\xa0\xe2\x49\x02\xca\x2e\x84\x17\x10\xf8\x94\x32\x11\x65\x7e\x95\x8c\x8b\x5f\x3a\x30\xc5\x8f\xc3\x0a\x5d\xbd\x37\x6b\xb4\x8a\x88\x77\x03\xda\xdf\xce\xd7\x9f\xb9\xfd\x46\x5c\x17\x19\xdb\x3e\x2d\x92\x74\xeb\x9c\xe7\x2c\x59\xc0\x3b\xe8\x50\xf1\x02\x97\x68\xcb\x00\x72\x6e\xf7\x1c\x21\xf7\xc8\x2b\x9d\x6b\x05\x71\x99\xc2\x15\x8d\x20\xe6\x82\x57\x3e\xa9\x11\xc2\x92\x97\x2b\x37\xa3\x2a\xa6\x54\xc7\x0e\xa3\x45\x0d\xe6\x60\x89\xa2\x8c\x10\x27\x2c\xaa\x9e\xdc\xe5\x2a\x2a\xfd\x9f\xa4\x9c\x8e\xc8\x96\xa8\xa5\x71\x3e\x7b\x21\xe6\xd2\xd0\x4f\xc0\xa2\xa8\x4a\x80\x65\x0f\x7d\xee\x8c\x59\xa6\xa1\x77\xfe\xd4\x7f\x5b\xeb\xa0\x97\xf8\xe0\x90\x33\x27\xe7\x64\x47\x54\xe5\xd6\x26\xd0\x80\xc8\x45\x72\xa6\x27\x47\x63\xf5\x7e\xb8\xb7\x6b\xe7\xb8\x63\xfb\x0e\x77\x6a\x0e\xe0\xf9\x06\x67\x34\x65\xf2\x37\xe0\x2d\x4b\xff\x3a\x03\xfd\x3b\x58\x3b\xad\x1f\x00\x27\xb6\xfe\x0c\xad\x3e\x00\xfe\xde\x00\x6e\x5e\x16\x16\x81\xf9\x08\x60\xa5\x80\xfb\xd8\x6e\xef\xda\x19\x7f\xd4\x9e\x5a\x0c\x0a\x44\x38\x4c\xa1\x4b\x65\x1a\x56\x8e\xcc\x62\x7f\x86\x1e\x90\xc6\x59\x0e\xf9\x92\xf3\x58\x30\xc5\x7c\x37\xaa\x73\x9c\x46\x5b\x1d\x7b\xcc\xcd\xdf\xfd\x0e\x47\x47\x77\x69\x2a\x74\x19\x32\x97\x8f\x4a\x81\x47\x5e\x71\x79\x01\x76\x60\xde\x95\xd9\x18\xb2\xcd\xdc\xbc\x2a\xc4\xd2\x10\xb7\xb6\xeb\xe6\x4d\x9a\x3a\xa7\x87\xf2\xe2\x68\x34\x54\xfd\x68\x38\x30\x96\xc7\x21\x69\xb0\xc3\x36\x19\xb6\xdf\xd1\xf4\x8a\xd2\x84\x63\xba\x59\xdf\x85\x32\xa7\x3f\xbe\x7d\xf9\x7a\xff\x5d\xc6\xf8\xca\x14\xd0\x38\x93\x89\xbc\x0d\xa5\x40\xc5\xd7\x74\x9d\xc9\x35\xcd\x99\x46\x50\x94\x85\x25\xfa\x4a\x85\xd7\xde\x93\xa6\xf9\xf2\x76\xf7\xac\x9d\x0c\x47\xec\x03\xe4\xeb\xc5\xc4\xb3\xcc\xe1\x7d\xbe\x93\xb1\x7a\x74\xce\x7d\x2c\x7a\xbf\x94\x45\x5c\x17\x0c\xc3\x14\x8e\xbf\xea\x4d\x78\xc8\x9a\xef\x4a\xd7\x66\x4c\x79\xee\xce\x4a\xa3\xbd\x26\x9c\x32\x77\x3f\x6d\x92\xe9\xd4\x59\xa9\xfa\x3f\xc1\x10\x0f\x0d\x92\x43\xa8\xb0\x52\xe6\x13\x58\x83\x1c\xc4\x52\x64\x84\xa9\x48\xbf\xc4\xff\x11\x9b\x8b\x62\x83\x0f\x23\xf7\x06\x4b\xfc\x09\xbb\xdc\x59\x1c\x7e\x9d\xb0\x05\x9c\x54\x2f\x71\x93\xe4\x04\xb1\x8b\x5e\x17\xa3\xca\xfa\xef\xee\xf2\x62\x77\x79\xf1\x27\x00\x00\xff\xff\x36\x63\x4c\x69\xaf\x19\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 6575, mode: os.FileMode(438), modTime: time.Unix(1526963839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

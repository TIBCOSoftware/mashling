// Code generated by go-bindata.
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
// DO NOT EDIT!

package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xc9\x6e\xdb\x30\x10\xbd\xfb\x2b\xa6\x84\xe1\x5c\x02\xc1\x5d\x4e\x06\x7c\x68\xd2\x02\x45\x8a\x02\x3d\xa4\xcd\xa1\xe8\x81\x96\xc6\x31\x63\x99\x24\xc8\x61\x52\xd7\xd1\xbf\x17\xa4\x24\x6b\xb1\xe4\xaa\x6e\x92\x9b\x28\xce\xf2\xde\x9b\x85\xbb\x11\x00\x4b\x84\xd5\x9c\xe2\x15\x9b\x81\x3f\x03\x30\xc9\x37\xc8\x66\xc0\x3e\xe0\x92\xbb\x94\x3e\x11\xe9\xaf\x9c\x08\x8d\x64\xe7\xb9\x85\x51\x8e\xd0\xb2\x19\xfc\x08\x67\x28\x3c\xc3\x9d\x25\xd4\xf5\xab\xe6\x75\x30\x11\x4b\x1f\x3e\x56\x72\x19\x39\x8b\x57\x37\xd7\x30\x9f\x03\x19\x87\x45\xfc\x2a\x16\x9a\x7b\x11\x07\x30\x57\x37\xd7\xdf\x79\x2a\x12\x4e\xca\xb4\xcd\x84\xd4\x8e\xf6\xf8\x6b\x17\xa4\xd6\x28\xbd\xf7\x78\xa7\xf9\x36\x55\x3c\x89\x56\xc8\x13\x34\xd1\x7b\x47\x2b\x65\xc4\x6f\x4e\x42\xc9\xac\x15\x10\x80\xad\x71\x9b\xfb\x05\x94\x77\x0f\xf4\x19\xb7\x19\x6b\x58\x65\xb5\x53\x76\x3e\x94\xed\xa5\x30\xb1\x13\x74\x61\x90\xaf\xd1\x0c\x20\xde\x74\x60\x27\x25\x2d\x24\x5e\xf2\xd4\x22\x3c\x3e\x42\x5d\xcc\xc8\xa0\xd5\x4a\x5a\x8c\xee\xfd\xaf\x01\x88\x7c\x43\x5c\xf0\x78\x8d\x32\x19\x5c\x09\x67\xd2\x9a\x9e\x8b\xdc\xfb\x9b\x49\x3b\xa4\x97\x48\x1f\x8d\x51\x86\xcd\x02\x90\x67\xd3\x1c\x26\x13\xa8\x51\xa9\x74\x28\x01\xc0\xab\x39\x9c\x9d\x0d\x2f\xcd\x50\x2d\x94\x46\x13\xfa\x2e\xc7\xe8\x24\x35\xeb\xfa\xd2\x34\xe7\x2f\x40\xd3\xa0\x45\x3a\x42\x72\xff\xfd\xb3\x0a\xcf\x4a\xa8\xa7\xae\x13\x4f\xfd\x2f\xad\x1e\x46\xa2\x4d\x09\x6b\xed\xd7\xba\x52\x8e\x7a\xe8\xc6\x2a\xf1\x6a\xbd\x9b\xbe\x3e\xe8\xe8\x84\x13\xef\x70\xa9\x65\x62\xe3\x5d\x27\xd0\xd6\xca\x69\x8a\xf6\x44\x7d\x32\x99\x40\xf3\x4f\x44\x46\x68\x8d\xbd\xab\xe0\xff\xe4\x79\x7b\x8a\x3c\x71\x0e\x10\x16\x05\xe6\x02\xe1\xd3\xa8\x53\x66\x09\xbd\xf0\xaf\x84\xde\x4c\xa7\x7d\x84\xd8\x78\xd7\x39\x78\x0b\x95\x1c\x7d\x4b\xaa\x59\x18\xd5\xff\xf8\x53\xa0\x51\xce\x66\x35\x16\x25\xb8\xfd\xd3\xdd\xf9\x5a\xb2\x04\x6d\x6c\x84\x2e\x67\xb2\xb0\x40\xb0\x6a\x83\x10\xde\x4a\x5b\x19\xd3\x56\x87\x50\x77\x0f\xc5\xdc\x16\x12\x1e\xe4\xea\x59\x0f\xed\x6c\x97\xad\x12\x96\x0b\xe6\x20\x61\xdc\x13\xcf\x22\x91\x90\xb7\xb6\x51\x0c\xb6\xc9\xcb\xc0\x78\xad\x4b\x7d\xa7\x13\xfe\xf2\x65\x63\xb7\xd5\xda\xc9\x8e\xd2\xe8\x7a\xd5\xda\x1c\xbe\xf0\x35\x02\x97\xb0\x22\xd2\x10\xf3\x34\x05\x52\xb0\x55\xce\xc0\xa2\xed\x59\xb2\xf1\xa6\x85\x7e\x23\x5f\xc3\x6c\xf4\x27\x00\x00\xff\xff\x3c\x5d\x70\x8f\x76\x09\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 2422, mode: os.FileMode(420), modTime: time.Unix(1535054972, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x4f\xdb\x4c\x10\xbe\xe7\x57\x8c\x56\x28\x27\xe4\xf0\xbe\xed\x29\x12\x07\xa0\x87\x96\xaa\x1f\x52\x51\x39\x54\x3d\x0c\xeb\x49\xbc\xc4\xde\xb5\x76\xc7\x80\x1b\xfc\xdf\xab\xdd\xd8\xf8\x03\x07\xd2\x94\x72\xb3\x77\x66\x67\x9f\xe7\x99\xaf\xf5\x04\x40\xc4\xca\xe5\xc8\x32\x11\x73\xf0\xff\x00\x42\x63\x46\x62\x0e\xe2\x1d\x2d\xb0\x48\xf9\x3d\x73\xfe\x15\x99\xc9\x6a\x71\xb8\xf1\xb0\xa6\x60\x72\x62\x0e\x3f\xc2\x3f\xd4\x37\x83\xcd\x31\xe5\x5d\x53\xdf\x1c\x5c\xd4\xc2\x87\x97\x46\x2f\xa2\xc2\xd1\xf9\xe5\x05\x1c\x1f\x03\xdb\x82\xea\xf8\x6d\x2c\xb2\x37\x4a\x06\x30\xe7\x97\x17\xdf\x31\x55\x31\xb2\xb1\x43\x37\xa5\xf3\x82\x1f\xf0\x77\x0c\x6c\x56\xa4\xfd\xed\x83\x75\x8e\x65\x6a\x30\x8e\x12\xc2\x98\x6c\x74\x52\x70\x62\xac\xfa\x85\xac\x8c\xae\x06\x01\x01\xc4\x8a\xca\xcd\xbd\x80\xf2\xfa\x96\x3f\x52\x59\x89\x9e\x57\xd5\xf9\xab\x0e\x77\x65\x7b\xa6\xac\x2c\x14\x9f\x5a\xc2\x15\xd9\x1d\x88\xf7\x2f\x88\xbd\x1e\xad\x25\x5e\x60\xea\x08\xee\xef\xa1\x2b\x66\x64\xc9\xe5\x46\x3b\x8a\x6e\xfc\xd1\x0e\x88\x4e\xa4\x17\xed\x14\xe5\x8a\x74\xbc\x73\x2e\x82\xc1\x8d\x58\x00\x84\x4c\x50\x6b\x4a\x3b\x8a\xd7\x27\x9f\x31\xa3\x81\xec\x7d\xe1\x5f\x36\x0d\x30\x9d\x42\x8f\x5d\x2b\x0e\x59\x6b\xf6\x48\xd7\xae\xea\x98\x9c\x6c\xa8\xc5\x0d\xc8\x42\x73\x3f\xd7\xaf\xcf\x33\x14\xcb\x3f\x26\x6a\xc9\x11\x3f\x41\xf3\xe1\xfb\x67\x1b\x5e\x34\x50\xf7\x1d\x32\x9e\xfc\x33\x0d\x30\xca\x3d\x28\x23\xe6\x21\xc6\xc0\x64\x0a\xde\x42\x57\x9a\xd8\xab\xf5\xf6\xe8\xbf\x47\x23\x26\x46\xc6\xf1\x76\x68\x5e\x12\x07\xeb\x51\xa0\xaf\xd1\x11\xd3\x29\xf4\x4f\x22\xb6\x2a\xcf\x69\xeb\x80\xf8\x3b\x79\xde\xec\x23\x8f\xdc\x00\x84\xab\x1a\x73\x8d\xf0\x65\xd4\x69\x5e\x09\xb5\xf0\xa7\x84\xfe\x3f\x3a\xda\x46\x48\x1c\xac\xc7\x5b\xef\xa9\xf5\xd2\x36\xc2\xa4\x7b\xe2\xff\x02\x87\xa6\x31\xdb\x9e\x68\x90\x3d\x6c\xf3\xd1\x05\x2a\x62\x72\xd2\xaa\xbc\x69\xc8\xda\x83\xc0\x99\x8c\x20\xac\x4f\xd7\x3a\x73\x99\x87\x50\xd7\xb7\x75\xd3\xd6\xfa\x3d\x7a\x6b\xcb\x6c\x18\xbe\x76\x36\xc8\x5f\x33\x5d\x1e\x3d\x28\xb7\xc4\x73\xc4\xac\xf4\xb2\xbf\x55\x44\xb6\xc9\x81\xc0\x4e\x89\xfa\x32\x67\xba\xf3\x39\x13\xcb\x76\xe6\x54\x4f\xd2\x18\x5f\x74\x43\x16\x9f\x70\x45\x80\x1a\x30\x78\x83\xc4\x34\x05\x36\x50\x9a\xc2\xc2\xd5\xf0\x6e\xc3\x68\x91\x9a\xa5\xf1\xf1\x6f\x14\x97\xcf\x11\xb2\x14\x3a\x75\xa9\x38\x29\xae\x22\x69\xb2\xd9\xc5\x87\xd3\xb3\x2f\xdf\xcc\x82\x6f\xd1\xd2\x2c\x43\x97\xa4\x4a\x2f\x67\x74\xc7\xb3\x10\x79\x86\x75\xe8\x59\xb3\x5a\xfb\x84\x27\xbe\x76\xaa\xc9\xef\x00\x00\x00\xff\xff\x5b\x9c\x1f\x99\x01\x0a\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2561, mode: os.FileMode(420), modTime: time.Unix(1535058158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json":    defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json":    &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// DefaultHttpPattern.json
// DO NOT EDIT!

package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x08\x21\xe8\x29\x30\xb2\x61\xa7\x00\x3d\x6c\xd8\x61\xe8\x30\x60\x87\x6e\x3d\x0c\x3d\x30\x16\xb3\xa8\x51\x25\x41\xa2\x5a\x78\x69\xfe\x7d\x90\x1c\xc7\x8a\xe7\x6e\xce\x6e\x96\xf8\x48\xbe\xf7\x44\x7a\x3f\x03\x10\x52\x05\x87\x5c\x6f\xc5\x0a\xd2\x19\x40\x18\x7c\x24\xb1\x02\xf1\x91\x36\x18\x35\x7f\x62\x76\x5f\x91\x99\xbc\x11\x8b\x16\xe1\x6d\x64\x0a\x62\x05\x3f\xf2\x19\x8e\x99\x39\x16\x98\x5c\x19\x3a\x0f\x67\x88\xda\xa4\xf2\xb5\x35\x9b\x2a\x06\xba\xb9\xbb\x85\xeb\x6b\x60\x1f\xe9\x58\xbf\xaf\x45\xfe\x49\xd5\x99\xcc\xcd\xdd\xed\x77\xd4\x4a\x22\x5b\x3f\x84\x29\xe3\x22\x9f\xf8\x17\x01\xb6\x3b\x32\x29\x7b\xbe\x77\xd8\x68\x8b\xb2\xda\x12\x4a\xf2\xd5\xfb\xc8\x5b\xeb\xd5\x2f\x64\x65\xcd\x41\x9c\x25\x1e\x8a\xd3\x61\x71\xa1\x8c\x0d\xea\x40\xf0\xf2\x02\x25\xe1\xca\x53\x70\xd6\x04\xaa\x9e\xd2\xd5\x04\xb9\xc9\xf4\x0f\x58\xef\xc8\xc8\xc9\x6a\xa3\xd7\xad\xd6\x4c\x69\xdd\x66\x7f\xf3\xfa\x6f\xf2\x4e\xdf\xf7\x7d\x17\xd1\xb1\xfd\xdf\x67\x84\xab\xab\x7f\xc9\xcf\x36\x0d\x95\x91\xf7\xd6\x8b\x55\xae\x31\x08\xd9\xc8\xaf\xa8\xae\xad\x4c\x8e\xbd\x5b\xbe\x59\x0c\x43\x12\x19\x47\x52\x8a\x4e\x62\xbe\x1f\x25\x3a\xb0\xec\xdc\xb4\xe9\x13\xd2\xb5\xc9\x6a\x2f\x55\xf4\x76\xb9\x7c\x4d\x91\x98\xef\x8b\x01\xe9\xed\x5d\x5b\xd9\x4c\x7b\xed\x59\x79\x93\x4e\x59\x46\x37\x81\xfd\xc3\x77\xe4\x4e\x3f\x85\xd1\x3d\x14\x92\x42\xed\x95\x4b\xcb\x94\x40\x47\x04\x41\xb0\x8f\x04\x79\x0b\x43\x0f\xe6\xc6\xe5\x52\x0f\xcf\xdc\x5f\x06\x62\x56\xe6\x67\x38\x33\x44\xec\xa8\x29\x46\xfa\xe1\x99\x3f\x53\x2f\xb0\x25\x7f\xf4\xff\x0f\xa2\x63\x1b\x34\xe4\xf9\x05\x77\x04\x68\x60\xcb\xec\xa0\x46\xad\x81\x2d\x34\x36\x7a\x58\x0f\x33\x3b\xd2\x09\xda\x12\x48\xed\xef\x67\x87\xd9\xef\x00\x00\x00\xff\xff\xd8\x12\x41\x12\x46\x05\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 1350, mode: os.FileMode(420), modTime: time.Unix(1534888717, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json": defaulthttppatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultHttpPattern.json": &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

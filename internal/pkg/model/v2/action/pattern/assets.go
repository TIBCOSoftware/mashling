// Code generated by go-bindata.
// sources:
// DefaultHttpPattern.json
// DefaultChannelPattern.json
// DO NOT EDIT!

package pattern

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaulthttppatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x66\x09\x23\xb9\x64\x85\xec\xb6\x27\x03\x3e\x34\x69\x80\x22\x6d\x81\x22\x48\x9b\x43\xd1\x03\x2d\x8e\x23\xc6\xb4\xa8\x92\x43\x27\xae\xa3\x7f\x2f\x48\x4b\x36\x2d\xcb\xae\xd2\x3a\x41\x6f\xa6\x39\xc3\x79\xef\x71\xf8\x34\x8b\x1e\x00\x13\xd2\x16\x9c\xd2\x8c\x0d\xc0\xaf\x01\x58\xce\xa7\xc8\x06\xc0\xde\xe2\x98\x3b\x45\xef\x88\x8a\x4f\x9c\x08\x4d\xce\x4e\x96\x11\x46\x3b\x42\xcb\x06\xf0\x35\xac\xa1\xca\x0c\x7b\x96\xb0\x88\xb7\x36\xb7\x43\x88\x1c\xfb\xe3\x53\x9d\x8f\x13\x67\xf1\x8a\x13\x7e\x90\x53\x49\x68\x60\x38\x04\x32\x0e\xab\x3a\xeb\x33\xd1\xcc\x64\x1a\x40\x45\xd1\xcd\x28\x99\x17\x8e\x56\x34\xa2\x0d\xd2\x13\xcc\x7d\xf2\xad\xd2\x23\xae\x1a\x79\x00\x4c\xf9\x03\x7d\x40\x7f\x11\x50\x99\xba\x48\xc9\x36\x42\xcb\x68\x55\x9e\x74\x25\x78\x79\x73\xdd\x81\xd8\xe5\xcd\xf5\x17\xae\xa4\xe0\xa4\x7f\x83\x59\x7f\x51\xf0\xb9\xd2\x5c\x24\x19\x72\x81\x26\x79\xe3\x28\xd3\x46\xfe\xe0\x24\x75\x5e\x6e\x53\x9e\xe0\x3c\x22\x7c\x77\x4f\xef\x71\x7e\x10\xb6\xe7\xd2\xa4\x4e\xd2\x99\x41\x3e\xe9\x74\xa3\x9b\x09\xec\x4f\x24\x1e\x73\x65\x11\x1e\x1f\x21\x16\x33\x31\x68\x0b\x9d\x5b\x4c\x66\xfe\xaf\x0e\x88\x7c\xc7\x9f\xf1\x74\x82\xb9\xe8\x7c\x13\xce\xa8\x48\xcf\xd1\x32\xfb\xb3\x51\x2d\xd2\xe7\x48\x17\xc6\x68\xc3\x06\x01\xc8\xb3\x69\x0e\x47\x47\x10\x51\x59\xeb\x50\x03\x80\x7f\x86\x70\x7c\xdc\xfd\x6a\xba\x6a\xa1\x0b\x34\xa1\xef\x96\x18\x5d\x4e\x9b\xf7\xfa\xd2\x34\x87\x2f\x40\xd3\xa0\x45\xda\x43\x72\xf5\xfb\xdb\xfa\x78\x56\x43\xed\xe4\x97\x91\xf3\x25\xc1\xb0\xae\x90\xa7\x19\xee\x6c\x68\x8c\x7a\xac\xb1\xa5\x1d\xed\xe0\x94\x6a\xe1\x25\x79\x7d\xfa\x6a\xab\x6d\x05\x27\xde\x92\x12\x2c\x9f\x93\xb3\x35\x46\x08\x20\xe1\xe2\x21\x45\x14\x28\xe0\x5f\xb8\xce\x10\x2a\xb9\x61\xae\x1d\x64\x7c\x86\x60\xf0\xbb\x43\x4b\x28\x40\x5a\xd0\x33\x34\x40\x19\x02\x57\x4a\xdf\xa3\x80\x40\x30\x61\x8d\x5a\xe5\x61\xdd\xd8\x77\xce\x2f\x9c\x22\x38\xca\x61\x95\xfd\xef\x09\xca\xd6\x95\x58\x7f\xd1\x0a\xb4\x7c\x0e\x85\x76\x3f\xb3\xcd\x9d\x84\x8c\x2c\x8a\xbf\xa1\x01\x57\x32\xa5\x4b\x80\x30\xaa\xb0\x57\x08\x0f\xa3\x52\x5d\x25\xf4\xc4\x53\x09\xfd\x7f\x7a\xba\x8b\x10\xeb\x2f\x5a\xfd\x6b\xa4\xc5\xde\x4f\xf2\xda\x52\x7a\xf1\x3f\x7e\x15\x68\xd4\x16\xb7\x76\x97\x1a\xdc\x6a\xc4\x6b\x9b\xa6\x98\x40\x9b\x1a\x59\xd4\xce\x16\xde\xb4\x6a\x06\xd1\xbc\x08\x27\xf8\x51\xa9\xde\xec\x45\x0a\x6e\x95\x6a\x9d\x6f\x9a\xb5\xaa\x08\x04\xab\xa7\x08\x61\xba\xb1\xdb\x35\xef\xee\x69\x7f\xad\x1d\x86\xde\xac\x76\xde\xe8\x96\xfa\x93\xb0\x55\x30\xdd\x71\x9e\x45\x22\x99\xdf\xda\x8d\x7b\x67\xd3\xe5\x8d\x33\x1e\x3d\x08\xff\xb8\x08\x1f\xc2\x90\x79\xbb\xfe\x50\x94\x7b\x69\xb4\xcd\x21\x4d\x0e\x1f\xf9\x04\x81\xe7\x90\x11\x15\x90\x72\xa5\x80\xb4\x37\x59\x03\xa3\x66\x66\xcd\xc6\x87\x56\xfa\xf5\x7c\xbb\x94\xbd\x9f\x01\x00\x00\xff\xff\x06\x80\xf2\x0f\x09\x0c\x00\x00")

func defaulthttppatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaulthttppatternJson,
		"DefaultHttpPattern.json",
	)
}

func defaulthttppatternJson() (*asset, error) {
	bytes, err := defaulthttppatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultHttpPattern.json", size: 3081, mode: os.FileMode(420), modTime: time.Unix(1537217429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultchannelpatternJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\x1a\x31\x10\xbd\xf3\x2b\x26\x56\x94\x5c\xd2\x25\xfd\x38\x21\x71\x48\xe8\xa5\xa9\xaa\x56\x4a\xd4\x1c\xaa\x1e\x06\xef\x00\x0e\x8b\xbd\xb2\xc7\xa4\x34\xd9\xff\x5e\xd9\xec\xb2\xec\x02\x09\x49\x5b\x6e\x78\x67\xfc\x66\xde\x1b\x3f\x9b\x87\x0e\x80\x48\x95\xcb\x91\xe5\x44\xf4\x20\xac\x01\x84\xc6\x19\x89\x1e\x88\x8f\x34\x42\x9f\xf1\x60\x82\x5a\x53\xf6\x0d\x99\xc9\x6a\x71\xb6\x4c\xb2\xc6\x33\x39\xd1\x83\x1f\x71\x0d\xe5\xe6\x18\x73\x4c\xf9\x7a\xa8\x19\x8e\x29\x6a\x14\x2a\x48\xa3\x47\x89\x77\x74\x75\x7b\x03\xfd\x3e\xb0\xf5\x54\xe2\xd7\x58\x64\xe7\x4a\xc6\x7e\xae\x6e\x6f\xbe\x63\xa6\x52\x64\x63\xdb\x69\x4a\xe7\x9e\x57\x14\xd6\x02\x6c\xa6\xa4\xc3\xee\xe3\x87\x1c\x17\x99\xc1\x34\x99\x10\xa6\x64\x93\x0b\xcf\x13\x63\xd5\x6f\x64\x65\x74\xd1\x02\x04\x10\x53\x5a\x2c\xf7\xc5\x2e\xef\xee\xf9\x33\x2d\x0a\xd1\xc8\x2a\xd6\x56\xc5\xd9\xbe\x6c\x07\xca\x4a\xaf\xf8\xd2\x12\x4e\xc9\xee\x41\xbc\xb9\x41\xbc\xaa\x68\x29\xf1\x08\x33\x47\xf0\xf8\x08\xeb\x62\x26\x96\x5c\x6e\xb4\xa3\x64\x1e\x3e\xed\xd1\xd1\x85\x0c\xa2\x5d\xa2\x9c\x92\x4e\xf7\x9e\x45\x0c\xb8\x2d\x11\x00\x21\x97\xa7\x2c\x80\x33\x39\xde\x18\x07\x80\x98\x63\xe6\x69\x95\xd0\x8a\x17\xff\x6d\x30\x70\x72\x02\x0d\xbe\xb5\x5c\x64\xad\xb1\x70\xd4\x87\xd3\xd3\xfd\xc7\xb7\xaf\x5a\x26\x27\x1b\xcf\xe6\xb2\x45\xaf\xb9\x39\xfb\x03\xb3\xec\x1f\x80\xa5\x25\x47\xfc\x04\xc7\xd5\xef\x9f\x35\xbc\xa8\xfa\x7c\xed\x8d\x13\x98\x3f\xe3\x86\xe8\x9a\x36\xa5\x28\x8b\xe8\x45\x8c\x56\xc8\x78\xde\x41\x57\x9a\x34\xa8\xf5\xe1\xfc\xed\xc6\x7d\x93\x22\xe3\x76\x6f\x54\x95\xc4\xf1\xc3\xd6\x46\x8b\xc3\x9a\xa1\x19\x49\xd8\xaa\x3c\xa7\x9d\xb7\xc6\xdf\xc9\xf4\xfe\x35\x32\xc9\x65\x83\x30\x2c\x7b\x2f\x3b\xfc\x37\x2a\x55\x55\xe2\x99\x78\x29\xa1\x77\xe7\xe7\x2f\x20\x54\xcd\x37\x70\xba\xf6\x52\x92\x73\x47\x2f\x20\x51\xbb\xa5\xb3\xfe\x25\xac\x22\xc1\xca\xbd\xb5\x71\xaa\x1e\x56\x7f\x01\xb6\x3e\xb9\x22\x25\x27\xad\xca\x2b\xd7\x96\x19\x04\xce\xcc\x08\xe2\x83\xeb\xea\x64\x5e\xe4\x11\xea\xee\xbe\x74\x76\x29\xee\x46\xad\x1d\x17\x48\xbb\xda\xa0\x35\xdc\xea\x0a\xda\x28\x28\x77\xe0\x39\x62\x56\x7a\xdc\x7c\x87\xc4\x6c\x39\x20\x81\x6b\xe7\x37\x78\x81\xe9\x57\x18\xa8\x18\xd7\x17\x53\xf1\x24\x8d\xed\x4f\x63\x9b\xc5\x17\x9c\x12\xa0\x06\x8c\xd9\x20\x31\xcb\x80\x0d\x2c\x8c\xb7\x30\x6c\xef\xad\x18\x8d\x32\x33\x36\x01\x7f\xae\x78\xf1\x1c\x21\x4b\xd1\xce\x63\xc5\x13\x3f\x4c\xa4\x99\x75\x6f\x3e\x5d\x0e\xbe\x5e\x9b\x11\xdf\xa3\xa5\x6e\x04\x7b\x13\x18\x5a\x35\xec\x62\x89\xda\xad\xde\xe1\x26\xd7\x4e\x38\x36\x45\xe7\x4f\x00\x00\x00\xff\xff\xc3\xe9\x1a\x88\x31\x0a\x00\x00")

func defaultchannelpatternJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultchannelpatternJson,
		"DefaultChannelPattern.json",
	)
}

func defaultchannelpatternJson() (*asset, error) {
	bytes, err := defaultchannelpatternJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultChannelPattern.json", size: 2609, mode: os.FileMode(420), modTime: time.Unix(1536933184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultHttpPattern.json":    defaulthttppatternJson,
	"DefaultChannelPattern.json": defaultchannelpatternJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultChannelPattern.json": &bintree{defaultchannelpatternJson, map[string]*bintree{}},
	"DefaultHttpPattern.json":    &bintree{defaulthttppatternJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

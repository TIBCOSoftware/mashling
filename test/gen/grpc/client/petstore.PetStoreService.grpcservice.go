// This file registers with grpc service. This file was auto-generated by mashling at
// 2018-09-06 13:05:41.831820537 -0600 MDT m=+0.488161437
package client

import (
	"context"
	"encoding/json"
	"errors"
	"log"

	"github.com/TIBCOSoftware/mashling/internal/pkg/grpcsupport"

	servInfo "github.com/TIBCOSoftware/mashling/internal/pkg/model/v2/action/service/grpc"
	pb "github.com/TIBCOSoftware/mashling/test/gen/grpc/petstore"
	"google.golang.org/grpc"
)

type clientServicepetstorePetStoreService struct {
	serviceInfo *servInfo.ServiceInfo
}

var serviceInfopetstorePetStoreService = &servInfo.ServiceInfo{
	ProtoName:   "petstore",
	ServiceName: "PetStoreService",
}

func init() {
	servInfo.ClientServiceRegistery.RegisterClientService(&clientServicepetstorePetStoreService{serviceInfo: serviceInfopetstorePetStoreService})
}

//GetRegisteredClientService returns client implimentaion stub with grpc connection
func (cs *clientServicepetstorePetStoreService) GetRegisteredClientService(gCC *grpc.ClientConn) interface{} {
	return pb.NewPetStoreServiceClient(gCC)
}

func (cs *clientServicepetstorePetStoreService) ServiceInfo() *servInfo.ServiceInfo {
	return cs.serviceInfo
}

func (cs *clientServicepetstorePetStoreService) InvokeMethod(reqArr map[string]interface{}) map[string]interface{} {

	clientObject := reqArr["ClientObject"].(pb.PetStoreServiceClient)
	methodName := reqArr["MethodName"].(string)

	switch methodName {
	case "PetById":
		return PetById(clientObject, reqArr)
	case "UserByName":
		return UserByName(clientObject, reqArr)
	}

	resMap := make(map[string]interface{}, 2)
	resMap["Response"] = []byte("null")
	resMap["Error"] = errors.New("Method not Available: " + methodName)
	return resMap
}
func PetById(client pb.PetStoreServiceClient, values interface{}) map[string]interface{} {
	req := &pb.PetByIdRequest{}
	grpcsupport.AssignStructValues(req, values)
	res, err := client.PetById(context.Background(), req)
	b, errMarshl := json.Marshal(res)
	if errMarshl != nil {
		log.Println("Error: ", errMarshl)
		return nil
	}

	resMap := make(map[string]interface{}, 2)
	resMap["Response"] = b
	resMap["Error"] = err
	return resMap
}
func UserByName(client pb.PetStoreServiceClient, values interface{}) map[string]interface{} {
	req := &pb.UserByNameRequest{}
	grpcsupport.AssignStructValues(req, values)
	res, err := client.UserByName(context.Background(), req)
	b, errMarshl := json.Marshal(res)
	if errMarshl != nil {
		log.Println("Error: ", errMarshl)
		return nil
	}

	resMap := make(map[string]interface{}, 2)
	resMap["Response"] = b
	resMap["Error"] = err
	return resMap
}
